<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="DataModifier_8h" kind="file" language="C++">
    <compoundname>DataModifier.h</compoundname>
    <includes refid="DeepPot_8h" local="yes">DeepPot.h</includes>
    <incdepgraph>
      <node id="9">
        <label>AtomMap.h</label>
        <link refid="AtomMap_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/abby/deepmd-kit/source/api_cc/include/DataModifier.h</label>
        <link refid="DataModifier_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>DeepPot.h</label>
        <link refid="DeepPot_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>common.h</label>
        <link refid="common_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>neighbor_list.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="13">
        <label>tensorflow/core/graph/default_device.h</label>
      </node>
      <node id="14">
        <label>tensorflow/core/graph/graph_def_builder.h</label>
      </node>
      <node id="10">
        <label>tensorflow/core/platform/env.h</label>
      </node>
      <node id="11">
        <label>tensorflow/core/public/session.h</label>
      </node>
      <node id="12">
        <label>tensorflow/core/public/version.h</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="7">
        <label>version.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classdeepmd_1_1DipoleChargeModifier" prot="public">deepmd::DipoleChargeModifier</innerclass>
    <innernamespace refid="namespacedeepmd">deepmd</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DeepPot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">deepmd{</highlight></codeline>
<codeline lineno="6" refid="classdeepmd_1_1DipoleChargeModifier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdeepmd_1_1DipoleChargeModifier" kindref="compound">DipoleChargeModifier</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><ref refid="classdeepmd_1_1DipoleChargeModifier" kindref="compound">DipoleChargeModifier</ref>();</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><ref refid="classdeepmd_1_1DipoleChargeModifier" kindref="compound">DipoleChargeModifier</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>model,<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>gpu_rank<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name_scope<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>~<ref refid="classdeepmd_1_1DipoleChargeModifier" kindref="compound">~DipoleChargeModifier</ref><sp/>()<sp/>{};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>model,<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>gpu_rank<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name_scope<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_summary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;pre)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute<sp/>(std::vector&lt;VALUETYPE&gt;<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfcorr_,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;VALUETYPE&gt;<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dvcorr_,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VALUETYPE&gt;<sp/>&amp;<sp/><sp/>dcoord_,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datype_,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VALUETYPE&gt;<sp/>&amp;<sp/><sp/>dbox,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;int,int&gt;&gt;<sp/>&amp;<sp/>pairs,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VALUETYPE&gt;<sp/>&amp;<sp/><sp/>delef_,<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nghost,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InputNlist<sp/>&amp;<sp/><sp/>lmp_list);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>VALUETYPE<sp/>cutoff<sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{assert(inited);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rcut;};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numb_types<sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{assert(inited);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntypes;};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>sel_types<sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{assert(inited);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sel_type;};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>tensorflow::Session*<sp/>session;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::string<sp/>name_scope,<sp/>name_prefix;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_intra_nthreads,<sp/>num_inter_nthreads;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>tensorflow::GraphDef<sp/>graph_def;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inited;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>VALUETYPE<sp/>rcut;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>VALUETYPE<sp/>cell_size;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ntypes;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>std::string<sp/>model_type;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>sel_type;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VT&gt;<sp/>VT<sp/>get_scalar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VT&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>get_vector(std::vector&lt;VT&gt;<sp/>&amp;<sp/>vec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run_model<sp/>(std::vector&lt;VALUETYPE&gt;<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/>dforce,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;VALUETYPE&gt;<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/>dvirial,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensorflow::Session<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>session,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>tensorflow::Tensor&gt;&gt;<sp/>&amp;<sp/>input_tensors,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdeepmd_1_1AtomMap" kindref="compound">AtomMap&lt;VALUETYPE&gt;</ref><sp/>&amp;<sp/><sp/><sp/><sp/>atommap,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nghost);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/abby/deepmd-kit/source/api_cc/include/DataModifier.h"/>
  </compounddef>
</doxygen>
