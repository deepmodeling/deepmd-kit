[build-system]
requires = [
    "setuptools>=61",
    "setuptools_scm[toml]>=6.2",
    "wheel",
    "scikit-build",
    "cmake",
    # see https://github.com/scikit-build/scikit-build/releases/tag/0.13.1
    "ninja; platform_system!='Windows'",
]
build-backend = "dp_backend"
backend-path = ["backend"]

[project]
name = "deepmd-kit"
dynamic = ["version", "optional-dependencies", "entry-points"]
description = "A deep learning package for many-body potential energy representation and molecular dynamics"
authors = [
  {name = "DeepModeling"},
  {name = "Han Wang", email = "wang_han@iapcm.ac.cn"},
]
license = {file = "LICENSE"}
classifiers = [
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3 :: Only",
    "Environment :: GPU :: NVIDIA CUDA :: 11.8",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.7",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Environment :: Console",
]
dependencies = [
    'numpy',
    'scipy',
    'pyyaml',
    'dargs >= 0.2.9',
    'python-hostlist >= 1.21',
    'typing_extensions; python_version < "3.7"',
    'importlib_metadata>=1.4; python_version < "3.8"',
    'h5py',
    'wcmatch',
    'packaging',
]
requires-python = ">=3.7"
readme = "README.md"
keywords = ["deepmd"]

[project.urls]
Homepage = "https://github.com/deepmodeling/deepmd-kit"
documentation = "https://docs.deepmodeling.com/projects/deepmd-kit"
repository = "https://github.com/deepmodeling/deepmd-kit"

[tool.setuptools_scm]
write_to = "deepmd/_version.py"

[tool.cibuildwheel]
test-command = [
    "dp -h",
    "dp_ipi",
    "pytest {project}/source/tests/test_lammps.py"
]
test-extras = ["cpu", "test", "lmp", "ipi"]
build = ["cp310-*"]
skip = ["*-win32", "*-manylinux_i686", "*-musllinux*"]
# TODO: bump to "latest" tag when CUDA supports GCC 12
manylinux-x86_64-image = "quay.io/pypa/manylinux_2_28_x86_64:2022-11-19-1b19e81"
manylinux-aarch64-image = "quay.io/pypa/manylinux_2_28_aarch64:2022-11-19-1b19e81"

[tool.cibuildwheel.macos]
environment = { PIP_PREFER_BINARY="1", DP_LAMMPS_VERSION="stable_23Jun2022_update4", DP_ENABLE_IPI="1" }
before-all = ["brew install mpich"]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"

[tool.cibuildwheel.linux]
repair-wheel-command = "auditwheel repair --exclude libtensorflow_framework.so.2 --exclude libtensorflow_framework.so.1 --exclude libtensorflow_framework.so --exclude _pywrap_tensorflow_internal.so --exclude libtensorflow_cc.so.2 -w {dest_dir} {wheel}"
environment-pass = ["CIBW_BUILD", "DP_VARIANT"]
environment = { PIP_PREFER_BINARY="1", DP_VARIANT="cuda", DP_LAMMPS_VERSION="stable_23Jun2022_update4", DP_ENABLE_IPI="1", MPI_HOME="/usr/lib64/mpich", PATH="/usr/lib64/mpich/bin:$PATH" }
before-all = [
    """{ if [ "$(uname -m)" = "x86_64" ] ; then curl https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_520.61.05_linux.run -O && bash cuda_11.8.0_520.61.05_linux.run --silent --toolkit; fi }""",
    "yum install -y mpich-devel",
]

[tool.cibuildwheel.windows]
environment = { PIP_PREFER_BINARY="1" }
test-extras = ["cpu"]
test-command = [
    "dp -h",
]

# selectively turn of lintner warnings, always include reasoning why any warning should
# be silenced

# W504 - line break after binary operator - there is conflict between W503 and W504 in
# some lintners. One recomends line bread after and one before binary operator so we
# swith W504 off and recomend this coding style:
# a = (b +     -> instead of -> a = (b
#      c)                            + c)
[tool.autopep8]
ignore = "W504"

# D413 - Missing blank line after last section - makes no sense only adds empy lines in
# docstrings
# D416 - Section name should end with a colon - only applicable to RST type docstrings,
# we are using numpy style
# D203 - 1 blank line required before class docstring - only adds unnecessary empty space
# D107 - Missing docstring in __init__ - Nupmy style documents __init__ parameters in
# class docstring
# D213 - Multi-line docstring summary should start at the second line - unnecessary waste
# of space, start on the first line
[tool.pydocstyle]
ignore = "D413, D416, D203, D107, D213"

[tool.isort]
profile = "black"
force_grid_wrap = 1

[tool.ruff]
target-version = "py37"
select = [
    "E", # errors
    "F", # pyflakes
    "D", # pydocstyle
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long
    "F841", # local variable is assigned to but never used
    "E741", # ambiguous variable name
    "E402", # module level import not at top of file
    "D413", # missing blank line after last section
    "D416", # section name should end with a colon
    "D203", # 1 blank line required before class docstring
    "D107", # missing docstring in __init__
    "D213", # multi-line docstring summary should start at the second line
    "D100", # TODO: missing docstring in public module
    "D101", # TODO: missing docstring in public class
    "D102", # TODO: missing docstring in public method
    "D103", # TODO: missing docstring in public function
    "D104", # TODO: missing docstring in public package
    "D105", # TODO: missing docstring in magic method
    "D205", # 1 blank line required between summary line and description
    "D401", # TODO: first line should be in imperative mood
    "D404", # TODO: first word of the docstring should not be This
]
ignore-init-module-imports = true
