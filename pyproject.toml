[build-system]
requires = [
    # TODO: unpin the upper bound when scikit-build dynamic metadata API is stable
    # dynamic metadata API is still unstable
    "scikit-build-core>=0.5,<0.9,!=0.6.0",
    "packaging",
    'tomli >= 1.1.0 ; python_version < "3.11"',
]
build-backend = "backend.dp_backend"
backend-path = ["."]

[project]
name = "deepmd-kit"
dynamic = ["version", "optional-dependencies", "scripts", "readme"]
description = "A deep learning package for many-body potential energy representation and molecular dynamics"
authors = [
  {name = "DeepModeling"},
  {name = "Han Wang", email = "wang_han@iapcm.ac.cn"},
]
license = {file = "LICENSE"}
classifiers = [
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3 :: Only",
    "Environment :: GPU :: NVIDIA CUDA :: 12 :: 12.2",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.8",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Environment :: Console",
]
dependencies = [
    'numpy',
    'scipy',
    'pyyaml',
    'dargs >= 0.4.6',
    'typing_extensions; python_version < "3.8"',
    'importlib_metadata>=1.4; python_version < "3.8"',
    'h5py',
    "h5py>=3.6.0,<3.11.0; platform_system=='Linux' and platform_machine=='aarch64'",
    'wcmatch',
    'packaging',
    'ml_dtypes',
    'mendeleev',
    'array-api-compat',
]
requires-python = ">=3.8"
keywords = ["deepmd"]

[project.entry-points."lammps.plugins"]
deepmd = "deepmd.tf.lmp:get_op_dir"

[project.entry-points."dpgui"]
"DeePMD-kit" = "deepmd.utils.argcheck:gen_args"

[project.entry-points."dpdata.plugins"]
deepmd_driver = "deepmd.driver:DPDriver"

[project.urls]
Homepage = "https://github.com/deepmodeling/deepmd-kit"
documentation = "https://docs.deepmodeling.com/projects/deepmd"
repository = "https://github.com/deepmodeling/deepmd-kit"

# Metadata below is dynamic. However, it still has static parts,
# which can be read by the build backend.
[tool.deepmd_build_backend.optional-dependencies]
test = [
    "dpdata>=0.2.7",
    # ASE issue: https://gitlab.com/ase/ase/-/merge_requests/2843
    # fixed in 3.23.0
    "ase>=3.23.0",
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "pytest-split",
    "dpgui",
    'array-api-strict>=2;python_version>="3.9"',
]
docs = [
    "sphinx>=3.1.1",
    "sphinx_rtd_theme>=1.0.0rc1",
    "myst-nb>=1.0.0rc0",
    "myst-parser>=0.19.2",
    "sphinx-design",
    "breathe",
    "exhale>=0.3.7",
    "numpydoc",
    "ase",
    "deepmodeling-sphinx>=0.1.0",
    "dargs>=0.3.4",
    "sphinx-argparse",
    "pygments-lammps",
    "sphinxcontrib-bibtex",
    "sphinx-autoapi>=3.0.0",
]
lmp = [
    "lammps~=2023.8.2.3.0",
]
ipi = [
    "ipi",
]
gui = [
    "dpgui",
]
cu11 = [
    "nvidia-cuda-runtime-cu11",
    "nvidia-cublas-cu11",
    "nvidia-cufft-cu11",
    "nvidia-curand-cu11",
    "nvidia-cusolver-cu11",
    "nvidia-cusparse-cu11",
    "nvidia-cudnn-cu11<9",
    "nvidia-cuda-nvcc-cu11",
]
cu12 = [
    "nvidia-cuda-runtime-cu12",
    "nvidia-cublas-cu12",
    "nvidia-cufft-cu12",
    "nvidia-curand-cu12",
    "nvidia-cusolver-cu12",
    "nvidia-cusparse-cu12",
    "nvidia-cudnn-cu12<9",
    "nvidia-cuda-nvcc-cu12",
]

[tool.deepmd_build_backend.scripts]
dp = "deepmd.main:main"

[tool.setuptools_scm]

[tool.scikit-build]
experimental = true
minimum-version = "0.5"
cmake.source-dir = "source"
sdist.include = [
    "/deepmd/_version.py",
]
sdist.exclude = [
    "/source/tests",
    "/source/api_c/tests",
    "/source/api_cc/tests",
    "/source/lib/tests",
    "/source/lmp/tests",
    "/doc",
    "/examples",
    "/data",
    "/.github",
]
wheel.packages = [
    "deepmd",
]
wheel.py-api = "py37"
build-dir = "build/{wheel_tag}"

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.setuptools_scm"

[tool.scikit-build.metadata.optional-dependencies]
provider = "backend.dynamic_metadata"
provider-path = "backend"

[tool.scikit-build.metadata.scripts]
provider = "backend.dynamic_metadata"
provider-path = "backend"

[tool.scikit-build.metadata.readme]
provider = "scikit_build_core.metadata.fancy_pypi_readme"

[[tool.scikit-build.generate]]
path = "deepmd/_version.py"
template = '''
version = "${version}"
'''

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
# links
pattern = '\[(.+?)\]\(((?!https?://)\S+?)\)'
replacement = '[\1](https://github.com/deepmodeling/deepmd-kit/tree/master/\g<2>)'

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
# image
pattern = '(srcset|src)="((?!https?://)\S+?)"'
replacement = '\1="https://github.com/deepmodeling/deepmd-kit/raw/master/\g<2>"'

[tool.cibuildwheel]
test-command = [
    "python -m deepmd -h",
    """python -c "import deepmd.tf;import deepmd.pt" """,
    "dp -h",
    "dp_ipi",
    "pytest {project}/source/tests/tf/test_lammps.py"
]
test-extras = ["cpu", "test", "lmp", "ipi", "torch"]
build = ["cp311-*"]
skip = ["*-win32", "*-manylinux_i686", "*-musllinux*"]
# TODO: uncomment to use the latest image when CUDA 11 is deprecated
# manylinux-x86_64-image = "manylinux_2_28"
manylinux-x86_64-image = "quay.io/pypa/manylinux_2_28_x86_64:2022-11-19-1b19e81"
manylinux-aarch64-image = "manylinux_2_28"

[tool.cibuildwheel.macos]
before-all = [
    '''pip install -i https://pypi.anaconda.org/mpi4py/simple mpich''',
]
repair-wheel-command = """delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"""

[tool.cibuildwheel.macos.environment]
PIP_PREFER_BINARY = "1"
DP_LAMMPS_VERSION = "stable_2Aug2023_update3"
DP_ENABLE_IPI = "1"
DP_ENABLE_PYTORCH = "1"
# for unclear reason, when enabling PyTorch, OpenMP is found accidentally
CMAKE_ARGS = "-DCMAKE_DISABLE_FIND_PACKAGE_OpenMP=1"

[[tool.cibuildwheel.overrides]]
# error: 'value' is unavailable: introduced in macOS 10.13
select = "*-macosx_x86_64"
inherit.environment = "append"
environment.MACOSX_DEPLOYMENT_TARGET = "10.13"

[tool.cibuildwheel.linux]
repair-wheel-command = "auditwheel repair --exclude libtensorflow_framework.so.2 --exclude libtensorflow_framework.so.1 --exclude libtensorflow_framework.so --exclude _pywrap_tensorflow_internal.so --exclude libtensorflow_cc.so.2 --exclude libc10.so --exclude libtorch.so --exclude libtorch_cpu.so -w {dest_dir} {wheel}"
environment-pass = [
    "CIBW_BUILD",
    "DP_VARIANT",
    "CUDA_VERSION",
    "DP_PKG_NAME",
    "SETUPTOOLS_SCM_PRETEND_VERSION",
]
before-all = [
    """if [ ! -z "${DP_PKG_NAME}" ]; then sed -i "s/name = \\"deepmd-kit\\"/name = \\"${DP_PKG_NAME}\\"/g" pyproject.toml; fi""",
    # https://almalinux.org/blog/2023-12-20-almalinux-8-key-update/
    """rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux""",
    """{ if [ "$(uname -m)" = "x86_64" ] ; then yum config-manager --add-repo http://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/cuda-rhel8.repo && yum install -y cuda-nvcc-${CUDA_VERSION/./-} cuda-cudart-devel-${CUDA_VERSION/./-}; fi }""",
    '''/opt/python/cp311-cp311/bin/python -m pip install -i https://pypi.anaconda.org/mpi4py/simple mpich''',
    # uv is not available in the old manylinux image
    """{ if [ "$(uname -m)" = "x86_64" ] ; then pipx install uv; fi }""",
]
before-build = [
    # old build doesn't support uv
    """{ if [ "$(uname -m)" = "x86_64" ] ; then uv pip install --system -U build; fi }""",
]
[tool.cibuildwheel.linux.environment]
PIP_PREFER_BINARY = "1"
DP_LAMMPS_VERSION = "stable_2Aug2023_update3"
DP_ENABLE_IPI = "1"
DP_ENABLE_PYTORCH = "1"
MPI_HOME = "/usr/lib64/mpich"
PATH = "/usr/lib64/mpich/bin:$PATH"
# use CPU version of torch for building, which should also work for GPU
# note: uv has different behavior from pip on extra index url
# https://github.com/astral-sh/uv/blob/main/PIP_COMPATIBILITY.md#packages-that-exist-on-multiple-indexes
UV_EXTRA_INDEX_URL = "https://download.pytorch.org/whl/cpu"
# trick to find the correction version of mpich
CMAKE_PREFIX_PATH="/opt/python/cp311-cp311/"

[tool.cibuildwheel.windows]
test-extras = ["cpu", "torch"]
test-command = [
    "python -m deepmd -h",
    "dp -h",
]
[tool.cibuildwheel.windows.environment]
PIP_PREFER_BINARY = "1"
DP_ENABLE_PYTORCH = "1"

# One can run `tox` or `tox -e gpu`
# to run pytest in an isolated environment
# Use with pipx:
# $ pip install -U pipx
# $ pipx tox
[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.0

    [testenv]
    extras =
        test
        cpu
    commands = pytest source/tests

    [testenv:gpu]
    extras =
        test
        gpu
    commands = pytest source/tests
    setenv =
        DP_VARIANT = cuda
"""

# selectively turn of lintner warnings, always include reasoning why any warning should
# be silenced

# W504 - line break after binary operator - there is conflict between W503 and W504 in
# some lintners. One recomends line bread after and one before binary operator so we
# swith W504 off and recomend this coding style:
# a = (b +     -> instead of -> a = (b
#      c)                            + c)
[tool.autopep8]
ignore = "W504"

# D413 - Missing blank line after last section - makes no sense only adds empy lines in
# docstrings
# D416 - Section name should end with a colon - only applicable to RST type docstrings,
# we are using numpy style
# D203 - 1 blank line required before class docstring - only adds unnecessary empty space
# D107 - Missing docstring in __init__ - Nupmy style documents __init__ parameters in
# class docstring
# D213 - Multi-line docstring summary should start at the second line - unnecessary waste
# of space, start on the first line
[tool.pydocstyle]
ignore = "D413, D416, D203, D107, D213"

[tool.isort]
profile = "black"
force_grid_wrap = 1

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E", # errors
    "W", # warning
    "F", # pyflakes
    "D", # pydocstyle
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "RUF", # ruff
    "NPY", # numpy
    "TID251", # banned-api
    "TID253", # banned-module-level-imports
    "T20", # ban print
]

ignore = [
    "E501", # line too long
    "F841", # local variable is assigned to but never used
    "E741", # ambiguous variable name
    "E402", # module level import not at top of file
    "D100", # TODO: missing docstring in public module
    "D101", # TODO: missing docstring in public class
    "D102", # TODO: missing docstring in public method
    "D103", # TODO: missing docstring in public function
    "D104", # TODO: missing docstring in public package
    "D105", # TODO: missing docstring in magic method
    "D205", # 1 blank line required between summary line and description
    "D401", # TODO: first line should be in imperative mood
    "D404", # TODO: first word of the docstring should not be This
]
ignore-init-module-imports = true

exclude = [
    "source/3rdparty/**",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports]
banned-module-level-imports = [
    "deepmd.tf",
    "deepmd.pt",
    "tensorflow",
    "torch",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"torch.testing.assert_allclose".msg = "Use `torch.testing.assert_close()` instead, see https://github.com/pytorch/pytorch/issues/61844."

[tool.ruff.lint.extend-per-file-ignores]
# Also ignore `E402` in all `__init__.py` files.
"deepmd/tf/**" = ["TID253"]
"deepmd/pt/**" = ["TID253"]
"source/tests/tf/**" = ["TID253"]
"source/tests/pt/**" = ["TID253"]
"source/tests/universal/pt/**" = ["TID253"]
"source/ipi/tests/**" = ["TID253"]
"source/lmp/tests/**" = ["TID253"]
"**/*.ipynb" = ["T20"]  # printing in a nb file is expected

[tool.pytest.ini_options]
markers = "run"

[tool.coverage.run]
plugins = ["source.3rdparty.coverage_plugins.jit_plugin"]
