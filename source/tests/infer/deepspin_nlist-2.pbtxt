node {
  name: "train_attr/min_nbor_dist"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3999999935274064
      }
    }
  }
}
node {
  name: "train_attr/training_script"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "{\"model\":{\"type_map\":[\"Ni\",\"O\"],\"descriptor\":{\"type\":\"se_e2_a\",\"sel\":[60,60],\"rcut_smth\":5.4,\"rcut\":5.6,\"neuron\":[20],\"resnet_dt\":false,\"axis_neuron\":16,\"type_one_side\":true,\"precision\":\"float64\",\"seed\":222,\"activation_function\":\"tanh\",\"trainable\":true,\"exclude_types\":[],\"env_protection\":0.0,\"set_davg_zero\":false},\"fitting_net\":{\"neuron\":[20],\"resnet_dt\":true,\"precision\":\"float64\",\"seed\":222,\"type\":\"ener\",\"numb_fparam\":0,\"numb_aparam\":0,\"activation_function\":\"tanh\",\"trainable\":true,\"rcond\":null,\"atom_ener\":[],\"use_aparam_as_mask\":false},\"spin\":{\"use_spin\":[true,false],\"virtual_len\":[0.4],\"spin_norm\":[1.2737]},\"data_stat_nbatch\":10,\"data_stat_protect\":0.01,\"data_bias_nsample\":10,\"pair_exclude_types\":[],\"atom_exclude_types\":[],\"preset_out_bias\":null,\"srtab_add_bias\":true,\"type\":\"standard\"},\"learning_rate\":{\"type\":\"exp\",\"decay_steps\":10000,\"start_lr\":0.001,\"stop_lr\":5.92e-06,\"scale_by_worker\":\"linear\",\"decay_rate\":null},\"loss\":{\"type\":\"ener_spin\",\"start_pref_e\":0.02,\"limit_pref_e\":1,\"start_pref_fr\":1000,\"limit_pref_fr\":1.0,\"start_pref_fm\":10000,\"limit_pref_fm\":10.0,\"start_pref_v\":0,\"limit_pref_v\":0,\"start_pref_ae\":0.0,\"limit_pref_ae\":0.0,\"start_pref_pf\":0.0,\"limit_pref_pf\":0.0,\"enable_atom_ener_coeff\":false},\"training\":{\"training_data\":{\"systems\":[\"../../data/data_0/\"],\"batch_size\":1,\"auto_prob\":\"prob_sys_size\",\"sys_probs\":null},\"validation_data\":{\"systems\":[\"../../data/data_1/\"],\"batch_size\":1,\"numb_btch\":10,\"auto_prob\":\"prob_sys_size\",\"sys_probs\":null},\"numb_steps\":10,\"seed\":222,\"disp_file\":\"lcurve.out\",\"disp_freq\":5000,\"save_freq\":10000,\"save_ckpt\":\"model.ckpt\",\"max_ckpt_keep\":5,\"change_bias_after_training\":false,\"disp_training\":true,\"time_training\":true,\"profiling\":false,\"profiling_file\":\"timeline.json\",\"enable_profiler\":false,\"tensorboard\":false,\"tensorboard_log_dir\":\"log\",\"tensorboard_freq\":1,\"opt_type\":\"Adam\"}}"
      }
    }
  }
}
node {
  name: "model_type"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "original_model"
      }
    }
  }
}
node {
  name: "t_box"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "t_coord"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "t_type"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "t_natoms"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "t_mesh"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "model_attr/tmap"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Ni O"
      }
    }
  }
}
node {
  name: "model_attr/model_type"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ener"
      }
    }
  }
}
node {
  name: "model_attr/model_version"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1.1"
      }
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "strided_slice"
  input: "mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Pack"
  input: "Reshape/shape/0"
  input: "mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "t_coord"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_1/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Pack"
  input: "Reshape_1/shape/0"
  input: "strided_slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "t_type"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "spin_attr/ntypes_spin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spin_attr/virtual_len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
        }
        double_val: 0.4
      }
    }
  }
}
node {
  name: "spin_attr/spin_norm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
        }
        double_val: 1.2737
      }
    }
  }
}
node {
  name: "descrpt_attr/rcut"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 5.6
      }
    }
  }
}
node {
  name: "descrpt_attr/ntypes"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "descrpt_attr/sel"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "<\000\000\000<\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "descrpt_attr/original_sel"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "<\000\000\000<\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "descrpt_attr/t_avg"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 720
          }
        }
        tensor_content: "\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{
      }
    }
  }
}
node {
  name: "descrpt_attr/t_avg/read"
  op: "Identity"
  input: "descrpt_attr/t_avg"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@descrpt_attr/t_avg"
      }
    }
  }
}
node {
  name: "descrpt_attr/t_std"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 720
          }
        }
        tensor_content: "\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?|\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\n
      }
    }
  }
}
node {
  name: "descrpt_attr/t_std/read"
  op: "Identity"
  input: "descrpt_attr/t_std"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@descrpt_attr/t_std"
      }
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_1/y"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "strided_slice_3"
  input: "mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_2/shape/0"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_2/shape"
  op: "Pack"
  input: "Reshape_2/shape/0"
  input: "mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_2"
  op: "Reshape"
  input: "Reshape"
  input: "Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\t\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape_3"
  op: "Reshape"
  input: "t_box"
  input: "Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_4/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_4/shape"
  op: "Pack"
  input: "Reshape_4/shape/0"
  input: "strided_slice_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_4"
  op: "Reshape"
  input: "Reshape_1"
  input: "Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ProdEnvMatA"
  op: "ProdEnvMatA"
  input: "Reshape_2"
  input: "Reshape_4"
  input: "t_natoms"
  input: "Reshape_3"
  input: "t_mesh"
  input: "descrpt_attr/t_avg/read"
  input: "descrpt_attr/t_std/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "rcut_a"
    value {
      f: -1.0
    }
  }
  attr {
    key: "rcut_r"
    value {
      f: 5.599999904632568
    }
  }
  attr {
    key: "rcut_r_smth"
    value {
      f: 5.400000095367432
    }
  }
  attr {
    key: "sel_a"
    value {
      list {
        i: 60
        i: 60
        i: 60
      }
    }
  }
  attr {
    key: "sel_r"
    value {
      list {
        i: 0
        i: 0
        i: 0
      }
    }
  }
}
node {
  name: "Reshape_7/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\320\002\000\000"
      }
    }
  }
}
node {
  name: "Reshape_7"
  op: "Reshape"
  input: "ProdEnvMatA"
  input: "Reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_rmat"
  op: "Identity"
  input: "Reshape_7"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "o_rmat_deriv"
  op: "Identity"
  input: "ProdEnvMatA:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "o_rij"
  op: "Identity"
  input: "ProdEnvMatA:2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "o_nlist"
  op: "Identity"
  input: "ProdEnvMatA:3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_8/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_8/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 720
      }
    }
  }
}
node {
  name: "Reshape_8/shape"
  op: "Pack"
  input: "Reshape_8/shape/0"
  input: "strided_slice_5"
  input: "Reshape_8/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_8"
  op: "Reshape"
  input: "o_rmat"
  input: "Reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_9/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\320\002\000\000"
      }
    }
  }
}
node {
  name: "Reshape_9"
  op: "Reshape"
  input: "Reshape_8"
  input: "Reshape_9/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice"
  op: "Slice"
  input: "Reshape_9"
  input: "filter_type_all/Slice/begin"
  input: "filter_type_all/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Shape"
  op: "Shape"
  input: "filter_type_all/Slice"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice"
  op: "StridedSlice"
  input: "filter_type_all/Shape"
  input: "filter_type_all/strided_slice/stack"
  input: "filter_type_all/strided_slice/stack_1"
  input: "filter_type_all/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "filter_type_all/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\004\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice"
  input: "filter_type_all/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Slice_1/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_1"
  op: "Slice"
  input: "filter_type_all/Reshape"
  input: "filter_type_all/Slice_1/begin"
  input: "filter_type_all/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_1"
  op: "Reshape"
  input: "filter_type_all/Slice_1"
  input: "filter_type_all/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/matrix_1_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        tensor_content: "3\302\227\242\212\205\253?\336\212\322\207\306\005\260?\031\'\327\324d2\304?\271\\D\003@;\274\277\363\0227\364\2076\320\277\231\013-\303\253\234\240\277H\314\026q\376r\305?\nEq\257\232?\321\277S\251y^+\244\266\277S\247\200\270\256\341\305\277\320\226\311\016\334\215\317?za#;\273F\327?W\37442K\215\301\277EqI\323\240\374\261\277ry\005\274Sn\241?\273\222\276S\336\234\256\277\003\313\225\221\263\327\305\277\347\221q\034h\013\313?\202\005\245\"\357\003\335\277\375\327\351\312\340&\322?"
      }
    }
  }
}
node {
  name: "filter_type_all/matrix_1_0/read"
  op: "Identity"
  input: "filter_type_all/matrix_1_0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/matrix_1_0"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\215S\242,\236M\313\277\"z?3\255\354\332\277\032>\3527\016\206\332?\374\\du\245\221\270?U\240k\261\233l\346?\201\276\204\r\374y\352?\327\260\013{\211\215\000\300~\347B\200^1\361\277x!J\317\325\033\356\277\312\243\\u\270\202\322?\263\002\262p\337>\335?t\245`R\3144\372\277\247\341\022\005(\030\312\277XN\331 \271f\340?4K4\003u\275\273\277\325*\355\\\202\313\366?4]\200^\301Z\373?\374\005W\230\353\n\317?&\355G\254\277~\376\2775\240\373\027g\034\370\277"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_0/read"
  op: "Identity"
  input: "filter_type_all/bias_1_0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/bias_1_0"
      }
    }
  }
}
node {
  name: "filter_type_all/MatMul"
  op: "MatMul"
  input: "filter_type_all/Reshape_1"
  input: "filter_type_all/matrix_1_0/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/BiasAdd"
  op: "BiasAdd"
  input: "filter_type_all/MatMul"
  input: "filter_type_all/bias_1_0/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "filter_type_all/Tanh"
  op: "Tanh"
  input: "filter_type_all/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_2"
  op: "Reshape"
  input: "filter_type_all/Tanh"
  input: "filter_type_all/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377<\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_3"
  op: "Reshape"
  input: "filter_type_all/Reshape_2"
  input: "filter_type_all/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_4/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_4/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_4/shape"
  op: "Pack"
  input: "filter_type_all/strided_slice"
  input: "filter_type_all/Reshape_4/shape/1"
  input: "filter_type_all/Reshape_4/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "filter_type_all/Reshape_4"
  op: "Reshape"
  input: "filter_type_all/Slice"
  input: "filter_type_all/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_4"
  input: "filter_type_all/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\360\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_2/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_2"
  op: "Slice"
  input: "Reshape_9"
  input: "filter_type_all/Slice_2/begin"
  input: "filter_type_all/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Shape_1"
  op: "Shape"
  input: "filter_type_all/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_1"
  op: "StridedSlice"
  input: "filter_type_all/Shape_1"
  input: "filter_type_all/strided_slice_1/stack"
  input: "filter_type_all/strided_slice_1/stack_1"
  input: "filter_type_all/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "filter_type_all/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\004\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_5"
  op: "Reshape"
  input: "filter_type_all/Slice_2"
  input: "filter_type_all/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_3/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_3"
  op: "Slice"
  input: "filter_type_all/Reshape_5"
  input: "filter_type_all/Slice_3/begin"
  input: "filter_type_all/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_6/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_6"
  op: "Reshape"
  input: "filter_type_all/Slice_3"
  input: "filter_type_all/Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/matrix_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\034\327\377\272\276\021\330?\210\207\006\236\303\250\227?\325\357\214\225\020\212\321\277\227\314\'y\236 \306\277YOo\355](\244?\035I\204\351m\330\304?j\025?\332\311LQ?\367:e\263\336X\240?\244\237\216^\367\034\314\277`\2560\353\177\304\306\277.q\3648\337\323\315?T{\311;\022\031\312\277\243\225\363\377\355\363\327\277ECU\017\215h\240\277ts\357\370\353m\250\277`\0214\224\177>\301?\n\315\t\263^\312v?R\336Y\025\r\367\246?\260,\224\223\371\354\313\277<\300\366\256h\206\247\277"
      }
    }
  }
}
node {
  name: "filter_type_all/matrix_1_1/read"
  op: "Identity"
  input: "filter_type_all/matrix_1_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/matrix_1_1"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\360\332\331J\303\025\260\277\237\345\242+\270C\367\277P\351\226\2079\344\334?O\177\002\353\t\016q?\t\313.d_}\370\277\375\360\370v\275(\354\277\211\3158\326b\336\316\277V6\345\345\306h\352\2776R\3059\311!\360\277\373\217\032\224\353;\373?0\243\337lB)\332?\377\t\314\260\033\352\332\277\2753\353\007\363\010\356?\372\365\220]\342\256\310\277\3308-Q\013\350\315?\222\374swZ-\336?\010\362\363\034C\363\374?\332\350W\376\235\273\266\277\237\243W\210N\245\340?\003\037(\362w\332\326\277"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_1/read"
  op: "Identity"
  input: "filter_type_all/bias_1_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/bias_1_1"
      }
    }
  }
}
node {
  name: "filter_type_all/MatMul_2"
  op: "MatMul"
  input: "filter_type_all/Reshape_6"
  input: "filter_type_all/matrix_1_1/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/BiasAdd_1"
  op: "BiasAdd"
  input: "filter_type_all/MatMul_2"
  input: "filter_type_all/bias_1_1/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "filter_type_all/Tanh_1"
  op: "Tanh"
  input: "filter_type_all/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_7/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_7"
  op: "Reshape"
  input: "filter_type_all/Tanh_1"
  input: "filter_type_all/Reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_8/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377<\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_8"
  op: "Reshape"
  input: "filter_type_all/Reshape_7"
  input: "filter_type_all/Reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_9/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_9/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_9/shape"
  op: "Pack"
  input: "filter_type_all/strided_slice_1"
  input: "filter_type_all/Reshape_9/shape/1"
  input: "filter_type_all/Reshape_9/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "filter_type_all/Reshape_9"
  op: "Reshape"
  input: "filter_type_all/Slice_2"
  input: "filter_type_all/Reshape_9/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/MatMul_3"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_9"
  input: "filter_type_all/Reshape_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/Slice_4/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\340\001\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_4/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_4"
  op: "Slice"
  input: "Reshape_9"
  input: "filter_type_all/Slice_4/begin"
  input: "filter_type_all/Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Shape_2"
  op: "Shape"
  input: "filter_type_all/Slice_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_2"
  op: "StridedSlice"
  input: "filter_type_all/Shape_2"
  input: "filter_type_all/strided_slice_2/stack"
  input: "filter_type_all/strided_slice_2/stack_1"
  input: "filter_type_all/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "filter_type_all/Reshape_10/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\004\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_10"
  op: "Reshape"
  input: "filter_type_all/Slice_4"
  input: "filter_type_all/Reshape_10/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Slice_5/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_5/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_5"
  op: "Slice"
  input: "filter_type_all/Reshape_10"
  input: "filter_type_all/Slice_5/begin"
  input: "filter_type_all/Slice_5/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_11/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_11"
  op: "Reshape"
  input: "filter_type_all/Slice_5"
  input: "filter_type_all/Reshape_11/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/matrix_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\303\243\030\021x\337\263\277\340\233\023\\ES\300??\237\235\375:\245\322?t\035K\264\244\243\265?I\220\211\347\373\376\311\277V\036\375\t\233\375\300?\314\003\331\243n\331\266?TE\205Y\225\205\257?\323g\275\226\223p\323\277\227\346\347;\005\322\274\277\005?\217<%L\264\277\000\250\345\334\347\275\327\277\234\200\307\204\360\311\301?\0244\250kJb\333\277H\303x\352\r\002\323\277\276{\361\232\232i\265?d\230\300Q\251\306\234?\276nn%^\201\311?\207\030\201yI#\232?M\020\273\316J\312\270\277"
      }
    }
  }
}
node {
  name: "filter_type_all/matrix_1_2/read"
  op: "Identity"
  input: "filter_type_all/matrix_1_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/matrix_1_2"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\335\376\213_\036A\360?\313\016@g\001\271\001@d\205\316V[\205\256?\035V\217\266\257\336\363\277\261U\343\351\235;\362?\276\351.y2J\360?\243\337\004\316\322p\343\277\234\016{\350\270\303\360?J\321\343\336\261\254\251?\217\376\270t\263\225\265\277mY$\267\366\265\277?S`\t\265\372\r\005@\020~\0209i\225\304\277\214\206\024\261+\320\302\277\303\203\016c\272\311\312?\004\252US\004\t\366?#\272\371>\303v\010\300\025K\nz\373\236\214\277 \236H\034aP\307\277\026\223,\347_T\360\277"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_2/read"
  op: "Identity"
  input: "filter_type_all/bias_1_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/bias_1_2"
      }
    }
  }
}
node {
  name: "filter_type_all/MatMul_4"
  op: "MatMul"
  input: "filter_type_all/Reshape_11"
  input: "filter_type_all/matrix_1_2/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/BiasAdd_2"
  op: "BiasAdd"
  input: "filter_type_all/MatMul_4"
  input: "filter_type_all/bias_1_2/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "filter_type_all/Tanh_2"
  op: "Tanh"
  input: "filter_type_all/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_12/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_12"
  op: "Reshape"
  input: "filter_type_all/Tanh_2"
  input: "filter_type_all/Reshape_12/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_13/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377<\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_13"
  op: "Reshape"
  input: "filter_type_all/Reshape_12"
  input: "filter_type_all/Reshape_13/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_14/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_14/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_14/shape"
  op: "Pack"
  input: "filter_type_all/strided_slice_2"
  input: "filter_type_all/Reshape_14/shape/1"
  input: "filter_type_all/Reshape_14/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "filter_type_all/Reshape_14"
  op: "Reshape"
  input: "filter_type_all/Slice_4"
  input: "filter_type_all/Reshape_14/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/MatMul_5"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_14"
  input: "filter_type_all/Reshape_13"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/AddN"
  op: "AddN"
  input: "filter_type_all/MatMul_1"
  input: "filter_type_all/MatMul_3"
  input: "filter_type_all/MatMul_5"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 180.0
      }
    }
  }
}
node {
  name: "filter_type_all/truediv"
  op: "RealDiv"
  input: "filter_type_all/AddN"
  input: "filter_type_all/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Slice_6/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_6/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\020\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_6"
  op: "Slice"
  input: "filter_type_all/truediv"
  input: "filter_type_all/Slice_6/begin"
  input: "filter_type_all/Slice_6/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/MatMul_6"
  op: "BatchMatMulV2"
  input: "filter_type_all/truediv"
  input: "filter_type_all/Slice_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/Reshape_15/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\001\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_15"
  op: "Reshape"
  input: "filter_type_all/MatMul_6"
  input: "filter_type_all/Reshape_15/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "Reshape_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_9"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice_9/stack"
  input: "strided_slice_9/stack_1"
  input: "strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_10/stack"
  input: "strided_slice_10/stack_1"
  input: "strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_12/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 320
      }
    }
  }
}
node {
  name: "Reshape_12/shape"
  op: "Pack"
  input: "strided_slice_9"
  input: "strided_slice_10"
  input: "Reshape_12/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_12"
  op: "Reshape"
  input: "filter_type_all/Reshape_15"
  input: "Reshape_12/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_1/concat"
  op: "Identity"
  input: "Reshape_12"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "o_descriptor"
  op: "Identity"
  input: "concat_1/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "fitting_attr/dfparam"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "fitting_attr/daparam"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "fitting_attr/t_bias_atom_e"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d[\236\207\317\263\033\300d[\236\207\317\263\013\300"
      }
    }
  }
}
node {
  name: "fitting_attr/t_bias_atom_e/read"
  op: "Identity"
  input: "fitting_attr/t_bias_atom_e"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fitting_attr/t_bias_atom_e"
      }
    }
  }
}
node {
  name: "strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_13"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_13/stack"
  input: "strided_slice_13/stack_1"
  input: "strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_14/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_14/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 320
      }
    }
  }
}
node {
  name: "Reshape_14/shape"
  op: "Pack"
  input: "Reshape_14/shape/0"
  input: "strided_slice_13"
  input: "Reshape_14/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_14"
  op: "Reshape"
  input: "o_descriptor"
  input: "Reshape_14/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_14/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_14/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_14/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_14"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_14/stack"
  input: "strided_slice_14/stack_1"
  input: "strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_15/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_15/shape"
  op: "Pack"
  input: "Reshape_15/shape/0"
  input: "strided_slice_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_15"
  op: "Reshape"
  input: "t_type"
  input: "Reshape_15/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_16/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_16/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_16/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_16"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_16/stack"
  input: "strided_slice_16/stack_1"
  input: "strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "strided_slice_16"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_2/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_2/size"
  op: "Pack"
  input: "Slice_2/size/0"
  input: "Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_2"
  op: "Slice"
  input: "Reshape_15"
  input: "Slice_2/begin"
  input: "Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "GreaterEqual_1"
  op: "GreaterEqual"
  input: "Slice_2"
  input: "GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "GreaterEqual_1"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Reshape_17/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_17"
  op: "Reshape"
  input: "Slice_2"
  input: "Reshape_17/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_17/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_17/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_17/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_17"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_17/stack"
  input: "strided_slice_17/stack_1"
  input: "strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_3/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_3/size/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_3/size"
  op: "Pack"
  input: "Slice_3/size/0"
  input: "strided_slice_17"
  input: "Slice_3/size/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_3"
  op: "Slice"
  input: "Reshape_14"
  input: "Slice_3/begin"
  input: "Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Reshape_18/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\001\000\000"
      }
    }
  }
}
node {
  name: "Reshape_18"
  op: "Reshape"
  input: "Slice_3"
  input: "Reshape_18/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "layer_0_type_0/matrix"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 320
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\352\3313xul\255?\234;gSao\271\277\361\014\232\200\200a\301\277\351\342\214\250\376\016\252\277\273\221\205\373(\321\251\277|&t\t\363\257\241\277\201\353@\215\230\021z\277\377;0Dj2y\277@.\321\320*&\232\277c\377P\003\261\345\241\277\0308uF\255\353\222\277\370\325\355\235\3542\227?\000ea\265\241~\255?/\347\340\314s\324\245\277\353p\022vQ\340\262?\265\253\330us%\262?\317\264\003\310+\237\262?i\343v+f\245\212\277\334\351\260Q\376\275\251\277\340\030\247\033\272\212\210?O\215l\224\365\003U\277;\005\202\2001\305s\277\306\031\361\221z\326\231\2775\242c\250\266\3247\277\204IS%\231=\246?\242@\2720\266\303\244?MW\273\346\302\351\235?\306\302\376-76\240\277CLX\247m\020\220?\247\237\363\235\"\216\273?\230;\033\333\235\324\264?U\035\261\261\315\033h\277\'\335o\377\266\255}?ui\037\013\215W\270\277\377\371\365\350\023\336\215?\312`\201B\334\205\262\277Pck\225:\264\261\277RL\365\355\3300\230?=\216\\pY\004\234\277\224I8\234R>\234\277\365\3056\342\025\r\252?\301\230\334\213\251\335s?Py\266\254\273\202\241\277dq\337\375o\006\233\277\035e;\323\262:\252?\307\317\2134R\373\257\277\235\245_\033G\325\264?C\010}a\362\253\253?\337d\003\313\316N\264?\023\220\244G\022\230\243\277\004[\255\177\260<\240?0\334\314\352\027\256\227?\260\006\364\303\344\241\266?\234\007)\272\3764d\277M\000\017\256$\264\301\277G\031w\320\246\334\207?\352<w\237\264\247\244\2771k!d\266&\275\277@\224r\274_\220\202\277\363S\364\227\016{\220?\237:\342\341\302\320\243?\2320x\t}\344\275?X\240/Uc\307\255?\311l)\371q4/?\337\177d[\370\232\263\277\241\034\320\206\0262\252\277\222-\323\242/$\227?\244?\3734-\301\215\277y*\035\247\345\350\275\277\260G\310\346eJw?\006\266\030\367\006\275\227?\213\314\320\233\233\372\244\277\244\245\364\254K\373\301\277\030\211T\253\2511\233?-%$v\345R\264\277\334\362\025\322\004\037\251\277cWp\201\341\305\262\277QTk\234n\016\254\277\2541\223oEA\224\277\375u\314\033~\204\266?6\217f|\270\204\265?\370l\317q\355[\252\277\234\233\3736\303\306\252\277gF\263\365\316I\251?=p\225\337(=\250?\241\002\356\330\343\365\217\277\313x\260\"\244\211\262?\237\335:O\002\253\254?A\342NX\013s\266\277\261p\016\362\201\261\204\277k$W\270\224\311\216\277\312\330\214b\334\034\252\277M\236\335\371\207\210\256?u\216<\037\244\372\265\277\201G\214*\232a\244\277\236f\232W\016o\240\277\311Xs\240Z-\242\277\250\230\365\330\336;\254?\023\221B\370\202\312\203?\243\210tjk\023\264?\016\225\217\223\255&\260\277\316j\010g\030\275\253?jz\2233c&\225?\357\323U\200\1777\261?R>\207z\"\000\\?n\370LYy\230\227\277\216\330\266n{\244\257\277R\376\204:r\027\217\277\332\243M\354\272U\236?\031 \254\"\357\371\252?o(\354\305\311\267\253?\305\234\302Z>J\275?-fW|\361\265\251\277\333\231J+?\252\240?\241\371:\255F\024\232?\221\244#\303\223As\277{Z\033\267kT\252?\305\374\007K\302P4\277\231\2177\231\211\014\273\277\212k\347\245\2522\257\277#\360\272l\024\n\226?\261\267g3\212U\260\277\311+v\227\202\245\241?\315\022\"\326\251$\267\277E\266\347T@]m\277vO+\211\251\356\231?\221\365\224\214)\200\236?t\005\324\262\306c\243\277\030\261\213\346<\317\225\277\231\rV\357a\365\234\277\332\265\355\027`\273\274\277\230\242\372\027\222\210\252\277%&\t\265=n\267?\221\302\3705\206\340\245\277}\273y\2208\\\223\277\261G\243\244*\256{\277\277\251\201\177L\035\241\277\342\314\347\2337\014\225\277\212\347\332\237[|\263\277\324{\034[5\342\240\277\031xx\253\235\213\260?\347\334\222/m\203\255\277\366~\321\3723\316\225\277 \006\327@T3\220?\333\222lj\354\235\245\277\372\227\312\342I\010\247?\360J\267\240\267\245\232?\214\255A\347\003u\242?\354\004\363\357\335\300\245?\323\214\370\206^E\241?%\345cq\203\223\245\277\221\303^\021\017h\234?\240Y\274wV\227\263\277\005\356\013\2707\375\261\277\251\301-\200-\232\240?+\317\370\332\177\030\244?\016\252\203~\033n\241\277\356\240\377\302F\364\274\2772\244\312g.(\232\277,\\\345\241\024\210\253\277+\320<\215\275\220\203?\305\254\360S\345\310\266\277\307\301B?\304\225\241?\324\256\330\211\241H\177\277\257N\314\237\256\306\240\277\247\022\t&3f\241\277\340aP0UP\237?\377\212\321\321B\360\227\277\r68h\317@\261\277U\316\203t\345\340\246\277\350\332\351\337\324=\247?W\221\273\341\220\034\262?\214\340\000\323\207^\272\277B\014/m\300\273\251\277\354\375D\014J+\250\277\310\376\030\237\007\372\271?\351\307\226\245\335\367\256?\261\237f\007\030pu\277!\327`t\376\224\265?c\357\246x\226;\266\277\010\371mc\341w\243?7(G\014#\376\255?O\342\030~)=\266?\312`Y\257\361x\201?\376\326\275\347\201\345\270\277\227\252\361Ol\r\251?T\351\327\330{R\253\277\376\275\335\037`\243\243\277\376\017\006<-}\206?H}aR\017R\264\277\303\205\374h\3346\225?\377\306x\354\274_R?\004\236S\032\322d\227?\242\263\271\304\337\'\220\277\313\202\364\347\243\372\252\277\323\037)(y?\246\277\241\245$Yi\210\200?\334\363\251\274q\322\235?{Ys\343<0\254\277\311\351\367\031L\003\226\277G\033\220z\010\250\252\277q\352\350\037\314\372\272?\377\231E\tm\216\227?\035<\372\226\210\244\225?\263b\036\272\266\320\256?C\257l\231#\034\246?\333\357s7\251\312\260\2773\230\217\215\354\257\201?\260Z\366\325\373T5?\351{\321\357P\253\244\277\300/\304\036\252\177\272\277\2318P\355\t\356f?\352\267vq\240s\266?#\345\275\021\230i\252?C\202\216U\030\260\261?/L\000\300\341\340r?\214\257x\217\224i\251\277\031n\324\316\243t\260?\313\335\035\tf\014u\277\3535\303,\030\231\254\277\205W\024\263\201\327\242\277\225iU\316\254\002\205\277(\313\252\211m\230\240?\316\341\255\2138f\234?\335\256\236Q\006\363T?\276\374*I%=\302\277\276\017\313\325F\346\241\277\235\304J\240P\302\244?\336\231T\373\024\t\204?\277\377\223\272\350\245\234\277\023i?\340\321\024\246?\025\257\305\266\256g\250\277\017\023Vo\333<\207?\007\214\214D\205`\232?\323\263\034N\014\235\216\277\017s \306\220\247\272\277\204\240B\333e\261\233?\347\326sf\025P\243\277n\022\370)\323\'\224?\306o/\356\217\325\214\277r\365\376\231\220b\301\277\002\270w=.\262\227\277W\344\200\203\341/\266?:\035\n\226\307Dl?\333\277\327\205\0333\244?\177\265K\364\312\315\244\277n-9.\2130\252?\205\302\\i\217#\205\277\247O07\362,\203\277o\335)\263K\312\302?\316\333\013\261\231\322\232\277(\235M2\327\350\250\277\270\004e\243\365\264\225\2773\203)\371\010\311\241?\246\274A*r$\274\2779i\254*{A\265\277\312\256:gV\213\255?\254\010@\310T\351\235\277\036\017^kYP\273?\366\336\036U\237\317v?U\323\327@\223\355\247\277\031\355N\237\274\206\023?\333\016\241\241\276\236\247\277\031\302\n\337&|\260\277\263\262Y\200A\202\250?\017\340\265\016\365\016\275\2778\336\0279\377\246\261\277=om\177\005\224\231\277\270#uz\356X\207\277\375OG\354\034\225\261\277\\}m\177~_\265?yK\230d\216\301\243\277\234S\234F\367\336\267\277\351\346)\367\245\364\272\277\\/\306g\n\031\207\277\220\362d\333:T\206?\254^\253\367\n\264\243?8\225#\324\010\302\257\277`\336\311@\351\265\257?\033.\373\030\205\002\220?A\276\207\333\224\177b?\253*j\326\235\330\254\277\331w\345\332Wz\273?\331[\224\352Q\251\215?\322\301-\360\302c\201?U\030,\371C5\251\277\271x$\214\031\274\252?\247\021t\365\234\217\256\277\266/\177\003\337\365\237?\0249(\243\234\260\267?)\"\372\302\246\202\263?F\256\265Pt\211w\277.\215\315\247\354/\273?X\363\270\311\210\002y\277\253\032\264\356\234\366\221\277\322\303 \367\201\020\264\277`\275\307\350\304\031\271?\305\244\364\374\217\302\245?\240^\324\022v-\265\277\013\030$sA\241\233? 8\n\366\030\376\272\2779\272\222\202\327\005\253?\361\364\376i=\342\205\277\243]cQt\236\253\277K\344\332l\353\207\214\277\237\255\305\'\004\336\035?Jl\235\350|\036\215?\2348 \375\372\247\237\277\014\344\360\365x\316\253\277\313`\n\373m`\204\277\312<E\374\311\373b?\246\024\351\312\231\350\263\277\223\265>\260]\310\260?iJ,\325\225\352\245?\363\016 \367\276z\250?\n\373E\266\342\227\250\277\317\240\313\343\312\221\242?$T:\240dj\254\277\004\236\215C\270\312\261?\021\n\341\n:\325\255\277\217\356\370\215\373@\275?\255\257\346{\351\010\260?\t\035o\001C\026\257\277<\371T>8\346\272\277\242\362\237\177K\253\211?\004\027\353\222\036^k\277\024/n\352K!\232\277\210$\262\225-\216\261\277m\023_2\220\361\241\277 {\343\\\235\021\241\277\'\304\372\007\275s\224\277\334\364\244\317\305V\243?n\265\376#\352\010\243\277\201\227\251\032\024\350\242\277,\321\232\223\2504\240?C\310\343\205\215:\200?\350G`\350\r\226\237\277\021\304\257\253C\313\230?|\014\226P\254[\270\277\221\353\315\214\306>\252\277\035\246>a\264\274j?\261\210\3629\025\372\233\277yJH@\212<T\277\241\360L\365\235\223\253\277\377\2230\016\323U\243\277D\376\252\037\211z\227\277\214Or\0012\000\242\277W\350\200\302\250\315~\277\0231\3340/7\223\277K\251,c\247*\242\277)\371\350\337\020\365\226??\212c\216\024|\261?\313\327\303otp\262\277\203\312\346#W\263\233?\030@\232\315\211\315\206?9q\246\245\345\017\250\277\325\237\273Y\3333\256?\210\007\257\276\016\237\247\277\357\361\0363\205\322\242?\321\313\266\222vG\254?\354o\033\320s\177\241?(S\262\267\345U\204\277\342\243\007\337\2520\266?Pg\313\341\214\266\261\277\245\352K5\027\272\217?\021D$\230\230E\262?\255\032b`\222i\231\277\3528\307\263\327s\216\277\031\273\204\360(c\232?~lzL\3239\260?\'O\000\200\274\222v\277\2579\363y\'\024\225?{\277^\325\230\205\237\277\366\366\321\277=(\251\277\317]\330\037\333\020\227?\352\242\300?C\370\206?\336\360\246!N\253\252\277\243\341 \220\004i\245\277\346v\212W\276\220\271\277\243u2j\203(\221\277\251\2422\335<\242s\277v\251\262\310\257\375\250\277~Z\225\243US\230\277\0013Z\345[\245\261?\236:\250RB\211z\277\320\373\321\352\005=\250\277\221\275*\367\301\274u\277\322\330\210\327Vd\243\277\261\276\311\214j\234\213\277w\001\335:\222O\266?Ri\205\347V,\263\277\323!\227krQ\272?\345[\246\363\336\036\262\277\361@\203, \352\266?\362\275\006\tW\273\255?II\037Y\005\371\217?\371\262::\r\364\265?\324\336\276\3351\257\245?\270\267\204^+\014t?\210\242\324\365y\320a\277\224\255#n|0\264\277\236\277\245D\356\020\254?a\341\005\\A\251\253\277O\214\230\324\270\344\236?\302\221\303:\032\276\251?+\304\363\224^\341\241\277\375\357\316[\307N\233\277\266\357\363\016z\032\300?W\224\351_79\204?m/\"\347\333\001\222?\215\350%]\342\034\262\277\261\220\2729)W\205?\224\374\037\366.\276\301\277\347\363C\2364n\201\277\205P\375y\331\311\254\277\r\037\251\034\220s\246\277c3_\357X\004\271?\367e\217P\256\375O?\347\312p\365\252\234\231?\201lml\354\260\224\277\212\202HH_v\247?\273C\206\311\177\257\275?x6\217\247\033\260\274?\347\350>\361\006\014\210\2776\030\244\227Eut\277\327\341\010\304\344~\260?\"\331\311Eq\207\243?\224\275\035\375\021E\253\277\273\323.\241X\231\213\277\276\314\0324\226e\250\277\275\346>(\363\305\240?2L\310o\204K\254?\002\001\'\247\002\025\264\277\266\241\256\376r\263\241?TOL\226g \216\277\252r\n\333\353\227\206\277\021\233\374\210\271\203\177\277F\237Zq,\013\240\277\301\211\350\210\260\342\236?\021s\0015\311\277\261?\227\013\"\315\257\023\244\277\030o\344\332\334B\227?0\206\022D\2426\240?E<z\377O\215\222?\231\002\273\033\002\262\244?*XT\220_N\232?\372\357\004\277l\245\245?\247\253\034H}[\261?i\315;\344\202Fw\277\213R(\226+M\201?\222JkJ@R\221?f\352\377n\341\223\200\277\030lv\354E\202\244\277ZnT\330\313\220\204?\242\0167\010&\202\262\277\337\263\201\034I\021}?\333M\023\240Ov\200?\363w\354\365,\353\222?\n\014\317\214\372\023\213\277 \355U0\345\035\246\277\000\243\3469#E\207?+\332\333\304\007p\261?\216K\361\337\331\226~?\372\372\2748y\300\233\277a\225\236\355V\360\253?\235\021\375\231\266\333\263?E\362\343\000\031O\266?M\273\221\002\251\277\217\277deZ9@\347\254\277\376\236%\264\027W\266\277\2427\332\016\263\035\240?\021jL)\266\232\233?\257\177^5R\232L?\310\201\244\364\226\332\246\277C\317l\310cu\262\277\016c\245R\214\302\244\277*\265{\272\357\353\241?\202\213Z!\250\227\262\277|\225y\370\260T\225?%\370\352\240\307js?V0\333\373\231\302~\277\\\310\332]\243\327\264?\374\324\340\237\323\250\236\277V\245\024*\n\241\245\277\025\221f\210\352;\262\277$\220\246o\247\016\243?\240y\365=\260u\273\277\345\362\336\224U\371\221?w\304\212\330G\\\201\277\317\307(MS\273\307?\232\203\234<>_v?\004\201R\026\301\244\237?o\333pt\355+\261\2778\307XT[\030\236?e\023\212V\326na\277\3343\203(\010\031\257?7\r\226\233\325\201\243?\202!\2761\327\365\266\277\013\371y\315\'ev?W\rM\255\270\365\255?\033*\037\227\2677\233?\337\302\207\301Lh\210\277\007m\253\346\362\264\211?PG\271>=\036\230?3\245\376\232\352\005\251?\245\347f#xW\240?)\300\376\323\035n\213?\330k#!/^g\277Q\376W~\366\023\240\277J9\316`\264\276\227\277\275d\224\207\373\252\237\277\371\366]\340\342!s\277\372\231\320\240\223\262\244?\'\262\257\263\321\340\273?;\350\305\221\336\344\256\277\025\351B\203\341y\270\277 *\017+\303F\232?\327\262:\336i\227\272?UF\245\364V\347\220?^\224\302\300#\221\271\277\202\330Fy\007C\223\277\341\t\355\316r\222\217\277\214\3557\304Z\013\260\277\306FG\022\303{\250\277\314~\373OgL\233?1\213\310\316\306t\225?\314\036n\331o\270\203\277;\3554h\'k\235\277\217\231\036g\214\251\274\277\377\246\313\255q%\257\277~T}\014C\304\250?\0218\316\330\323\220\240?\256\273B\353\0059\226\277\351ZJ\220\305\354\243\277\246\273\233\241,\302\233\277\346\374V\265\206\024\210\277&\227\315\327\217e\245\277\345\303\211\260\261\004\275?\245\345\034^yZ\255\277\336\243\346lBV|?\326\344>\342\325\343\202?F\\\216\333At}\277\"\342U\345\357\323\223\277\362\r\302\315\226\267\250?Y9._i>\232\277\216\344\203\312\317\266\255?\255\207\237~\235O\230\277+O\0148h\330~\277\006\253\227\253\247\021\264\277\333o\266\013\210K\246\277\177\004\211\n\261\230\243?\030\014\024\262\254\366\252?\025\r\327\014\317p\210\277\376\345h+c6\236\277\364\354\364b\334\210v?K\207;\3332\337\261?\337\331y\367@\000\262\277}\031xJ\371\353\217\2777\333\022\247\241\014\241\277\034\224\300\177\233\031\202?\353;\024\221Q\215\301\277Y\315\225\n\345\231\263?\364\033\303\253kA\300?\265F\365\340F\311\261?|f{g,\262\240?O\211|\035pxt\277\260\276\344\322\225=\226?\007\256M\354c;\215\277\215\0176\252\257\334\263?^\261k\345\353\244\200?e\247}J\343\312\266?\336\227t\374\336\350\247?1\325\237\200F{\244\277\215j \226\216\307\235\277\302\371\021N\177%\242\277\t g\205n7\233\277F\210\021,\264:\260\277\000\253\3254\342\357\233\277\034\373\225\352\307\252L\277\001l\317TyK\204?\261\254\321\215\010\350\221\277A-\311_\365\220\255?.\267\247\3038\225\255?\356\241f\332O5\243?\345\007\217\"\007\271s?u\177\244ji&\241\277\204\361\016(](\221\277\033\204\316\0239\211\300?\367\233\230\351=+\262\277\020T\356 &\252\272?\221\357\265\321K^\251\277E\000Y\351\323y\270\277`\225\264\025\025\037w?(vmk\370\242\247? \313\n60\n\251\277\363\247\210:N\026\227?(\272\004\217I\016\230?\033+\200P\371\357\263\277\375z\267\240\220\373\246\277\332\366\371jmB\261?\316\324\304\363\325\337\227?\355\203\177=\376\331\203?\247+\262\315\376\217n?Z\002\304\215\214\274V?\t\330U8\226\345\275?\262\252;\314;\230\243\277\377:d\376\350G\236\277\361t8u\343P\262\277xA%\032(\354\240\277\330\345V \255\221\257\277\260v14\035\335\246?\351<B28\271v\277i/$\322\216\274\253?\345\226\262\257\037L\224?\367Jo\326\374<\227?8\277\005I\004\221\261?\024\217Nh\230\214\257?\212 \235A\217\317S?)>\320b\337\022\264\277V\326%\212Iv\263\2778\212:\373\376X\246\277\303\376R\010\342\302v?\227\n\003\362\254p\263?i)dr\202\201\224\277\214\301\007\333;3k\277\032\n.\320@\023\263?}\271\235\013>\307\266?gd/$\256\004c?\363\254\256\026\262D\255\277[\345\367s\342P:\277\227\300?@%\251\201\277\206\255>\304\274;\253\277L\213\241`\374\261\262?\004\244I\250lQ\252?io\330v\002E\262?\377!\330+&-\240?\004B\314JB\002\234\277\014\357\026\324\303\254\231\277\322rn+\030\032}\277lU\330\267,[\241?e\2425\331\313\211\270\277\265z$\006\357-\267\277\222\326\223\300\323U\260?Z\207\013\211.\376\206?G\221*w\346+\262\277\300\335\275@\274~\266?\231`\362\240p\213\257\277YM-\230\371\260\202\277\245\2320\227\033\276\304\277m2\373d\034Hs?H\206\306\377\224\271\242\277\013C\367x$\336w?%\016\333%\273s\250\277d8\212\324\273$\246?:C+\205\301\354\215?\035\233`\321\020w\240\277\310\360O\030\343\251\257\277\004\205\313r\265\223\261?\315\316z\201G[\206\277\3629\233\014`\364\250\277\231 |\223\365\007\246?\236\321\345\022+\021\236\277z\207u\212E\222\271\2776\360~\215\355R\261?@3\343\356\307\253\257?\360\203Lo\251\315\234\277\016b5j\252\341\266\277V\357\235\246\321\233\240?\322\307\003=\244\216p\277-z\235\352\355\225p?\201\221\352B\337Nx?J\202\271\275\010;\260?.\373~Q\256\026\253\277\005\n5\316\346\214\207?\231\330\325\017\350\205\340\276N\375\200dly\230?\245^\210\333\2342\246?r\263_{\214\030\247\277@\376.d\334\031\226\277\353y\322\272\323\244\265\277`U\332\002\376v\247?\222\304\037\255\205+\253\277\201,\0167S\316\243\277\024I\271>\003\016\274?GA\220ie]\253?\271#\264\341v\306\272\277[\335\247\357\303\361\201\277t[\253\306\206\025\261\277\332\232\006\230\035\243\216?\216;E\033\325n\256\277\311Y\207\245\331\372\264?;\236\224\323f\304\246?\255tsA6\037\257\277\263\243\255\263=\277\252\277\314\3208w$\371\240?Y\356\304\217\206\031\242?\3667\245\027r&\204\277@d\272\'\205N\243?\210395\rw\263\277\256F\203?\206\024\221?\201\327\211\005\034\350\237?EJ\341\264\357K\262?\213\321[9\013\332\265\277\304\021\3761I6w?\337q\337G\225P\262\277\363\316\307j\270tc?\320\224t\324\302\023\245?\252b3\270\tS\271?5\205&\316\335\264\253?$\3001P\240\\\243?u\035\016\324\225\274\237\277&11r3\322\221\277oX\220Af\270\251\277\223\307\262\337|\250\201\277\223fZz{\350N?\200\370\267\361TN\244\277Zy~\244%\340W?v\003:\273E>\265\277\036\351\321\357\213\366\253\277\241W%\252\214\274\266?\254Y\311\202\024\031\200\277\025\261k@M\330\241\277d)\227\321\345\272\254?\220\242\355\367\370g\211\277\210H=\306\006\274\261?\\\223\202\023\205C\246\277|v\231b\321D\232\277\221\351\220)\246\036\265\277\241\340n\221j\247\247?B\214\026;\212^\251\277\004\007\2075J\303\255\277#C\024U\324_\222\277:\353Q\232Q\336\220?`\224\271\301I\306\261\277<%/.\251\350\246?\310\317\004\313D\204\254\277y\007Q}4\354\237?cmc:\030\322\271\277\344O\262\356\345\222\256\277:f\034\231:\212\260?\255{9L\303#\275?\3143\025\273\267\344\225?\262B\327?\367\370\260?W\t\n\201\300\223\236\277~\361\325\027\206\210\262?k%\201\027 !\203?\303\013\255]\024\r\265\277\312\257\370\264\252\202\227\277\027\204\362.\377\223\251\277l\317\005 \024\233\205?\357K(\256\232\364\236\277\350\263J\357\253\001\243\277\240\322gm\023\024\271?\014\014VZ\371\376\203?f\202s\366\362\252\250?\357\230R/\222\230\220\277q\364\021j\346@\240?\370TP\302\276\201q?\023-\227~\275:\247?\265B\013\370\0272s?\330\324\217\217\337\226\240\277oy\033[\260\260\267?YuK\272\252a\243?\2640H\316Ai\215?\367\311\216C\210^\231?\321\014J\247\272h\265?\007\021\345?\r\001\233\277p!\305P:\262\256?2\261\211)\324\204\224\277\014\341\tp\307\224\241?\016#hngO\274?\242!o\373 \255\262\277!\242a\344\357S\206?Q\".\324\352\222\246\277\206ni\003\361\'\257\277^P\212$ye\254\277\033\tZ\3068/\220?\016KH^\244\247p\277\325;&\231?N\226?\354\375\301\367b\022\226?,\031m\247\241\244F\277\357\311\263h\362\024\265\277ef9\342`\321\243?\014l\373\350<\251t?\352\276\257>\255\260\261?\253c\204w\n\034\231?=+2hx?\211\2771k4<\'r\244\277\265\204\r\314\006\205\241\277\207\372&;\252\306\247\277T@@DR\327\231?\237\230\312\357\362\006\251?\277N\026\365\254\316\254\277\026\022\276\351\001\246\245\277\237\303\363\351D(\223\277\271\037,=\034h\251\277\025\342\216\302_\037\231?\013\320ty\037\320\245\2778\247J\251\300\375\205?6\211\331\227{\301\227\277\306On\201\347\275\206?d\204 \260\310\277\247\277a\333\203\324\313\276\236\277\222\356z\214\201\247\260\277C\376g\375C\311\236?\3023\332\252T\370\251\277[\350\351%i\016\246\277\274\317\260X\234m\252\277\270j\241\363qV\252\277\211\275\326?\334\024\263\277\243\010\352\365\355w\247\277\335_0\242\"\274t?\230*a\377\177\200\222?\202Xz\322\354\222\235?\256\264;iK\177\241?7\212\327\370JV\255?-\345Q7\350\255\263?H\354\324M\364d\271?\"u\255\241H\360\227?N\033\327\004\005\357C?o\362j\010\262\177\264\277\346\341\202\345\022\340\223?\226\273:\207s\t\231\277\221\313\247y\257\273\203?S\337\004\001\006\260\263\277\326A!+~\311\240?\353\223\275F\244/\230\277h?.\376\220\306\266\277Jlw\0143\210\271?\226}sA\366_\231?\0322_&\363\246\233\277RaZP/m\246\277~\214\247A\306\t\241\277\342\335\204C\366*\264\277\025\227\212\232\2733\241\277F\033\324J:\030\210?U\345BT\r\330w\277\367\033\325r\217\"\267?\340p\032]\2344\277\277B\311\031\357ft\236?0\276BC@\230\225\277\226\010E/\003\273\232\277\350\276/i\221G\266?\036\273\004^\034\224\263\277\306\370\365H)\000\271?\227\356\363\256\251*\263?D\241\363M\271\003\205?=kG~q\255[?\021\203\275\260b\242\177\277\277\252(\3146\313y?%\253y1\302\215\256\277,\026\000#\204\316d\277\253\352\272\307\201k\262?h42p\341c\205\277\256\310\2644e\257x?\213\037k\020\272\343\244\277\3374VF\260j\247\277(\264\224\225\031$`\277^\307r(=\327\210?\026\205\205\301R\'\267\2775,\243\024\237\216\220\277{\031\201Q\340\027\266\277\360\373+%|g\222?K\211\'\221\004\377\241\277k\004s\263\016\376\253\2773]x\003\233}o?\010`\216\021\346\n\256\277/\337\213o\337\362\214?\"`\301\253\277c\276\277\325a6od\306\210?\311\252\247\375&\203\222?\363R/\033~\237\253\277\027K\333\374\326\027\261\277qH\250\036:%\264\277;\201\2519\330(\206?\365\233\337\265\260\273b?\223\355\322\032\r\021\244\277v\376\246\251\356j\237\277\370 \332\362\316e\257\277\022\244\034\271\375\177\241?\036\276\311\271\242\254\263?\306\316Y\262\003\023\265\277L\324\315m\340M\224\277\212\273L\027\334\216\234?\272\342\033\2009\305\222?\273\023Zi\225\267\234?\033De\3449\251|\277\326\326bM\327\023\251\2770\345\252\0008\\\301?\326\206ZQ\340u\273\2770\370\256]\032\220\221\277\305\276r\241\214\266\242\277|\270h\306Ab\236\2773\247&\276\342\337\251\277g\364\365\000J\304\252\277\376\366W\010\320\343\241?o\247 ,R\013\235\277C\267\374:\311\'\243?\301\310\310\270\004\200\242\277\215p\257\215\363\037v\277\354\344\330R\201\265\257\277\307\266q\023Mk\245\277\004\305$\306\302\235\244\2773v\224j\351\345\251?M\357\023!\266l\301\277\252C\356\\\254 \210\277\317M\256\'\250\022\264?\342\245\247\322\366\306\232\277\340$=\251uX\273?X\360\353]N\234\265\277\0168\207\026hl\234\277\204tB\034*\007\276\277\010\325C\003p\331\177?\254\203!\025g?\204\277\033\307\366\320\\\375\242?\006:\0026\351\033\257\277R\037K\026\320\305\270\277r\265X\332\303\243\244?\355\250\245!\206R\256\277b\310%\370\272a\261?Q\007\375\250\315\241\205\277C\177\021s\t\034\301\277\362\300\244\265c\002\272\277K\340\366\000\262L\226?]\250^\243A\017\267\277~\031\014U\270\324\277\277t}I\221\346\233\252?\227\003\304K\312\374\262\277\355\000\353\341\327\201\254\277\270\200O\316\366z\270?\367\251\240\200\t7\263?\360-\364\001\314\226\253?\371\326&\252b^\246?)\341\302\033\253\303\256?S\226`\330bJ\237\277X_\245J\322\010\271\277N\362\235\312I\310\300?\3203\257\265u\345|\277!\252\231\\\356`\271\277\036\207\350\301\220N\254?\300\220\214\217b\241\251\277\206.\265\032&\352u\277\237\274H\322\033\275\260?`\230-\022v\304\224\277#\224\243\253\241@\263\277Z\367\205\037\330\267\233\277M\273\377\004\265\253\234\277\261\210\341-\356\365\000?\235l@\220\033\343\232\277\265<\002?/\371\242?&\221)$\016\320\260?m%j\032O\211\201?\236\371G\213\347\346\244\277Ah\\\246\315\252\225\277\025\225}\013\377\345\251\277\231\037-\t\326\351\202\277Jw\326\273\224>\215?\236\234\311=\212\200\203?f\271\212\206\251z\272?R\022\350\340%i\261?5{O\210\304\277\232\277\n:\035r\243\"\262?\320|)\224\221G\223?k*\357\370\314\275\255\277\257\t\336\233d\230\261?ftf\231\255\226\226? \023\370$\205e\251?nP\035\315\367v\241\277t\003\3076T\354\251\277U1:\301\363\306\233\277\202\001\357\237\203H\212\277\200\'\245\302\2616\243?h\351S\205ai\203\277\014\023\342\352>\r\242?Zs\2677\\\260\274\277:\322\311nu\024\241\277H\376\223\023\270\355\254\277\305\306O\325\372\342\203?=IPJ\221\\\251?\236M\231\002\034\264\247?\331? \263\212k\216?r\332F\327n\306\240\277\3344\3142\027\330\202\277\273w\257r\301\275\235\277\361\306i\311\014\354\241\277)]u \272:\216\277\274\300\343g\212r\210\277\232\317\014F\036\022\261\277\'\362\325%H\'\244\277\3006\226\024|\033e\277\202\261\356q\330\246\270?R\277\375O\235\376\222?\250?D]~R\261\277I\030\3251W#\226?P\314\010\301\240\310\250\277\267\366\2241\334m^?\206\250\256\364\035\243\267\277\000e\265\373\027y\250?\210\330<\226e\003\274?\272\313\010\277MQ\265?\345+ge\207\301\224?\217\035\240z\227\251j\277\274\243\320\267\375>\244?\177\035\026\021\364\237\252?$(hc\271\200\244\277\'\223\2110M\345\200\2770X\003/\254\316z?\220]y\356\224\314\240\277\207\277^p\366\204\227?\304Y&\310U\320\264\277\302\316\312\367\327l\236\277,\211o\037\020\345\203\277\320\366\347\321\2711\242?\"^\351\207\225B\234?\211\360\014\353O\253\221\277i\002\316\333\024\246\213?\267\032O(\362\306\275?\333v\n6\361\330\253\277\220n\335\327\016\303\260\277\025\231f\n\301\026\241?\303m<\354\340\005\246?=\363\005\365]|\232?\276U\321Z\246 \251\277\343d\371GK\"\222?$\'\2754\203\023\203?\001\245\214}\311W\311?E[|[\010\026\220\277CS\026\324?\361\243\277\247:\232\342\321G\221?\003\317\246\336\265G\205\277\337\210\027\006\324n\225\277\027$\3778G\351\241?\325i\235\334h\274\304\277\\A\316\267EL\271\277\242W\260?G\373\237?<\374-\363\266V\177\277\323\357g)\353\226\250\277\221\263\004R\203[\221?\226\216\177!|\353\240\277\224\036.tE.\264\277~\307\252*\344\353\235?\266\262\242\316\377\262\263\277\316\034\311\004\267\372\262?|\214\302\234Vm\203?\035\006\032\230L]\242?\236\325\362\203\265\223\217?\3102\271f\000\331\240\277\316\223\311\211\230\330\266\277\350c\212`\023\211\250?\231PD\316\307y\264\277\3763\335\'\014\014\265\277Rg\366\220DGo\277\207}B\2741M\254\277\n9\370\024+\240\222\277 u!\335\343T\262\277\326\260\007\352\241\374\256\277\262\352wLA\017\246?\002\246\t\364$\207\246\2779A\345\004`\005\263?\030vc\223\370\347\243\277\227\014\360\343^I\205\277\204\320\357!\246\240k\277\035\352;\225v\203\205\277]\361\030\346-\357\241?\376?\261d`\326f?\253+J\221\300\270\235\277\200\005b^\023\353\260?\236\314\030>@\277t?\271K\311\r\001\313\234?*\033p\217\324~\260\2777\365{\337\203D\257?\317h\014\354q\002r\277\313\247\340\025)@z\277\211:\301U}\201\260\277&%\016\276`I\220?\360\256?\\\006\357z?|\233D\356\232N\267\277\257\243\357\201\310\r\263?\006\273N\364\'\221\230\277e\211Uk\177\005\247\277z\366\003w\271b\226\277m\303\'\025S\024\243?DrT\306]m\247?\257\371\252A]+\212\277\240I3\320\265<\260\277ti\245c\237\374\211?\022#\342\027\271u\261?!u\344\335\260\311w?\357^\306\201\016\367\260?,[\244\003DR\222\277+9\207kC\312~\277\257\032\010.\333\263\235?\3121\001\272`\247\234?\371\303XQ\215k\262?\304\254\377\237\304\006\261\277\275\021\2062\016<\276?\365\210*\tx\211\244\277\206\376m\300v\322\260\277s}&\232\220\241\243\277\255q6\272\300\206\207?\343\332\367\017d\r\271\277\355X\321q\230X\242?\224\345:\'\342N\210\277J\270Y/\303\357\240?\326\013\224\214\253A\245?\233\010\243\361\321\334\207\277T\n\347\212DE\211?\202\020{\266\343_w\277\264\224\204u\306\'\215\277\034O\004\324BS\230\277\017Hyp\340\215\257?\210\303 \376\270\275\260?K\000/\264\354\335\226?\345\032i\273\177\026\250?\212J\333\377\251s\277?v<4\020\277\316\254?\021L\177\322\257h\217\277\232\324\357F9\262\261\277!_\342\257&1\231?\301\301m\220\354$\267\277\016\344\377\002\253\034\252\277\025\266\310\004i\201g\277\216\307\007\323\222#\252\277\246Kkt;\321\263\277y\276\332$\315\273\252?\3404\027\370X_\260\277r\211\225\224lwR?\277\365\260\237\000\253\246\277\010\313\000g\316\n\247\277\370\314\3740=\243\244\277M@<\343\025\204\214\277\341\2648\233\205p\276\277\227\nf\250U\217\223?\nChjFO\276?P\367f\025]}\263\277zz\360\275\273 \247?\035\307\224L\372\212\205\277\307ix\266\0253o?\3478\371.\250\230\204?\207\306#\377\"\242L\277\367\3159\353\211\267\247?v\200\322\214)S\177?\212\325\226c\006\307\242\277\036,Q\201\237\352\216\277\364\203}\005\035,\262?\233\254LdJZ\302?\3207\242\313\304\325\261?\252\225\267\n\353\n\263\277l\320\274k5m\210\277\031\356\377\266$0\241\277\311\302\351\363\"\276\264\277a\221\036&\207\223\236\277\276\276#\003\033P\274?\263\373*d\317\311\244\277~\224\352\262\214\353\222\277\252\270\031\3333Rx\277s\353\316\304\215\233\256\277\372\002\034q\327)\234\277\243\235n\266\265\003\261?\214\305\347\3413\021\300?x\222\030\311la\232\277qc1\343P\207\275?\377\277\315\017\375S\244?(\311\270\364\240\352\230?\374\274\341o3Q\270\277c\303\343\310{\376\254\277-\244\370V#+\246\277\216\336\363\262\034;\255\277w\256\322\023\243t\257\277\350\204?\230\204p~\277;\377/\215\354\326\253?dW!UX\313\225\277\324\313FO\006\344\247\277\273\325\255)D\215\254\277t\212\220\211\212 \243?S\206\257\014\367;T\277\013\245\355\0078%\236?\031)\364+\360;\250\277\376\371F\312o*\240?.0\224\3767(\265\277\216\257\014h\355A\224?\372\337\232\027\303\225\272?\247\320\274\366\321\206\250\277\205P\265\367\300\325\263?\3604\033\246\2347c\277\302&$n\204\254\246\277\\\342\310\222\314\213\230?\364l\241\360\215\003\262\277\233\022\027\025\245\rY?\222n\200\360\231\273\246?\326=\272\266\375\273\231\277\355\005-\'\230\205\252\277T\357\016.q2~?\357\026Q\264\240\375\235\277\376\330J\332\322\2369?\302\201\000\032\341\210w?Po\221\224\265\273\266\277\'#\035\241\302\353\232?\244\272\252\264m\325\274\277U\244%+\224\221\270?\341S\313V\310ut?\315\020\231\033\323C\232\277\314\275\2374\036\312\224?\253\341\317kuR\216\277\026\033\004`*\306\231\277\376\276ni\203\333\261\277\226\177t\353\255\245\205\277\327\277\025f\362\r\262?\336\321R\225\341\373\255?{\025\217\2210l\231\277\030D\323\213\253\233\300?y\221\355#\t\276\220?!(9\33276\206?j\2272\337\006\026\300\277\r\033\211q\033I\250\277\242}\350\333\370\272\266\277\"\355z\225\241s\222?\361\332\254\235\265{\251\277\010\276M\353z\273u?]\267\274\324\374\261\241?\016x!\004\320\235\266?\326G\366\217\235 \224\277s\373|\330z\343\265\277VW\321:q\030\243\277\003A;\360*N\260\277prO\014\177\314\264?&m\363\377\245\322\267\277-\247\000\374lG\241?\367\325\2351\021\010\216?=8\213\027^\027\265\277I1\271c!\335\201?\265&\001jy\264\230?B\032\374\376%\021\255?dj,\323\251\247f\277\241\206\323XJ~\251\277\005\250\220r\343v\235\277\232\323\311\002\274 \256\277\t\023f\270\253\347\203?P~\016M\343M\221\277\177\013\202\217@\313\237?I0K\340-/\240?\361\312\377s\246\277\236\2775\016-\336$\261\200\277\265\\\254\214\314\211|\277mq\200\236FD|\277\364\235\274\\&g\242?\255\242\342WF\016.?\261\314a\211/f\242\2776\036\262\273\261\366\247\2775%:\352\237L\256?\376d\243\241Y\234\235?T\020\024u\021\300i?\310 q\034\206\347a?j\016!\006\215\232\253?\330\t\255\001\307\344\252\277Nc\262\312[\321\212?\326\235]\362]\327\243?\201\32082\313>\237\277\360pXZn\271\252?\207b\304Ut\264\276\277\352\270\326\270:I\237\277\030\373\3728Z\214m?\222\377H\344$\314\261\277\233\3223\244\231>\210\277\250YW7W\222s?r\002\002\211&\312\261\277\256:\214\305W`\245?\314\262\016\366\327+\222?\033kC\367\233b\256\277\361)\377\333\327\374\247?->\3454\327=\220\277V\030\005C\227\035\261\277\233\262`:9\007\205\277\357eS@\365\021\263\277\013s\360\244\035H\237\277\331\n\226@Kt\257\277Uz\0019\334\374\245\277,\323\313\370\034\023\257?\215:@|\363r\275?\312\021*K|\254\252?J\216\016\204\215q\230\277\255\213\346\016\2149\242?b:-\377*&\202\277\033\236}\344@\324\232?L\373\337\255\275\362\225\277L6\247\351`\220\241?E\356\017\274\013\270\220?`P\231F\336\337\222?xtQ\332\373%\232\277\340\363\007J\250\251\306\277\376y\017\365l?\253?.\361\212\377\220^\230\277\206!%\346\232r\273\277n\271\30267\250\236\277\274\005]M\370A\206?\253z\257D3\031\206\277\374\013\2401x$\217?:N\" \350\323\212?\020\321\003\260\222\037\225?\312\320\252N\365\256\222\277\250rg\372\247Z\214\277\220$\326\250J1\265\277^N\016B7w\270?G\360\231\351\355\321\264\277\036\224\303\315\334\016\227\277/Y\207\356%;\233?\214\215\307\323\266]\224\277\222b\270\320L!\205\277O\262\357M\271$\235?+&\331\375\023\206\222?\033\256_S\234\276\240?\246\017\310\352=\277\236\277i\347\304\364\247\302\177?\321\007\217T\024H\231?\r\004\201\335V\373\177?\344\327\242\377vh\204?\253\202\230p\r\342\203?\242\236Fr)w\252\277r\273\357?\243\332\242\277\330W\233J\222\367\217\277\274\3224\275E\202\245?_\320{+\031Q\260\277\361.3\212\367>\264?\370Npp>#V\2771\"\320Kp\001\232\277D\300\364\200\314\365{?4\013\347 \316|\266?\306\334\300i\246,\244?nR\252\324\241\355\247?C\215\244\350\214\344\263?O=x)p\256\236\277$.~\361c\214d?\273\242\276\360O\264H\277(4fZ\004\207\245\277bQ\276\025\321\271\262?\370d$K\224D\247\277\205\351yNp\357\237\277u\342\371\275\025\210\266?CSoEu\r\240?\331c\354\222\021N\204\277I\244\317\370\005{\253\2778\311\243\266\255\373\225?\262\360\014w\347*\240\277=\200\020\267\377\020\236?\241=\336\021E\203\253?\331\010r%\253\362N?[\246\2478&e\240?\ro<\375<\363\263?\2229\260\255_f\214?lSPo\200y\240\277v\177A;G\202\220\277\2448j\2466gF?\314\202\300\365g\327\247?b)\371^\253\332\227?\331%CC\372^\247\277\351\227\023\355\221\334\231?\036\303\341X\335D\237?\230g\307[\332B\265\277\226q\323\263\326\272\247?\014\263&\354yy\262\277\336\341f\005UF\263\277\336\260=<\301G\264?\024\002\025l\210\217\232\277N|%\032\227s\243\277\t!>x\006|\207\277\320\221\277\030J\022\202?D\221\303w\200\325u?\217\213\327\315C\310\256\277\235\253k\266\270@\242\2772\320\000\031|M\255?\000\3075\037d\313\225?c\206*\235\215\"\262\2771\036\300d4\\\225?\355o\234\370su\244?_y\206/\316\005\231\277\377\267\237\310\322\022\251?R\246\244\032\361P\232\277\014\213z\375q\342\264?\221|\022\242\014\221\251\277|\261\263\375\215IV?t\213\2766\305E\267\277\353y\255\233\022M\254\277\333\377n\362\321`\211\277x\337X\362\305\315\244\277B\322\021t\r\264Z\277\35309\036\251L\204?\027\236b\013\226Q\300?\350\t\260\027\003\336\233\277\307.\313|<+\270?\311\363\201\246\233\247\237?+\221\261\025d\326\227\277\2056G\342\006\313\222?\023\373\212y\226\016\241\277o\355+\200\373F\260\277%\364\244\352\300\314\217\277\266\224\320\332\342p\242\277\222\rB\350\205\021\262\277V\216\334\3450f\250\277\240\232y\247\327\271\261?8\214\353V\344\255\264\277\260\300R\'\023\247\265\277\003LG8\357\023\246\277b\347\273d\260\333\245\277\333\205\254\2628:\262?\202\021-\tfr\266?fG\376\253p_\264?CxB\242{\231\271\277e8[v&\001\252\277\270\274\302t\354\037\245?lS,\257\311\334\256\277?\275\200\220E[\225\277c\\.g\275#\246?\202\316\224 o|\262?(\245vl/\001\245?\253`\313\272\347+\244\277\251\007\235\223/\362\233?\214=&].Z\262\277\002<\233\361\302\367\242?\004\367\377\205\013\277\245?\261\256L)\262\270\255\277\276\226\244\2761\254a\277\276{\205D*\214b\277\277\376\236\214^\331\276\277\302j\002$\025\373\216\277V\233\366\310\370:\264\277L\247al\304\304\243\277\360\324\3671\314M\225?/\250\261\221\222\276\227?\017\222\221\363S\"\302?\374\371\333\211\220_\252\277\010\272\037Eai\213\277\245%\177`\237\375\244\277SP\025\010:/\261?\242\303\0144\307G\221?@\030-\036 L\220?I\312N\344\323+m\2771\205\201\005\352\221{?\354\226$$\356o\265\277\3524D\300wf\234?\245\245\367p\177\213\234?\321H\226\036\333\272\256?\213)\031\313\326n\265\277\272\344`\3724\325\211\277\206\306Y\362*ty\277P\237\265\302\316\304\215?z\323\304\222\315\311\257?\023\340\370t\024\265y?\r\222\323\367\025\367\232\277-,\221\035C\000\263?8\215\212\023\024\r\245\277\211\345-e\333\031\216?\200\\\347\355w\234j?>\036\323\033\275\215\267?\254L\375TL\241\221?\022\344A\370\r\350\260\277\216\324E\373\240\246\252\277\341Y\371\311h\020\262\277K\335\372,\237|\225?2\006\r-\024[\261\277\225:\263IR\263\264?\330\261\022\276\'\206\271\2775\')f\340Y\222?\217a9A\354\035\260\277C\333t\342\r\277\254\277\365o)\201\336_\242\277\313\\^?K|\237\277\022\3572}\276\201\273\277T\363\3444\377I\240\277\363\275\355kp\363\206?\243\276\207\217\265\020\243\277\266\257\216\204\r\027\266\277o\363\\\354\216k\252?aT\256\272\306\336\270?j\377\240\000#o\240?\246#\260\333\255\267u\277k\241n\322\244l\247\277Nu\355\204\005\352\231\277\356\027\014\\\030\230\245\277f\215O\333\307\027\247?\236\025\217\360=`\245\277\275\316+p\214\250\206?\333_\254W4=x?\301^a@\211>\300?dz\264\320\336\351\243\277\260r^6gP\217?fH\363J\201\302\230?\317]JQ\004ek\277\313U+\"\313\254\226\277\200+\347\366\262\262\221?9\314\006\230\352\342\254\277(\314n|\240\251\241?\027\241\273\247\213#\231\277K.?\2703\270\260\277\222r0\243\351\247\275\277\341\334\357\250\037_\217?m\263s\024\355q\265?a\300\237\023\323\270\246?\237_\313\250\343\205\224\277M\025\374\027\2136\267\277\266\237\223\203\206}\216\277\240\255\301\242\321\310\274\277\373\224\031\233u\236\204?\3777\344\350\236\201\226?\300\366ms;=\240\277f\232k\005\343\377\216?]\241\025\020\274\240\225\277P\243\276\203L}z?s;\244\246\0203e?I!\343\275\347\357Q?!\206\371mq\037\274\277\353\250\306\204\035\370\245?\330_`_%\005\267\277\255Z\262\014L{\221\277\331\324\206K\354J\234?\236N2)\261`\241\277\342o\356\302Wv\264?\206\360j\267\t\n\231\277\004\001\033\303\327V\243?0\371*\277\177\330w?\375n\367D\254\306\245?\\\226\036\353\234l\220\277\010_C\005!\343\232\277\313\362\223q^\017\260\277}\016\261\206\300\371\253?\376\237E\317\"a\276?\246\254>\343\251I\254\277O2 \177\235\204\245\277\236!!\301L\314\245?#\272+-\247j\263\277\366m\327F\364\226\272?_\347H\231\2558\246?\367\262 \362W\250\214?\230\214#\370\021\017s\277f\207\245-\230\344\262\277\265/\322N=<t\277)\261\201z\027!\205?3\3761\177\021\226\032?\260\276u\344c~\263?2\"K~\005\263\266?\310o\340\017\313B\260?\313\376c\211\320\250\233?\013\210\t\262\025\272\247\277WfaS\n\366\244?\304tU\336\354\311s?\236\320V\n\226\352\252?\020\021s\213\247\302\253?\013\210?\313v\2424\277\234c\3206\322\256\242\277\003EE\201\320\356\230\277\313\001n\366\233e\241\277\250X\266b\375\016\223?\241\006\371\331\377\335w?\343`\347\265#\373\221?Ffh1\225\265\212\277`,\316zPf\226\277\243\3670\362]\242\273\277;\246=\305k\201\204\277\252Nc\355+\315\220?\267\314\006\365\207y\245?\025\233\355\017\240\327\247?9\r\3338\"\313\236?\230c\306\001\360&\244?rm@\243\332t\215\277\t\324\023\376\273\331\261\277\356\244\222\277\353:o?\266\2632\356\270\356\224?\016\264\302t)y\227\2770|\002a\207v\244\277\370\231jYb\253\262?\373\371\020q\364\330\245?\222\020\005\013p\254\266?Zf\240\235p\031k\277\245\236\350(\200\362\227\277#\223\235M\344\032\256\277 \264\351>(n\246?\221\035\\wS\221e\277<\230\327\210\025\330\234?\261N}8\"T\244\277\"P1\315\022\217\224?\253\350Z\313y\237\230\277\340\336]\244\223\230\227?\024\322\343l\371\274F?\016jla)\206\204\277\365\302H\240J\376\273?\225\302\3773\264\326\263?]\302\341\313x\332\215\277\351b\0377Y\323\261?\334q}<\306\016\177\277\300G\273\006\213\250}?\345\375F\265\036\007\242?\377\3335\375\334\254\237\277\217\225:0|K\261\277\232\031w\003\341>\252\277\254\022a\020\207U\225?KM\353kUj\261\277\341%\365~\272\361\227?\257\335\345%\006h\263?}\374\307U+\340\243\277\0338\261*h\260\243?6\r\271\233:\221\251\277\377\337\r\200\223\266\206\277Jf\217,\334\304o?aZ?\210\373\204\251?_\031em\212\360\244?{]\030o\300\245\230?\005u\373\301\312k\257?\004\245\252j1\273\272?\345n\033X\247h\276?C\031\210\316,P\232?(\357\374\377\235\203\261?OF\342\3753\207y?\350\336\261a\0171\236\277\211+\216kE\372\227\277j(\306\226?8\215?k\353YyvY\276?\016\362\244\332M\245\260\277|H\354\340.W\256?\305$-z\237X\300\277\331\206\033\346\313%\216?G\020\304\350\212\034\261?7\362;\300\346\267\217\277\251A\273wZ\021\264?\362\034\227\027\342z\261\2776\026A\314\220x\256\277\200p\253\363\256\026\225\277mnQ\0003\370\255?s=\305\177\341\307\220?\322\352\347\341P\320\235\277T\212.\215\213\262\301?\344_\322\251\214\334\271\2771,\035\216\250y\204?\312U\331\"NW\246?Z%\315\'b\362\234\277\260\354\261~\372\332\260?\022-\351\004\010\243\202\277\'\372\350\025\255QF\27760-jLm}\277\027\021\347W\0370\270\277dD\312\253$h\250?\360a\360\275xO\216?Z\372\217O\316R\266?\222Qg\300\246D\254\277\323W[\024\204s\210\277\3230P{2\025\231\277\305L\002\373\332\007\224\277RZ[yE\340\234?J\255\213\317A5\223?\0003t\252@\377}?\005=2\320v\n\223\277\345\370\324\317\346\331\215\277:\302\025\244\251x\235?K@\362\320\222\027\240?\230\201? \020\334\246\277\325\207}i)\300\251?-Iq\347d\027\266?\016}\267@\233\312\254?\003\207G\030\354@\235\277\365!\240h\201e\265?\331\005\347\321X2\225\277@rv?\234\007r\277,MrSt\375\300\277\270l\177\244Y_\230?\352Y9yR\342\263\277\326\021\216\361DT\261\277/\024O_\263\232\257?=\370\014\020\341r\244?\336w\273sOb\265\277\\\222\256\373W\324\234\277*\245t\322\036\230\247\277\013:\2648\023\335\222?\323\006\370\007\315\330\265\277\322r\331\035I\225l?Y\214\377/8\224\300\277w\271/\001!\236\177?6\322\355\350\377\263\242\277\207w\266\366\n\212\262?f\351\033\226y\314\261\277\300\361\004&\275I\240?|\375]\276\342\331\251\277\021@\364\202\207bx\277:\276MZ\253V\247?\302\250\221]R\221\267\277\2212P\363S\253T\277\245.\326e|\350l?\302e\0340\346\222u\277a\356\371\2570\234\300\277\311\324\344\231\336\366\270\277\217-H\246;\216`?\346\025\207\355 c\253?5-\266r\234\013\251?\377\344\002\250\227I\262?\305\2762\341\213\026\253?\371!\027\031\314\277\230\277\206Gk\263\321R\267?\002\022l\367\017\224a\277\340\347S\267\346M\242\277k\005d\264\003\035\223\277X\314\231\352n\377\273?\376\3115\300]E\250\277\275k\027\327S\303R?\302\366cl\314\323\271\277_+\303\034\366\224\201?\305g\212\334qd\210\277\2244\000-\032\\\267\277J\351\006V2#\306\277\234\301\236\320k\232\274\277\302\310\002\243\007Aa\277\313y\300[\276V\244\277\325\200\025\214,\225\262\277]\230\030gaZ\267?\324\247\002\324:\024\235\277\n\373n\225\374\260\264\277N\3655\2466\211\227?\240\326hX\177\201\224?Bi\365\224\224\323\231\277\034\235\027z}\271Y?\025\306\222\304\037Y\216?\017\247o\\\0019\207?v\026\221:\024[\247?\337\210\034\256,}\201?\201\371?>H\241\246?wy\022\2056\206\273\277GU\311\364\216\243_\277\374\367\021\007\021\200\236?\n\271CO\302\362\225\277\300\307.\207.\026~\277^\033aq\360\217~\277\220\266\265T42\252\277\243\331\240S\335\262\221?x\323P\204\177\013`?\354\366\230\360\031\354\232\277\367\315\377\225\237\003\266\2777\366\215\225\316Wv?\201\262\336M\332\244\260?\220\\\365\036\350En\277\356\3426\323\213\202\251\277\246\302\373\316\006/\246?\316.\227~\237\030\245?:\304J\375m\303\247\277\214\213\030\022M\352\207\277\222\236\314\304W5\260\277\342\217\t\363D\343\246\277\201I?Vq\330\261?:\276\206\275\244\206\213?7\335-\330\321H\241?w\273\247\021\321\224\263?\300_\3354\3614\220?\"+\223\244\262\274\274?\027\022I\312M\230\226\277\234\204\342a$\337r\277\013\322\340\255\363_\224?%D\222?\'\252\247?.I\001+\007\246\271?Z8/\353s\311\247?\325\255\332H/vc?\2738\252=n\207\244\2779\343wT\"*\266?\334H\374I\252\\\241\277\006J\n-uJ_?\006#\312\304\254\013\243?#j\261\r\304/\210\277\227\330fbF%\271?\211\237P\3775\234\260\277>}\237\207\'\020\233?=X\2426\006\366\263\277\277\024\0338\311\037\300?\346\343{\230M\362\252?F\332\241\372\336\216\207?\234\367\027\014\222\252\246\277~*\326G\020\365\252\277R\350\\U\013\234\262?\204]\366i\035\322\230\277\333\2053\223\035^\200\277}\264^_5*\242?\346\217\226\214+\035\262\277q\271\261\200\306\350d\277K0\276\227n8\241?\370\376\024\263@\346\246?#\310\270[{\021\252\277\256\205\366Jvy\253\277y\205\364\317\026\274\254?+\205\022-(\265\207\277T\374\243\353\337\247\300?\306\266\264\t\353\t\306?\016\364\310\3112F\235\277\241C3\034\235\225\221?.\010\240q\257L\216\277\324\271\0200^\235\240?\013\250xw\241K\254?\262^\267\271L9\222?\240\003\322b\304H\236\277]\317\005\301\315\352\265?\373i\213\316p]\213\277\311\307&\2638\341\232\277\377\314z\005\304)\203\277u\366_n\252@\256?\"@\323>\0242$?<\325\363\216\270\206\220\277\375\235\212\341\014\017\275?[\t\356\366\343\340\247?\335\014\263}d\216\245?\243\236\226\036\215u\235?\341N\033\372=\376\222\277N\375\301\316\006\254\244\277\232\311\365\326%9\234\277/\277\325\331z\234\203?W`K\231\337K\263?y&5\223\314i\246\277\350\001\242{\352z\267?\347n1\340\001Q\246?\225\337\315\227\276\241\227?\t\207\214$\022S\240?\366\342n\374\236s\222\277\231\222\236b\023>g\277\212V\254\271\213\337\210\277\200_\327H@8\271\277qc3M\211\342\253?\353\242\350\004Dw\211\277\257\265&\272\257U\245?x\263\274~d\351\263?\203\2002\254mj\254\277m:\371\225\027\001\255\277\032m\353\350D\246\225?\276\202\014@\242\301\204?:]\255\237\315t\266?\304Q\352)kR\247\277\351H\335a\024\221\256\2778\3534\304B\256b\277\353\003\2008t\253\224?\313\313\200\331\237\\\207?8\263\223\262\351\372\247\277srM\373\036\247\254\277\232*`\327?\311\261\277,\350pc\361Tr?E`\300\215ZA\262?B\236\261\256\030\210\267\277\364\303\354\303\346)\270\277\314\226$S\237R\255\277\267\221x\265\222\260\267\277\222\001\274\304\2623\247?\307\246\320\036\030\340\260?\345Q\325\2556\020\242?\212\263\035\007\274\020\267?\263\221\351\201BN\311\277\300\363C\342\324+\261\277\375D\334d\241+\231\2776\217\370\215\004Z\264?\303\306\256?\225\200\220\277\000y[o\201\324\245?!h*#Hh\227\277\360C%O\022\211\256?\256\315m\201\214Y\217\277Qg`q_\351\261?j\243vd\304\235\252?_\356S?a\365\216?Nt\276;o]\202?\222\215\331\252\345\325\215\277\361c\t,F\\\271\277\3611d\024H\206\202?*\350\013\273bp\201?%\377e\374\355\323\207?\230\2614;k\220\241\277p\271\204\257\371\341\221?\204\"\037\224#\376\247?\031\211\202\303\374\322\270\277\260\344\331{jr\252\277\336\3369\023\020\321`?5\365\275\376{\301y?#\263\002*\323E\242?\016\327\022\330\356\263\260\277\315N\256^\360w\246?\2120\230\276\216\026\262?\322e\277\034\335\253\236?\205C\010(\220\3539\277\310\376\201b\2056q?W\331\344\264\344\014\224\277?t\372\364\343\245\225?\313\322\203\353\0259\246?\3214\340\301\273+\240\277\204\372\3463\250\332\300\277\275\373\352\025\211\364_\277\222\333\241\021O\260\226?\262g\220\343D\343\202?P\270\260^\002\001\260\277\277pb\364^\346\214\277eV}\000\223\241\223\277\200\325\017\243u\325\220?N\302\207\354\017\200\211?\215\270\rMH\243f?U\313.\350\304Y\266\277\tj\203\254\243]\265\277\315\224\271\342\0048\247\2772\003\232\001/\231\264\277;\275~\234\316,\242?\335E\332\203 \'\226\277\010\033\247\235\021:\235?\223\265\304Zu\222\257\277=])\373\343\222\232?AS\300\245Q\351\207\277\020\310\021\243%b\221?\371\367\365:\362\310\237\277\221$%\'Pw\270\277cx>\217;\257\217\277\361\302\221\003\345\n\261?\326!\274\225\304\317\224\277\027\035R\001\314\"\241?\337\300\243DN\253\273\277\250F\370\216\263X\247?t\r\rO\313\346\271?v!\000 \317=\244\277Q\326li\330\371z\277L 7\265\366\213\245?O\361t\301o\357\243\277&\2162\342@8\205\277t\314<B\020\303\220\277(\210v\237#\336\231\277\3746\013\314\255\214\177\277\000#/n[8\234?1R>#h\363\241\277\235\210\274-\320\002\251?\366z\374-\332\311\300\277\353U<\022\221\245\226\277^\314% \265\321^\277\253\212S\\\243>\241?j\006\315i\020\332\263?}\351\035gv\253\267?s\305\004=\030w\264\277\362\222)h\001\006\204\277\021\263\236(Hq\237?+\023\377M<E\244?\302\2064(\360\031\233?\307\243\230\254\313?\254?X\340J\267~\243\300\27713\031\016\274A\261\277\207>\037B\013\022\260?,\330\364`IK\253\277\244\235\277\305\262\340\233\277\031\010v\275GH\226?\314\265\005@ Is\277\364:\252\234$h\242\277\263\371x\254\216\020\261?\206\222\352v*\310B?@\361P\315\'\313\244\277lY\220\332R\330\246\277;O\237\373-\365\226\277\317~\236\033\036Y{?\252\310r\372\2650\226\277\332\003n\023q\032\262?\'Mh\032\266_\242\277##e\273O%\243\277\215W\244\024\201G\242?u\ne\t^\034\275?\242\234\010h\336)\221?C\'\032~\375\207\272?\345\302\232\365\354\001\256?U\270U\n\251\376\273\277\274\265KU\036\222\260?\t\321\312\020P\220\247?\267\340P\344\266\312\273?p\271\326\006\211\275\235\277\373u\301\233\213\262\240?3#\254F\313tD\277]\216\364\361&w\256?H\013a\331,\330\247?\335\350\205E/\020\243\277\037\316\261a\t\345\251?go\024\372\020\010\263?\230\306\221?\203\207\240\277K^b\031\304\356\250\277\255<\230\267\240\272\265?\335`E!w\007\230\277)\265,\203\261\356P?Mff\036\356\314\214\277{\036\210\343DX\305\277.p&\333\374\177\243?\363\343\017q\032\327\215\277v\317\205\243\357Jk\277\342\306\315\322\026>\300?4L\215\225\272\360\300\277\005\225\210\276j\023\223?\240\343\010\021\323E\250?\"P\257\324R\226h\277\246C\331\2122\017t?\014\357B\374\034\010\220\277\237N\023y\323\005\264\277p\313\370 \370z\251?&\2474\001\262\365\221\277\021\361\236\370KM\242?rm\362>\216ky?\026\'_\0172\024d?\234\177\017\323o\t\223?\302v\013\241\324\020\241?\312\177\035\370\010\272\262?\232\355\303\007i\006\232?\376?\200~\367\315\213\277\356\262$\022\377\357\202?\367\374\307\263\'\345\206\277\330\222\250N\3266\232?\270q?\236B\342\206\277\327\030\201 \206b\203?\223Pa\" \261\256?I\346\021F\'\372\260?\010i\325Y\214X\250?v\277X\205;\244\226?\303e$\221\256h\251? v\260V\233\036\303?[U\305~e\013\204?\333N\201\306\333\'\263?\236\033\352\033\212\265\302\277\371\010\003\375\271z\260\277\305\300\220\271\203\014\260\277m\020\361\212$\352o\277\340Fg\206\371\364\240\277\233nUg-\177\265\277\221\350\232\346:>\230?\364\213IF\241\027\223\277:\246\362W\230g\224?\227~\311+\321\177\220\277\206\272\322Dv\371\207?\317[l\367r\216\267?\345\351N\000A\226\232?\351\3202_-\364\245\277\200\200\035:\305\245t\277%S\247\370\202\354\252?\267y0r!_\231?\257]\241\374\310K|?r\224\020e\301\027z?\357#\322\332G,\233\277\031=)\212\260\277\236?\246\202o\257\002\003f?pW\273\357\227\007\261?a\0018nG\177\246?\206@o\346\251\310\221?\373\214b\020\306\352\270?\311\034j\275\005[\220\277\342,\3723\240m\241?Y\265M\251\333\211\264?\232?\010I\331\rd\277\352\300?\t\023\367\220\277\330\370\313\340H\246\270\277A\261K\201z\036\200?\266)\362\357g$\242?{\323\362JJ|\260\277\'\336\217T#t\265?\201\353&H\004\337_\277\305l\201I{\310\241?E@\205\225\020\032\274?\022\0362wR\246\261?\225bv\027\257\371\227\277\224x\274\351\001`\233?xl$\226\377\307\256\277\256\270\277w\304\203\257\277\247=y\355\257\234\252\277\230\022\2726\250S\242\2779\001\315\261#\203\251\277\004d\277\255|\315\245\277\r\356\024\333\332\227\213\27749\226-D\'\256?=\033\366\004\261\335/?g\331\3545\247 \255?\312\3104{/\375\240\277\340\010\244\225o7\261\277\020)\3322\016\366\263?9hQ.\246.\246?\322.\221z\007\311s?\363\276W {\215G\277\225\36649\234\n\224\277m\263\300-\0003\251\277\244#\340a\246i\177?J\201\262f\352\331\256?\2117n\356\2141\244\277\362\232zY\030~\266?M\r\010U\306\331\242\277R\002\3079~)\203\277(\316\370\023,P\260\277\335\'\225\007\207\\\244?\031\344l\213` \272\277\021\352\274\221\233\010\211\277\326\3612BU\037\255\277\013\025\207\3423\355\271?\347\375\230\361\3779\245?)\351\311zk\313\234\277B0}\020Tb\263?\021\234\246s\271\377\240?\214!\"\022\321\311\241\277\355#\233\362\347\030\270?\252\303\372]\264g\212\277&\366\230\210.]\267\277\326\325\327\001\344\267\274\277*c\026^\266\354\263?\177\004\352\242D{x\277\376\366\320\325\235\020\231\277\031\010\014\2623E\201?\033$+\326\036\205\300?\023\321n:9.\261\277U5K\3122a\261\277c\363\303H\256(\204\277\246\237\t-\356\372\275\277i yq\177\025\203\277\273\307\302\345\264\354\252\277\265\257\010V\352B\230\277U\307m\212\211\263\270\277\230L\366MQ\300~?\223\232Ie\324[q\277\326\007mP}1\235?`\354\376F\030a\272?\217S/\035Z\356\255\277x\177\272\236\353\014\233\277\205\260\251\335P\352\255\2772hl\223r\000\246\277sF\215X!\303\266?\374\340QR|\251\243\277T\254\302j\222\317\240\277q\305\210D\177\324l?&\rEw\246Y\262?\313\273U%H\342\262\2779\3503\202\315\t\253\277h}2\021\311\033\266?3p\n\324~\301\242\277\275\223\343\031],\216?\005375E\375\271\277\222\010\024\261\305\204\\\277\325D\353\307E\254\231\277\243K/\337 \202\220\2774\343=e\201\354\236\277\313\035\320\232\221Q\272?K\303\271>\301\250\227?\000\005bK\007\235\262?\033\256\204\027\212\r\222\277*\307F9f\010\274?&\244\214\017\247\337\246?\014\020]7\371\366\254?\346H\330\262Fq\207?g\267\317\022\207\240\247\277\223\353ac\212rs\277\331\234z\261Se\263?\220\356\326\334\017)\232?\023\232M\243\316\251q\277n\356E\263\271\225\221?P\010\301\365EH\241?\245\273\320\220-K\242\277\002\\Jr\355\350\273\277\360c\022\032\315\'\207\277X\343M\006\301\246\255?\365\371\200\306\034\272\301?\366*\216Z\316e\230\277\214c\'\233\361\261v\277\337\220\230\317#<\237?\244A\374\316\203da\277\t?\034\343\007\265\242\277\241\277Z-9\034\227?b\310:\333JG\222?\267`\307d\356\033s?\364\034\304\355a7x\277\241\351\342\231/\354\224?\020@w\004\220c\240?\\\242\t\345\266u\234?)rU4&h\262?\300\177GW\260\366\243?\343%\337\346\231/\241\277\251\035\366\020\022T\263\277X\002z\224\264\250\261?\343mB\310\307]\270?B\213\325\222M\006\247\277\245BO\000 K\265?\225\371\320\214\317\005\260\277\004Gma\340\005\272?\265\000\337\003z\353]\277\254\345H\377\226/r\2770Oq\2214V\256?T\033\231\371\265\351\260?X\237\367\257\262\365\205?\252m\201\333Oi\270\277\344\205Fk\2061\236\277\032\020\311\266\361\321\263\277\225\336f\305|\321\277?P\354\031\304\243\201\206?kJB\037\327\001\254\277\202\031\210\035\366\323r?\037\357\336f\253\240p?\370zI\273\267\010\245?\021g\307ya$\266\277\022\020\206\033\013G\244\277\315\220@\335\326\317\216\277\3362#P\334S\257\277T\006\330\331wD\231\277\037\263\000h\033\203\241?\265\325\307|\203\265\225?b\307#\327\0027\264?\010\230U\374!?\263\277\221\376O\205r\201\253\277\265\030\324\n\302K\275\277t\t\244A{r\237\277\233\232{6\237~\244?5\2206\360x{\241\277\377p[[&K\302?l]*\351\206M\203\277\222\2728\366\353,\260\277\362}J\363\204\371\221?\3506h\273\374\034y?\002}Qk\2129\245?\177\260R\020\374\306\234?z}dC\327M\261?+O\251\330Z\021\230\277\346.\036s\366\356\241\277\301\376\022Fo\252\250?\014\243\'g\306\363\251?\031\031,nq\t\274\277\257\355\320\374\262\253\231?\331lsL\317\222\275?\2501n^\276&\237\277(R\nsR\n\235\277\307@v&\216\"\256?o\224\273\254\214\255\305\277z\235\335\255k\226\230\277\261\010\372\361\255\221\226\277\301\271\254tr\235\256?\3335\201\366\213n\272?\301X\237\332\255d\246?\247\025\302V\nz\223\277\210(\277\037\223\226\211?v\243\232rM,\246?\323Y\301\243\210\232\213\277)!YJ5\013\256\277\005\020\003\377\351j\265?r9\257\370\034\346S\277Ol}6\232\216\223\277v+z\200\256\215\261?bV\021B\374\331\252?\371\r\366Xd\232\257?N\312\337\003:\177\206?\025<sG\262I\267?o\251=\253\330\263o\277\317R\316}!r\272\277)\233^7\177\233\220?Vu\000_\320Q\257?\256\000\224@9U\260\277\372\253\271/L\215\204\277.\321R\371\005Sq?l\324U\357t\236\230?T\371\365=\355\306V?\266\006.j\000$\261\277\262-\373\240\253\317\234?a\347)\300\021\035\266\277\224\240\251\217\230\016\244?\373\345\255#J\310\225?d\343\024\005t\210\251?GUd\0021\257\243?\325\215Y\036\026\377\221\277h\0106\364m\021\223?\203\373\263\376 \266\205?jM\252\376\001\316\270?\004o\255\302\260\360i?\226r\365\314\206\027z?5F\311\300\302\246c\277/y\3477\227\355\247?\031\317\365\234\210lq\277u[\227*\2231\251?\252T]l\366\356\223?\340\216\320\177Y\020\257?\222,\322\255\301Y\177?\202\tC\227\031J\263?(\240\006\337\202\337\243?\300j\357O\\b\262?x\007\237\362z\241\205?\027\232h\307D\376\247?\361l\332\361\374/\260\277\337w\301L8\177\226?8\343\334c/\220V?s~\r(\232@\253?o\021\310*G\265\213?\032e\225|}T\256\277nP\230\024#f\256\277\350\317\023\227\343iu\277ZW\014\rHy\264\277\261\374\226\301\001\356\263\277\347\307\272X\261Y\261?\315\311\255\223\000\272\255?\222\221\024\363lm\260\277\230\244>5\024n\262\277\236\r\030\332\000\214\243?\250\231\213\267\232]\205\277\213\374\271F\201\244\253\277\300\207\355\3213\236\221?\212\027x \207E\230\277\376\200\324\306\016Q\254?\265 \n\030f\177\301?\300\033\013\rrz\252\277\240\341|\022\326\321\220\277^\004\257\251\250\235\266\2774\303R\320\2319w?\366\256\005\330\365\344\245\277q\0312x\r\026}\277\212.\325\304\222 \261?e\262o\272\t\227H?\255\273v\020Ij\247\277\326\324\2470\253&\270\277Ix$\013\313\267\253?oT\363\253\262\260\212?\026\336\241\027\003\216\231?;\225\246\327W\311\241\277\332\261\212\201\201s\236\277\272[\030\300\000\020\250?Is\250\226\365\032\177\277\315J&\034T0\233?\027\2330\3268\306\245?\200\310A\036A\215\210\277\342{\363\013\032I\264?T6\370\271_\325\233\277K#\014\215\211H|?\343S8[54\265?\340\235\001\331\314\022\273?o\243\251\324\211\350\220?\275\020_DZ\320\303?\330[s\301\017\017\243?\034]\377^\347d\230?\022\026\313[\342\345\221?\001\267\235\251\276\270~\277\372wt\325o\233\202\277(\021\020\3613\315\225\277\357\000\200S\006Q\204?q\201HN\201\001\214?-\270o8Z\254\240?\325\353~\022\353\301|?d\031\030\002\341\303\204\277g\034\216Q>\000f\277`a\340\344?\225@\277XGE\332\t\211\220?\273\370\265\035O\001\261?\357\214\177g\240\264\201?+\004\356\306\202\370\262\277kx\014\317\303u\265?\304\3749(\013u\223\277\214\357\275\230\007\277t?T3\277%\250\017\253?;_g\"v\325a?\200\307\307\3572\371\246?*\010\337\025(\254\254\277\034\255;y\304\274\242?&V\032V\304i\264?n\311\246q\331\207R?>\203yn\210?\232?\304qi\0251v\243?;\007\360\271\256J\221\277\031\341;\270\276u\267\277\323\266\346\014*H\253\277\265Y2q\300\214\262?\320+\'\226O\333\237\277S\\,x\300\273r\277#K*C\206\007\243?\216\030\266\026\332\010\256\277\316\351\220\2114V\233\277\377H\236\303-o\245\277M\371\314E\2469\220?c\026g|KX\260\277\276Y\365\272\317\366\216?A\360\254\235\352\350\210?\214\206\224A}\255\213?v\354\250\244|5\220\277\275\267W\000\035Q\243\277eY\346F\243\010\246\277\023\343\331Z\302b\260\277\260X+\376B4\215\277\023\337\030\333\375fk\277.\310\365\373\025\204\274\277W?\030!\235N\203\277\013\355c\030\320\330\220\277m\3447\342&\347\252?\205w\032]\271\306\262\277~\276\326\363\237\361\213\277m\326\220\257J\262\260?N\262A\325\317}\222?1n7I\205\253\230\277\237\327 \226\010\347\266\277\371\261\321\014I\312u\2771\212`\3272gn?A\273\325\274O.\261\277\275\361\205\203.+\247\277\275b\354\331\354l\263\277K7#\031\365\234\204\277q\261\345Gk\265\266?\242u\007>M\025\254?\230\222\345\252\003\206\257\277\276\334[\254\367\306\260?\304\262l\311]\n\201\277p\253&F\035\"\267??E\3040\265#\202?q\356C\037\014\266\217\2773\005\331\230\\\346\260\277J6V\202\370\022~\277:\374\374\206\266m\264\277\253\314\221\375E\343\274?\023\360\256\")\"\251\277\006\216\343\263\313\372j\277pu\000\206\344\206\227?\352z\344\021\371\003\233\277\355\235\206b\315\227\232\277\231J\232\266\304\030\247\277\270\316\257\367]s\267\2773\215\'\263s\r\254\277\rh\021u\215E\233?\204Uw\025H\037\210\277\313\220\373\264\020.\272\277\320\324`8\205\347\221?`\261}\241\254\346\232?TU\260\370\022;\244\277\221\2548J\212\354\250?\371\302\223\002\276\314\241?\317\300\007Z \277\242\277\225k70Mo\257\277g\016\347\353\327\370\252\277+\345x\030\177r{?<\\\242|#\304\310\277\366\003b\374&dq?\264.\367\002\333\026\255?T\027\346\345\254\027\256?\307s+\210\3467\255\277l\005w\\_\026\240\277 \272\335\020\257\366\260\277\200)i\333\003%\217\277o!n\002\255o\241?\2416\363\332eC\251\277OA\344Y\010\277\270\277\235\346y\370\270\231\220\2778\033\267@\216\027\246?P\235\305L\311\323\240\277\254\025\377\353\360?\265\277\201j\216\253\353\231\240?\206\007\342\257\262\321\262\277\340@P{\376r\261\277=\260\337\360+\301\242?\254\332\260\224\207\301\307\277\234\025\r\022\344w\275\277\352v\325&\"kp\277\263\256\375\220\370\356\257?\265\252\244\345\023W\210?\'\264yZQ\263\264?\302[\212\373n\363\252\277\374\2270\201D\203\251\277|P8z\325f\251\277\213\035\316\252\363\\\206?\272$\337\325\001\316\253?\031S\220\203\017\344\241\277&\010\013P3\315\207?\207\210\245\305\353\224\251?n\022}s\231)H?g\035\310\2311\252\255?\001\225/\226\366\316\243?Pm\250\'\302r\241?\325Oc\303gB\264\277\362\224\227G\207dz\277\337\376\003\223\361#\276?\203\026\243\342y\330\202\277$\300,>\212\375\303\277\240c\303\273\243\033\262\277\323\346\211\001\317a|\277\024\375GPb\256\244\277\324v\350\317\315a\236\277\"\266\032 Z\250\227\277m\334\301\037*i\236\277\352P\317\304L\333\300?\353\233*\304\332\271\211\277p\312\206\264\375\002\264\277\340j0\215\315\365\234?\3431\001\2532\261\225\277M|\367\037\247*\266?\265G<\300H\231\241\277\001\3045w\300\003\250?n\254/\271 \352\244?F,\337\300\0258\263\277\333\270\266\275!e\234?\213\270\264\033\177m\270?\277oYU}\205s?d\204\007\021\034H\261?55\220\217\276\345\214\277\020\227\262\242*\266\245?\203\3518\235\351|\210\277\272\204\357\263\004\373\267?Z\250\036\014\353L\260\277\257\333\312X\334\234\263?\336\220\262\234\304>\220\277\211Po\325\t\335\242?M\224\351\312\013\006v\277\261\330\337\231E\210\247?\022V{\034\302\370\207\277[\037Z\260\371\007\263\277\220\204+\350\320\250\274\277\0352T;\253\241Q\277\210i\353\256\001|\212\277:\236m\217q\201\254\277\244\207D\021\331\304\263?\207\300!^\371\350\253?\311\217\244\233Z\022\252?\027\n\251I\343\\\275?\007\006\021^e\235\266\277|\204I\335\202\034\254?\306\357\324K\243\231|?\264=\333\245\021\332\230\277\177\334\211\226\320K\256\277:,\236\326u\264\261?(y\340\361\0047\227?O\233\2547\022\214V?\350\354\303\352\313\023\255?\227(\363[\322M\257?\255\253\241hR\355\233\277}R\231\306v\274\244\277\214\200\272\330bS\241\277P\2036\364;Yz?\251\253U\373MH\244?\231f\037\352t\373\266\277\017Z\245\224q\345\244\277~\352\357\373A[\276\277Yk\326r\205\234\232\277\326\227\305\305\241\022\257?\236\330\331\260\003\225\255?\276S\"ap\316\245?\375\333&\366\252\224\257\277\212\2502\236;sE?\331?\342\031\221N\255?\220\004E\225\373\307u\277B\261Z\251Q\201\234\277\206\254\211\010\006\327\262\277\242\371n\2065PB?Xy} \374\330\236?\202\371t9\220n\274?\343\254\250[\202H\223?\364\310a\240\212\213\267?\227\007\204|\025J\274\277\260\215\337\014\025\377\251?\211\311\2659\261\363G\277\347X\372u\333r\212\277\203FI\326a\020v\277\334\000\300\377\016\343p\277Rm\351O;\023\250?\321T\322=A\234\272\277\230\342m\231~\254\270?>\016\033\t0\005\267\277\216\370#\\\334\263\262?~\355P\223g!\232\277j=\223\tG\370Y\277\356t\247?\226L\222\277\331\257\262\323\365\033\267\277\300\315\000\221\274W\273\2775\021\263\350\026\326\256?\261\243_\345\002d\224?\270\3053\254\035\360Y?\345{Y\270n\"\245\277\252\004L\037o*\257\277\224\340=X~Uz\277p\005\271\362\375b\233\277\354G0\304\014\r\275?\230\006\323~BH\271?:\001\025\255\244Q\223\277g\204\262\305\317m\300?R\215qRM\302\267\277u\220grDd\240\277\261\007\311\340\001\370\206\277\003\250 \207\223\244\205?\366\271\360C\177\372\242\277H\261\226\325\246I\213\277\216\336\320\375\000\344\261?NW\342|\311\211\206\277\007x\016\277\031g\265?\n\203\2468\3744\233?\335\252\025\361\266a\206\277\366\017\371o`m\232\277#~\n\033?\376~?~\262P*\247\335\244?\320\025\310: 6\205\277\332n?\344\275\303\234?\206\335\210O\306\002\231\277\305\227*\275\234\364\261?\230\371\3104.x\245\277\310J.\372\277Z\240?.Z\270X\301\356\256\277W\260K\262/\323\233\277Ws\352k\017\014\225\277K\250\277vU\250\224\277\227\343&u$Mi\277\\\302\204\364+\247z?\300\027\274Pw\331[\277\340\320\300\322\266\341\243\277%r\322\342&/\221?\333i\301\003\032\217\266?\006\006\013\3274\014\256\277\372\215u\333\201\364\240\277_\002\256\312\273\225\266\277\300\025\233\311;D\236?\261\\\374\020\204\253\254\277\010\"\373\374\225\331\225?\274H\2333\001\257t?\013\262\030Q\211\205\257\277\006d<5\014\016\251\277\344\277\\D\006<\260?\'9>\032\215U\243\277\322\334\226_\364\032\250?H\314\016.3\352\256?\243#A\342T\327\300\277\2772R\026Db\261?\265\013\214\255\231J\213?1\240o\327\224\274\260?F+PuG\261\267\277<\247\016\203\210F\247?\024zu\331\251r|?vQ\002;{\r\232?\010\367x\375wC\253\277G\266gS\005\227\245\277eq\200\224\306\204\224\277\264\236\241#g\241P?\005Q\r\031\331\311\270?\001\351\273F\366<\263?\327\341\266>\277\304\273\277\272\374\244\3335u\273\277\361\275\351c\277\377\230?\326\306\252K\220\306\240?\206\030F7\t\027z?\364c\334O\010\007\262?!-\346\37377\260?\274Oq\2512\013\206\277\273kJhXN\244?\313\365g\007\374\354\212\277\002(k\236\247U\244?\324\330l\354\357\365\244?-d\257\214ta\255\277\333\212^\305>\033\224?P\357\rBm\236\256?\203\351\341\027\373\225\257\277\3056K\220\314\337\266\2778\032\237\3662\270\230\277\362\351p\n\357\245\266??\223\330g\206\000\215?\340\'&y\240\272\242?/\031Q9\030\256\235?a\347\035LO\327\246\277\344\321vMEz\264?\233\310\270]\336_\253?\335\207\323\273\202\253\266?\024\004:\377\223M\261\277\354\n\006\016kd\231?\002\374}\222X\017^\277\n\327rM\036^G?M\334<\025\305\031\247\277\233\375\332+\267]\252\277j7$ b\247\232?\201\273X\327\232\325\206?\004\230\267\210/\036\221?\343d\372*L\r\267?R\273\200\374\362;\276\277\333\317\234!\342y\200?\220\315\225t\027\365\240?H\035K`\014\246\\\277:S\372\255\270H\241\277H\336\005\022\346k\243?\356\252wB,\231\236?b\203z\244\014\207\232?2\275$\232\344\253q?\306\357t\376\302D[?\234f\217\304P\030\267\277\355j9\315\2057\240\277\010E\251\304r\215\213?\227]\0076\r\226\236?\024\000`\223Ha\262\277\016X\n\3519\306\247\277\276\320\235\270i;\263\277\220J\236G\240\256\262?.\n)2\344r\255\277\245\350\262\313\036\'\267?\"\264\025W\020\027\227?\177\234\372\016<G\267\277\203\371o\251\232\371\222\277\326\244\034y\262\021\250\277\036\273\273W\204\"\221?8^D\257c\372\222\277\2246\014\006da\254?r\266\216q\330J\216?#\276\361P2\360\210?\254y7\\@\312\300?\253\265\325\3350\254\251?\344<\212Bq\225r\277\244\351\247\347\260>\267?\211k\246\316\337\to?\322\026\005\2578\211e?\324\266\326\010T\020\227?\027=\271\005u\021\257?-\365T \241\230\203?\"\230\346\324\205\352]?\262\212j\003\022\027\254\277\370\264Pz(\026\235?Ym7\343]w\265?\033\014\021>i\203\202\277\374\013\236\316\251.\230?\320\026\000q\343\321\273?\347\354\343\034tF\240\277\336\212&\320Ut\247\277\207\030\263+<\350\266?\020 c|\353\325\203\277)\302W\201\335t\243?\225\0026\234\321>\236?\363g\177\267\022F\262\277\247\333Q\2675.\223?p\367\252j\201\370\205?~\004\243T$]\230?\331\026\371Hc\\\242\2774\037\331\361\243\306\201\277h\320\031\034\257\341\264?U\353D\n\377\032\226\277\276_5\227\301L\237?X)x\276^g\274\277\032\324\344U\377\304a\277l\357\304g\212=\217\277\000y4t\363\001\254\277\031\210\323\213\301L\271\277\277\325\304\245-_\242\277\214\261gH\311\254\223\277\3058\317$\0262\243\277-J|\027\352\224\257?I\222\"\370\210\216\221?6\257\002j\226\244\205?\036\211\311Tko\213?6\223\315\210\302\022\246?\302e\367\322\202m\260?>&\242\334\226\340\242\277\322\006\017\206\234O\203\277Q\242R7\250\360\270?\261\000}\321-\216\271\277w\023\310n\330.\232?zZ\020)\250\262\247?\230\222\033\211\036\374\243\277\337{{\371\343\277\236?\227H[\246\3466\270\277B\237\324\2148\007\226?G\200\276~2\300\256?#\311\002y\257\005\250\2770\321<\256\216\260\304?5\355#\031\264\n\257?\363Y\224,z\023\267\277\337;\0319\255\377\263\277|\n\325\232\212\351\216\277\225\034\361\317dm\252\277\371\031\253BW@\241\277N\272e>FGI\277\225\246`\241\257\352\231\277\204\255\244\232\330\324\210?\003\275[]\035F\231\277Z\210\347.\372z\251\277\031\355\303C\250a\267?\236\310\232\000\217\206\224\277\212\235\177x\310:\227?yU\311\315\230v\257?1\240^\361\177+r\277n\327\263\3759&\252\277\n<w>\225\323\263?K\351\266A\271=\201\277+\001\356gP6\253\277V\264\3113>p\242?r\254e\340\310\374\260?pI\371\206\367\206\262\277vH\261\255\352\'\253\277\255\335\302\000\255\r\226\277B\005\374\343<\266\221?\332\337V\021\367\373\250?\261\304\317>\264b\216?\206\3549!\023\273\245\277\307\317:\353\343g\261?i\275\r\017o\263\266\277s\020I\002\366\270\271\277W\223\365\254\206\177\244\277\021\267\n\213H\360\251?\001*,\023\361\205\222\277$#Cf\230e\272\277b\036\345\233\354\351\244?]\245\251\353\277\323\226?\301\313oo\371v\261?\211c|0\232\312\233?\204f\353\210\377\000\232\277\217\322\335l\216N\230?\325\200\374\217h5\253\277n-,\206\302\337\265\277Z\'\032\240:Y\273\277\200h+h}b\256\277\261\315\275\225\327@\250\277\236|G\027\261\201\232?z\257\222\311\023x\261\277\007\324\346R\300\215\213\277\247?s(\362\242\264\2775RRndV\261?\265\314\243\260V\006\256?f.\224b\323\240\242?E\362\260\317\\X\245\277\t\301\201\202,\232\270?\324\300\372=\007c\261?\t\'K\256\242\246\210?4\367\'n\357Y\240?_.\3770\254\250\275?lUS\304!2\240?\035\211}\260\217\376\224\277\234\241\022+\010\312\264\277\276\363\030\206\255W\264\277\337\244\254\275\027w\273?Y\367\211\363\2175\244?\025,\237\2756\237\221?\376\272Y\013\004\332\246?[\242\027\214$\234\200?\357+\367D\372\n\242?%g:\235\021\025\260\277w\272m;\020\216\177\277X9\265\325\365\316\263\277\3775\256)\022\276\261\277\204O\321 \353\220\233\277)\rB\032\031\253\253\277\220\331\343uY\274\227?\331\220\372V6/\254?gM1R\234P\274?\335\020\244\212&\350\220\277\223\\\206\t\217\022\223\277\377?\t<\234\331\220?\220wO9n\r\203\277\316\307E`\026\267\271?\201\314B\267$\014\251\277\t\203{\320\224v\214?\346\006\rK\244\013\237\277\304+\226\261\217\001\207\277\270\034\270\275Q\003w\277\250]\024d|9\262?\267\224\216G\261\222\201?\267\320\255\201\013\334\261\277:\330\362Lfh\262\277L#}\r\271\210~\277\371\022\364\314\010\354\240\277\371\320\360\234)\355\236\277>s\274]\356\021\255?\2727\377\017\360\223\212\277\250\232\024\212+#\254?\0320\022\315Ul\266\277\316\325\003\0022(\300?c\214f\300\0328\251?0:\254@\315i\232?m\307S\213\005_\215?\310\"\220\003dY\241?\3236\200\246\256\232\230?N.\213\263<\220\224?\223\315c\262p\364\242\277\025BQ\353j\340V\277\316\205\354\356\027\003\302?\342\352a\0029 \233?\360\233\236\022\336Ld?,8\335/\023\031\205\277\256PI\2422I\222?\224m\032\203\346M\236?\340\213\345 C6\252\277=\242W%\275w\272\277\007=\007|Q7\223\277\305\214\362\315I~|?xK\210Yc\006\265?\364\247\345\200|1\202\277\217\367\027\213\037H\216?\334\036t-Yk\245\277\350,\375\305\307\035\210?`)|\311)\032!\277L\211\355\337\232\016\211\277\203\021RF\347~{\277\304\013\030\327a6\210\277E\364pk!\252\250?s\252\021W\233X\261?\257m\365\036a-\250?\227yC\277j>\250?\272P\017\222\r\006\235?\373i\377\212\332\233i\277\241(U\215:j\233\277\225x\343MD\326R\277\242[\030\261\r\267\247?\301`H7c\356\272?C9\034\335\250\344\274?\355\314\273Yn\230\202\277\204\336&oj\025\252\277\222\242\271\270\347U\243?\327\301!\225\016\033u\277\274\"\340\217A\225\246\277\330\234M2}\367\260?\256\352\262\325\247\200\201\277-\020\231\007\357Y\264?!]\322+\364\215w\277C\242\257k!u\231\277\021\201I[\256\271\223\277\203\216\3678x\016\225?!Q/\204\3334\225?\304\270\362\235p\376\250\277\004\215l\217\003|\270?\351\211\302\261\313B\247\277\200\230\006\254\336V\217?\177\337\317;\212\366s?\377\365/\016\"\000\202\277\036\257\006 \211\336\223\277\356\237\342\364\255\226\262?\270\260\005v>\036\233?f@\001\240*\3276?\2273\336\313K~\215?\275\"\200\256\266W\254?O<9\357\306\325\207\277\307Y\235\223\356r\235?\t\316%\342\317\262\215?\374\036\250\243\261\031{?\036\267 xoP\216?x\'\325\324$E\265\277\276\000\007\330ua\252?\2167\2544\357e\261?\360C\347:2E\271?I\314\007EM\343\265?}\356m~\307\365\226\277\220\327\377l\327\363\221?\217\336\002h\336w\247\277\251\336u\231\314\355\222\277%X\315\362\334\034\204?\326s*\332\365&\271\277\270\244El\356\254\253\277{k!\262)0\301?3P\3215\245u\220?\332\331\334\r\236\021\241?\017\313\242\254\325\317\\?\214N\026\253_\335\221?\226 \237\032\341\n\260?\261\331\232q\207\033\265?\225\023\3227<t\245?,\033\016\323\346j\242\277\301|(\315\037\0355?\220\344\316\354\274o\260\277\263\364\335\307wq\224\277F=Y\336\361\021\215\277f\256S(\364I\227?\006\273\024\303\207\265~\277\3429=\334\351\371\217\277YV\213\004=\375t\277\361\323\335\323\217\323\224?\026\270)\255\336\355\225?H\033\277\342n3\263?\007G\203\321\354\373\233?8\365a\002\270\270\200?\266\275\224!_W\264\27709\350\223\265\021\221\2771n\023\337\016+\302\277\037M\351\010\211\301\261\277\337\322c\227\307\233l\277\001\312\262\222\036C\273?\313\377\370i\373\324\257\277Cg\036g{\314\266\277\310V\201\005\330\334\242?@\224+\273\342\227{?d\220\366\\R\277\221\277\"f9r\274\030\257?\010m\341e\005\345\254\277Rq\374\322R\340\265\277Z\016\226\027\247\366\257\277\201\260\277A\324\275c?\264\002\265\276\334\255\225?\234nZJ\177+e?\201WOv\274B\243?\265*\\*;U\252?\340LfFSn}\277\317\344\256\242L\241N\277=\3333\003\210\023\231?\334 f\'\355\361\213?\361\004=2\022\266\240\277|$\316R\375uz\277\265\375\206EN\363\264?`;`&\211\211{\277?SX\271\377+e?\2304Kc\'\360\251\277\010\254\033m\2768\233?\252\314\221Y\246s\207\277\242\247\204Da\226\273?\267\027\246MY\315\230\277\274R\253M|N\231?\333\324\367\013\257\035o\277W\220vI\330\262\250?\371\317\355\302\0241\223?=\247w\374\366\207\253?a\2001r\364M\204?\031,\007\224\312\322\236?;\21669\003\246\213?\246\375T\365\">\261?@I\376y\251H\276?u\026\266\006\220\263\261?\\C\331\267V\023\206\277i\375\240-~B\255\277\303J\263\023\353\225\257\277\t\037Y\347\320;\034\277\301)\234\340\341\242\224?\204\306\024}D\340\262?m\205&w\345\016\215\277\215\217\342*v\037\264\277\271f\272\0228,\177?\221\227\037A\332Y\255?\341\264ma\234p\226?\332k\036\361\355\272\260\277\247SIs\362\314\211?\306\330E\344,\032\275\277\226D\262\2506\325p?\353\227\265\341\020\335\252\277\316\360}D\325\256\261?\240\204J\244m\ru\277uA\220\340\354\333\267?$\302h\341\277\213\206\277\321\344\204B\010\212\247?R\302wg\261\032\261?\325l\256\364q\352\250\277\nN\t5Q\350\252?\017\263\227t\323\213\244?\265\272)\330B)\230\277\004\372\344\0376*g\277\372\331\371\353\327\242\220\277\270\340\017\271\250\014\216?^_\302}z\240i?\376p\214\240i\303\232?\350\364\362\373\262\002\274?K\263Xu\337\210\207?+\210GnO\257\255?zOw\214<\223\251?%\242\3200\376\247\234\277\n\336Dj\315\310\264\277~\t\022\007\036M\203?u\225\273\376\212\211\220\277\3115[\361H(\205?\261\"\210jU;\235?6\225_\313]\235\310\277\270\334\336\363\242r\205?\306\001\346T\372\364\227?Zt\303\365ju\276\277U4\235I\264\300\233?m\036\244\004PZ\235\277\362\350\346\325\n|\263\277`\005y\313\010\332\223\277\025\177\021S&\004\210?,#\005\000\024\327\263?6\307\267\212\032K\265?\215\213NG~\017\303\277\000\274\273\244\231\257\242?E\262;\314\035DR?<\271\'\341\202\231\241?\365\230\nW\371\372\225?8v2\305\316r\266?\354z\371\330F\212\253?\344\240#\021\266\365\243?\2266,\254\370s\257?\022\217k\246\207\202\232\277\306\222\326\356\'\222\263\277`\245\304\217R\027\223\277^D\232\200Ye\253?\367\356\014\302\025/\245\277\316\356\037gy\233\221\277\246\231\362\247WU\300?\231\232\026\373~\020`?\323\317\327\003\036\021\211\277\t\324 \353\320\256\234?\013\001\373\204,h\211?=\2127Y\377\272\204?p5\001\241\234\233\236\277;\306\304\374\266\277\202\277\267\251\032\254}\203\262?9wb\200W\240\272\2779N\201\372\257\202\262?\376 \361\325=g\257?\303\356`9\236|\241\277\337\n\332\225\365\006\230\277\346\275\275K\360\213\277\277\016\245&\031\016A\265?\002\010\302@~\321\260\277.K\013\034=\343\231\277\031a\265\257\302\030\243\277Lg\237\'1\t\243?\031H\362?(\250\262\277=\347\202\310\r\305\244?\312;\276\304,\222\266?g\3037\255\223~\230\277r\345;\241\017\211\265\277\214\306N2\256f\234?\276\033E\365 p\223?\336\265\016\243~\274\257\2779{\316\372I\254\200?\025\002\027\336\347\246\231\277\302,\026\350\331h`?_\315{\366\337\372\215?m\305\316\020c\025\216?\245\004T:V\024\237\277\216\254\220\007OJ\243?M\205\245\211\252O\234\277k\235(\306\340\276\253?qu\211\031\221\231\232\277\340\222z\274\007\213\231\277_\016\367\341\233P\220\277\3526\232rn\225\255\277\251:\016\304\021\257\237?\365\034g|\007\257\254\277e\020\327:*\006\202\277\035\376\331\000C\037\253\277\225 \264 E\332\270\277\322p[\025\033,\221?\311\235\336\233\r\226\220?\256~\35280m\273?\246\236o\207\366\212\241\277D\274\344\027\327\241\243?\316\005=\2428\006\262\277|\237s\343C\241\222?\354\320k\356)?\247\277\213\030:\275\370|\243?\216tP\315R\276\222?\346\351a\244\003\210\254\277b\3725],%\216?\270\224?\365\341\354\237\277\036\262\342\211{U\256\277\3504Ih\013\227\261\277)\317\206\355\327\371\236\277\201YR\024\321\221\250?7\"\276\225\tQ\225\277\031\364\002[/\305\265?\3432\356\357\356\216\247?\234\251\301VG@\202?\"\272\251\235\242\005\222\277\360\310\023\204q\323\252\277\nX\357\373B \266?\021\267H\027\242Y\262?\325\016\337|\376 \241?\000v\010\017\375\372\203?`i\3700k\210\246?\364N\334R\340p\203\277\017\352l\215j\r\251?\220\331\3274[\036\272?3\240K\365X}\234?D;\340^\031{\244?f\343L\252\335\226\227?q\353K3\016\360\231\277\233\263\242O;\211\230\277*\215\314\335\227\225\241\277\320\037I\350\265}\242?:2\2179\024j\220\277\277\231\304\354_\323\242\277K\364\232\322\207\016\261?\303~\270\367.\245\244\277\231d\265\324t*\225?\315}Yxi\247\263?\035\314Q\305\246\244\270\277\330\031\321A\221\370\265?m\007)\301\253m\230?\336\277L\201~\031\254?\365\211\216\223\321d\226?\016\361#\321P\004L\2773?\350&A\000\202\277\223.\230\r\353\350\210?\327s\267\204\235\217\261?\224Ju\242\224\347\252?\335h\3146\352f\216?\210@\030O:\333\241\277\2511\320\253\031\217y\277V\032\335\305B\006\243?c\327a\312\324o\243\277{,\031\221)\241\242?i3\274\005\004\307\241?\'\2206\003xv\216\277#3\226\273\0163\216?3\000ImZO\222?B\323_?8\022\260?($c\27250~\277\247\373Lw\003Xc\277\247\312\227\224t+\223?\323\335\3516i\363\204\277>}`\227\265\'\256?q\363.\2412\030\261\277\204\301\337\216:\353\266?\234\312\372\334d q?\231W}A*\373\252\277\235\377=\367/\321\244\277\370\276\024\313\203\276\250\277;\025y\001\320\357\276\277\257\303\374\354p\376\240?\n\007M\256\025bw\277\217N\241=\035\260Y?\335\366d\367\273t\243\277\306\336WMn\317Q?CC6A+\214\262\277\323\341w0\037&\265\277G\345n\0341\037\244?59\035\231\3364\271\2773w\267\323\014{\241?P\214a\221U\335}?x \230\370=-\244?\303\335r1\357\342\250?\350hX\377<\353\237\277N?\270\n\301\252\246\277\023/\347\242\021~\245\277\371v]\376}\242\236\277\021\322\203\235#<\230\277\356\373t\004K\035\265\277\027\257\333\207?\377\246\277If\304\333\202\365\276?\363\'\005q\244x\230?\214\245\235\033\332\230-?\270\330\2229X`c\277w\3378\207E\221o?\227\272\260\207\3022\222\277\nm\251\230\010\002\203\277\tU\261;^\250g\277i\022sj\365\314\265\277XO/\274\036\000\177\2772wF\314x\177B\277\0347\320\305+\335[\277\234\366\357bm\213\222?\277\236T\002j\340\247\277\031\267W\213\345\340]\277\361c\227\307`\023\261?%\031\013a\364\307\206?\206\346\343tb\331\250\277z\345\340\030Hd\264?CRRX?\331\207\277\210\246S\320\254\240\232\277S&\0041\342UD?.\353\315\212\234]\262\277\342\2416i\013\016\254?I\2668.?\246\264?#%Q\360j\344\242\277>\212\252\321\203\353m?6b\376/\324\013\253?\354fA\234\252j\254?\372=R\276\364\006\223??\201\366\316<\350\257?\037Q\227\274\346\347\242?\021\227\213t\355!\216\277+^\365o\'d\257\277\325Y~\0328F\246?\357\334\302f@\366A?<\303\"\2267\335\262\277\027\021\202\n)`\235?\006\214\260&\210\177\227\277\273\210\355T%\327\234?\244\255\275+@\020\251\277\215(\226G\316pR?mf\322\003!/\232?xf\330\243\316\005\201?\254\300\025?@[\207\277Qx\251=[\034\243?\261\212o\263\367\310\221\277\n\'\013^U\231\241?\005\247\351\004:\224e\277\373^\230B\002\211:?\212GpXi\037j?p2x\032S\216\242?\321\260S\267\276\343\220\277|\202\247\207S\345\251\277l\003\273\177\003\352\261?T\321%h\370O\272?\021\251m\\z\"\260\277?\254\332\213\226N\230?\372Q\227\2634wz?\033\335\177q\273\264\240?\214\356\303\373z\251\307\2771\305\222\211\326\340\262\277e\260\020Ng5\246?\016\205\314AZq\273?\334\301<S\202\265\241\277\335y\2303\021\251\217?\226-\322d\246F\227\277\263m@\300gh>?d\205WG\366D\226?\243C\267~\032o\276?q\276\237c\333\260\240\277\024\235\224\300\276h\273?\362g\356\317\245\347\266?\367\302<\310\217D\242\277J\351CJ\'\005\257\277W\017\2425\002c\257?%\334U\006\242f\226\2774:\274G\006\230}\277\376\313R\026\024\262\261\2772PK\247\000\340\237?U\207\010\035\306v\237?P\271\213\330\326)\235\277\177\235\030X\355\300\254\277\264\242!\020vV\227\277p[\210\366\332xY\277\325\314\326\t\304\320\222\277\214\247c*\363\306h\277\374\343\" p\376\234\277\266\307\024\274\215\013\244?HP\273s\254\t\242\2774\360\032\2764\010\226\277\225\024a\031\0327\263\277\270.~\214\266G\204\277\304\231\026/\315\365~\277\210<s\331\013\264\267?U\266\035gF \263?\336\225\200w\335\021\244\277\227\266\317\316*\365\243?\371\367\302\333)\333\256?l\207bwV:\210?\230b\221\357\022\207\300?D\347`\277\037\233\270\277\257\334c\320L\017z\277G\272W\330\201\t\242?\3138\016\314KX\233?\236&0R\3041\207?T\257\2319\316\177\224\2777\324q\2511\371\264?\2226\337#\350q\207\277[=\222\254\3205\264?\037\237\273*u\316\251\277\245\232oM\017\255a\277\202\322\375\023\245\315\302?\354\031v\206u-\265\277\346x\3679\014\272\246?\234k\351\351\247\251\235\277\033\304Yb\264\223\251\277.\305\013\030}\006E?\034Or\345%y\221\277\215\271\255\321\250/\245?WxM\217Z\277\223?r\315\3426qm\237\277w!\203F[9\262?\243nd\333n\266\205?\323}\323[x#\260\277\241S&<e`\252\277\2264c<\n\253\256?%\007\211\224\2578\252\277\007\211wfN\003\221?\274r\221\252\345\201\257?.\276\236h\255n\245?\003\271\323\333\023\005\203?\036N\202g\033[\222?\036=Q*c\254\244\277\233\312\024m=,\231?\320H\221\233\3012\265?]|\317:\026\350\254?\016\367p%m\220\246\277\202?\376\277\204x\232\277\260\373_G:\272\237?=\006\243\326Q\320\216?$\177\2328\252\253\217\277\027\367\350)J`\206\277\370\236\256\300\240N\227\277\222\315\254\254\275Z\241\277,\276\253\026\305X\272?%\251\373A\203\335\200?^\327\3506GD\270\277O\035$^\204\002\263?\201_\3359\307>\223\277\257%\264b\267\301\253\277j\253<\354\346\335\262?`\232\256\344q\355\240\277\303V\364\342\313 \264?\020\322w\030b\275\301?\200\216\361zU\260\260\277vfN\252G\203\246?0\207vVSo\301?\332q{\223\'\025\220?\371\005\n\267\257\005\272\277\375\331e\266\321\375\266\277\n\007G\314\020\010\266?4\007\354\246!\177\267?\031a\004\241*\344\221\277\007\232\263\030\216\205m?3\022(\036\270\260\235\277\245\261\356\033^K\261\277\200\003\351\246W\364\264\277\222\270Y\344L\267\225\277\007\364\033M\232j\212?\370tC\360\250n\220\277%>\237\244\374=g?@*\270\260\037\314\302\277|\363R\244\3061\205\277q\272Q\372\304\357\271\277z\373\024g\370\024\272?\017\023\232c\367\\\205?1l\244\371\244\300\207?F\347\313\201.\204\230\277\377\332\211;_I\246\277a\224$\010\225s\213?=Be\355`y\242\277!\014`7\007\'o\277{%\242\256\252\205\245\277\205\336\000\235)\364\274\277Pf\223\372\305\333\203\277\0224\244!4\225X\277\236!z\225:r\252?\202\344\002\341!\037t?\2161_H\201\236\226\277\010Z\334[b\202\211?\"*\271\360u\213\263?zV\222Y\020(}\277`\013\035C\242w\243\277\\QT%\273g\255?j\r\354\370[Lg?Ii,j\022Z\260\277\336\326\212\361b\213\207?5\\\370\n\263\021\202? !\024\370w%\261?k\033d\361S\347\210?\257\374(zyX\254\277Ww\375\017i;\263\277\025P\016\215\377F\256?.\032\247\035\2756\243\277S\034-\r\233\332\301\277\321\244OG\341\317\225?\271\020\271\225\267\361\254?\037\206\360C\370.\255\277\n\t\207\364e\313\230\277\004z\206\3613]\273\277\324q\324\341a\245\255\277i\357\334\205\r\271\300\277#I?\254\364\302\231\277\312?ok\364\233\242\277 \277\301\242\244\234\261?T\327\032P\336o\260?\313\264M\376\032\357\200\277\"\262\307W\252^\257\277[\252\2602\246\302\220\277\237\014\214E\312\007{\277l\226|\037Kf\201?\244\n\222w|\311j\277\365\215\227\203a\266\236?\026\033\365 \010\177\220?\307s\027$\374\274\255?\344UK\220\034\275\264?\323a\233\204/um?\257\024\001\241L`\263?EW/\267\211\360\260\277\343]\267r\2431\262\277\220\252\034\270\224\270\252?\223e\2137\231fu?\266(\000\017\332p\226\277k\250\204\256R\223\207\277%\304E\237W\343\257\277\350j\336\263\332&\265\277\301\267*\310\256*\235\277mE@\357\347X\230?\223\001\213\366<k\263\277\021v\247\352\222\370\231\277f\244~\331\\\244\266?\010\375\305*B\235~?7\027\214R\002\221\253?`\"\026\\\000\'d?|\316A\337\255\250\236\277\236\372 .\350\242\226?\335\256_\330\330\305\262\277k\212\271\301\314\036\272\277\254G\320N\337@\227\2776!\335\001\013\314g\277\022\375S\375A\260\250?\372\235\3721\357\"\264?\222\206k\311B\246\225\277T\2773\177\276\243o?\217\260\242h\016\357\226?\'\030\277r\340,\272\277sE9\300h\337\221\277\314\315v\345\024\216\226?$Z\026\226:C\226\277\265q\355\t\233\"\222\277\"?p\261\230\251\231\277\036*\n\016\032\324z?\337\222*zE\023\260\277\323:\260\347\271}\255?\305\337G\321\037W\232?W\261\253\236\366E\230\277w\356\305\004\"5\262?\261\353|\034\302\203\247?e<\353\357o\241\236?\215\250\233\255Od(?\214\307\316k\000\374s?\212\357\334\252\333\274\233\2773\324\225\314X\005\277?\342t\221\303\007(\270?+H\233\333\277p\257\277X\245\005\220\205\306\303\277XfA8\256\t\257\277\200\005\013\327/\343}\277\274\221\347\240\205\320\224\277a\216\316\234\242\261\241?\253\311\333PMh\260\277.:i\270\370\367\235\277\003\02228\333\363a\277ra g\331c\260\277\007\352\270\304\020\357o\277Z?\035\3621\266\247?u1;\365\210\246\216?\203P#\350\302]\234?(\271\340\332\306h\257?\324G[\353-(\271\277E\'\200\353n\343\262?\354z\275w\343\371\245?\3159\226\020\254\257\262?\245fY\256&\211\222\277\253$lWE\303\266\277\352:\'jy\257\245?\244\243O-\327\234\241?\335VrpM\303\263\277\006\265\336\341\250\325\260\277/\202Psr\357\251?V\224\212\224\266\370\253?!rc3\271\032\262\277\254\'D\302\241F^?\377\017\215\302\264b\246\277c\025p\036\260\235\252?\320g\204\350A\334\234\277m\006\263\351%\346\220\277\211\204],\026o\245?6\245~6\210\310\253\277\204\250!\273\234\372\230?\004\300\"W#[\223?\336\345\314\3177\260\233?\036\222\017\225?Vy?\322\275\263\010\211\321\241?\013\235\344\316\0059\237\277B`\021\304SS\224\277\2448q\2501O\203\277\027z\362t\370q\257\277?\342\364\372\007U\241?3\t\251\300\323\263\260?y\007\\\310\254\221H\277M\032\315\215J\022\240?\324\2337z4\024\230\277\311\022\321\237*\200\217\277\313Q\244\331\251\241\235?\005l\322\230c\223\276?J\023\232\210\327\274\212\277\327/|&\313r\262\277\274\002\374\252\027\034\236?\264-\360nZ\262\266?g\341\204\315\023\201\274\277\007\364`\231\021\201\224?\312(\242\260\3703\237\277m\2300\363\003\353o?\304\251\256,)Z\212\277 X\034\'\354\334\234\277CH\332\302>\253\254?\204\326%\177?\332\255\277\347\2167\370z^{?\036h\210\253\364gY?\312U\370\223\217-\225?;a\341\003H\330\240?_0\356\357!\247\247?\303\351\326\332g\267p?\037x\035\rE\246\217\277\016\021\004\324({\263?J\200\007z\357\227O\277\234A\013~\240\233\261?\244QJ\333\034\377n?\001Qf\200\347\375\245?\220\001\257\332\260\024\243?n\347\226\013<z\250\277\240WCp\241\351\245\277O:O\"D\373\264\277\276z\223{n\326\220?|\347S\367\307\346\277?\376\302\263\250\007\205\264\277\245\307t\000\313\370\267?p\217\356\365~\375\265?\033\215L!\372Ry?%\034\252\032\266L\237\277 \261\020`\326\305\244?\263\300g\250\240H\245\2770\350g*)A\240?\221\034fh\340\236p\277\315a\2462\275\013\243?\244Y\027\341\367\010\250\277wJr\263\230\035\211?`\3214\311\007x\227\277|\307\n\016\341\244\261?r\332\240\360>\224v\2778\036,I\372\340\224?\365\014\274\322\265\003z\277\234;9\241\275+\245?O~k\016$(`\277\375A^\312 m\262\277\020\005#\010\341*\234?\350\355\303\207k\232\274\277\357t\245\222\333\t\252\277K3\354\222b\245\267?\366\244aO\334\237\211\277\257O\365)\326\376\252\277wA9l4\204\206?\025\314\372v\323QZ?\027\370\307/t\016\246\277{J27\004!\217\277\272\034\216x\037\353\266?\020\025a\377\371o\266?\332\337.}\253\215\236?\241.ZDr\034\227?\326[\n\014\270\370\231?L\351\025z\222lt?)`\001\245`R\217\277&\224G8\223\275\262?0)v\214\027\356\246?\210\346\271!M\375\237?\"\257f\032\032\366\251\277.\345\023\260\037\235\240\277qn+\331\340J\225\277\177\255\241\035>K\273\277\301i,O\366:\243\277d\246\271z\033\006\212\277\3548\266\340\024\351\250?X\025\330\1778\347\207?\022C\025\373W\222\224?a\031Q\307\222sf?\244V\350Wd\n\215?\240@Z.\013\251\205?e\027[\026w\206\257?=\230\010\277\010\226\216?\024\345%ch\251\252?\354\250dL\354\350\212?\326\354\035H\002\341\224\277iM\373\320\203\372\246?\336\221\031\362\037\263\220\2774A\200BZ\355\245?\036\371\205\227\177O\244?\367\0277.B1v?\\\266\r\277\234Z\241\277b\332\252\2414\373\226?f]\022\233Gx\240?sG\304\177\234\264\253\277\2550\010\256\005\337\260\2775\333\323\034D2\272?\322\024\026\344\367\365\247\277\177\351\305\370;\014p\277\215\014\217\304d\014I\277=\225\016\324\203\014\255?M\221\370\221\363z\302\277\246dW\036\352\310\233?\227\"\265\2238\347}\277pwc\250\026\016\214?\304!\202w^\240\256?\2541\256\033h\370\220\277\216\2361X\221n\214\277_\307\347\334\353\\\232\277\365\273\00071\252\240\277\310xE\264\024-\267\277\254^\003\270\256(\233?\316\334~`\032\241\253?\325\352\350\242\264\365\035\277Q\301(!O\237\256\277\373\311\314\017fn\254\277\323\371\367J\255\312\260?\364\201\242\345\260h\243\277@*\207\202\026\177\247?\324\266/o>a\214?n\322\004\031\200*\242\277\344\217\237S\255k\233?\325%s\037\034\312\263\277\317E\346\352X\374\257\277\204\2644\215\264\261\256\277\242\303\2430\221\334\300?\204\330K\t\312}\236?B~\271\007G+\240?\341\352\214\314/\256\222\277i\366\377\317\216\253\224\277e\243\242\237\263\025\300\277\340M\\V~\263\240\277B\244\010\252\037_\245\277\321\355\202H\204\241\206\277\327v8\ta\276\220\277\255OOl\204\333\251?\315\250\203\202\202\336\263\277\226q\364\3334\273\222\277\336\362\353Pu\n\217\277\315S\337\t-\340\271\277>i\246\3159\253\265?\215K>\037T\375\204\277B\236G\025H\215\202\2779\361$+\250/\257?\341\266\324)@2\233?m\025HN+\005\212?{\227\302h\0072\257?\033\325\367\222j\317\233\277|-\322\342g\016\245\277\026\244\254\021\344\245|\277\253\3557\352|uj?H\037&Q\"\245\200\277\272\274; 0J\273?\335\031^7?;L\277\r\316\007\312\342\207S?\241\306\206CZ(|\277\027\322\232>\300\364o\277bAtc\216/\270\277\274\004iS\376/\251?(\276Z\242\177\306\265\277\354\271kL\032\201\254\277\327a0\014\241\303\214?\254\327\371)\313\\\230\2771\351\357m\234b\214?\262\020\273h\344\360\230?q\\\245\034=\360\247\277t6Ky\205\010\212?T\002\263qD\353\241\277\234Hq\217\222\206\247\277\273\335\230\371\010\302\247?\353\0323_I\273\236\277\253\210\nO\360\022\251?WM\001\243y0\251\277B\177\036\225t>\260?\0109\233/\366\273\224\277\000\207\0041\001\276\242?\001\036\346\2644\356\232?k\314\215\325\276me\277\230\264\010 %%\277\277\307\22467\226\250\236\277BV.#\270\037\256?\302\232\304*\226\022\205? xZ\3318\356\253\277\260R\006\217\243\350\234?2l\337\240\"\335M\277o\277U$\321:\262?\026\231\224t\246\373\245\277\272\342\244\322\177\236\256?\274\005\367KF\273\237?\203\177\266PX\321\233?wz\202\035\202SX?Vx\204\027\354\230\216?\367Er\315G\036\207?\300\226\251s\026\307\224\277\267)(\202\370\245\256\277\251if#\215B\202?\346\331\nY\370/\242?\027H\370\2732\364\256\277{\277\n\226\262\363\243\277>\2113\216]\352\201\277\362,\240\370Q:\256\277pIf\201S;\240?\363\023s\245Q\307\271\2770\302\032\210IN\263?\247\366\367\370~\013\260?\013Q\307J\234/\273?\331{\375\207Vx\225?\023\201\360y\214x\261\277\037\024\335\312\266o\247?\026i_\316\370\235\247?%\235\231\213Rs\252\277\343\254\257h\364\217\242?\027\237\323\300\274n@\277\374\367\250\312\'\275\242?w\245\332\201\305\354\214\277\337-\017\236\355K\300\277\245d\005\321]\024\220\277`*\337\226&\177\217?\203K\216Fp7\201?\300\322\037\231_%q\277\n\204.N\242\177\242?\274\224a\272\000\326^?\231V.\207\265\023\215?;pS\325{\343\222\277\203M]\022\340\316\230?P\326\341W?|\241\277\2278\241\355\324y\264?\005\005A\266g\377\245?\332\236B\252\307\236\213\277k\021\370y\376l\213?#\005\206`\360\354\233?^\233\2339?\307\200?\005M\257\200\364\324\261?\262\251\365\\[}\265?\277\275)\256\274\345\220\277\314E2\026\255`\244\277?QE\336\344\261\277\277\205kJ+\351\032\247?M\221>\226\373\247\256\277.\301\010\232,\365\235?\255\264\346%d\364\247\277\364\010\263\304\232Tz?\263=\266\326:Y\246??9O\317\3576\220?\255=\240\331\324,\245?\247z\234\025\304+\216\277.C\334\326\266\212\223\277\n|I\376\204u\240?\232\220\266y\222\225\245\2776,\205^\234\031\254\277\256\016\237u\240\216\200\277\362\373\032\354\222\246\260\277\240>\013\n\224\342\257?<\203\017)\251M\222?\027PwY\313\314\242\277}\030\220\225\312\376\236?\231\331\002\200\343\245S\277\235O7s\005\332\005?\363\227\276\3614*u\277\207D\033\277M4\232\277=gh72\352N\277a\314\034\017B@\261\277v\251!\237\327\227\235\277Z\277\215\'\362\270\202?\276h\202?\345!\261?l`7\331\215\377\242?7\303\215\303\233\260t?\251!{\266H\370\260?N%*\251\315\275\251?5\323,I}\257\235\277\334h\352\325v\332l?\262i#\030\271^\220?\211\206J|\270\231\262?eH\307\216q[\240\277\305\313\376\202\276\311\244\277\036\357I\250Ym\271\277tQhrTZ\230\277\261\273\206)\221\206\226?P2\250 \355\340\234\277\222\347v\341\235\267\261?=.\033+\362\310\242??\016L-\263\377\245\277\252?*\301=\355\231\277\212@m\311\315\253\244\277\2311U\233\254js?\366\211\303\362\200\371|\277\366\333\036\212mS\207\277L\300Ur\031R\211?\222\270\300\305\031\027\223\277\010\245\240\256\257\212\274?\351\330w\247\027\357\267\277<EJUz\315\210\277\306A\324+!\262{\277\211NT3+\203V\277V\214s4\030\275\255\277G\245\206H\347}\253\277HN\010=\316s\250\277\310\323\233\246\315q\212\277\tH\000mw\264\230\277-\354\304\024@\227s?\244\364\232t\031\322\246?f\034P\210\257\030\253\277d\000\245\022\322\341q\277P\021\362\267\247\227\252\277Q\234\377\0146\256\245?u\315\302\0223\322\220\277Lo\374\361~\241\253?\021\235\356\204\237\275\234?H\004\377\215\232J\222\277m\352s\242U\240\207?Y\357\224\364\2478\240\277\317\330\363x\231\237\247?I\324\276\260<f\234?\261o\245!\3744\231?Y\232\203`\267\353\261\277\030\021\255n3\256\260\277\272\2648\335M\251\246?R\375\222\003GH\266?^H\314R\026\017\205\277\317\030\220\001\250\033\215\277\220Ub\333\3071\243?\014\342&X)\036\261?`\331\257\371\360\237\240?\264k\203S\032\341\253\277\223\206\0368\377\337\221\277t\346\033IMr\\\277\333\336>\201em\253?\305N;\342\270~\242\2775\364\376\277\0264\266\277\225{\317G\323\250\242?kZ\200,\027m\254\277\313Ni\377\277\270\302?\367\361\330\253\225\322\234?Z\'[\263`=\256\277\212J&\207\256\310\255\277\357U\220\303u`\225\277\300~$\2357\021\273?\314\021\334\202\322q\240?\302\341g\r\246!\256\277\260\006\305\n\265\236\223\277\202\372n\200\340\370\256?y\037BT\372\213\236\277g\244\264I\026\276\267\277\200oXZ\243\370\213\277{Q/`\273\314\234\277\216\355\363\"\266y}?\304\270\032\307g\010\276?\322\251\331\211\364\337\271?\372\212q\354\211\235W\277|x\311\013\367g\243\277*\213\204\352:\233\256?\255\347\241\243\271V\210\2771\215\311N\205D\205\277\214G\027\354\301\217o\277\\9[\025`\203\206\277{a9}\202\036\234\277\231\246\36144\322\253\277\225Z`\244\030\360\256?j\355(\036\311\245\233?\255\372\3707\244x\264\277\243\244e\201\213\000\242?\307(\331MA\207\260?L\303\305\024LV\260?\242K\372\274W\277\260?Ge\376\370P\306\260?\374\342*\275[j\255?\251Y\035\356\177\010\240?\200\rd\270\247?\200?\036\367\243\371\262\277\263\277\020Ec#\270\305\221?\034\002\264}\177f\264?j\301\274\177\304z\220?z1\271\235\372G\243?\322\356\325\352\364\203\251?\367\315\354R:5\224?\234oW\020#H\234\277L\331-AF8\255?x\300\237g\216z\264\277`F2\330&\343\214?\333\301>y>\317\223?\237\226\222\271\301\276\241?\221s\013\001\274b\242\277\270\006x\005\376#\215\277\323\214\345\'\271\010\216\277D\213r];{\256\277\343\257u\350\233Z\246\277\225\342\306\030\014\377\264?\244E\023\037\rc\245\277wM\317\325\036\235\224\277 \035\377\215\260\217|?\331\231\321\220\250>\214?A\221p\327e\317\177\277]\220\211\317MW\264?J <7\217\204\266\277\302\t\257\335\325S}\277FA\3012\2437\261\277o^\361\214\233\200\260?\303\340qo\032\324\203\277\035\374H\2103\232\235?\234\211\371+\207|\261?\032L.\323=B\241?;H\325v\351\343\250\2774\324G\211\376\201\250\277Y\036\221B\301\016\247?\255\0246\364\225\260\273?\362vo\020h\332\223?\341\362A\377\342\253\230\277[\242\376#\364\352\223\277O\375\276j\205\325S?\300$\207j\326w\261?\362\034)\177\226\"h?\301d4\377\255\345\252\277jd\326\377T\357\215?S\334\025\370\275|\237\277T\365`t\346I\224?\2524\264\210g\273\241?\302;\245a1\033\264\277>5\360\371H\303\246?4;\356\0270\331\217\277\001\276\001\3646\204\260\277\004z\342\033\216^\274?~u\007\347\351\321\241?\231\226\033\312_\330\224\277\326\375s\330\255\351\231\277xcyD\376\253\223?\267?\030\357\363S\226\277\312\341\373\007k=\253\277.\324\353i\247\341\261\277\324X\211_e\312\241?\365.F\306*Ky?\344\027J\312\346.\215?\022Iw\272\323\'\267?\246F\320\272+H\272\277\377\243@\273+\315\251?9\2531\271\177\376\"\277\200\304y\r\335\"\254?+@\024\027zn\264?\341\324\276\255\007r\252?-\251B\372E\346\245\277\2607\354\253\nPo?\223}\306\342\366\276\256?\235\003\007\000\006\0016\277N\'\347\256\020\232\224\277/\311\245^Z\031\245\277\313\376K\313\251\210\244\277m\016v\356j2\240\2779\331\320\000\'\373\240?\201\204\026UF\273\252?\276a\336\010\334\010\245?\231\22088i0\247\277]\231\336\241\207\251\270\277,7\034C\273\365\257?\374\354\362\036\270\353\267\277{_6s\363\tt\277\271h\316\351\364Q\226\277^\260\014\255\336\246c?\250\237\236\365\300u\226?@5\177\376k/\227\277\241\316ka\334u\246\2774]\211\005\240u\224\277>\206\271\203\300\370\213\277\224t*X\272\200e\277\322\036\277|\360\206\263?\002w\255\255\362C\232\277[\333NN+n\205?\267\350JM\2447\254\277b\032F\276f\025\250?tA\217\371@p\242\277K\304Poa\016\254?\003\301\267\307\206\231\256\277B\366\241\270A?r\277\367\332\004\3720\036\250?\273\0377\357\317t\271?\224\274\210V%\267x?\017\313\215N\214\210\265\277\204\'c\232\225f\263\277C\ng\207(\034b?\207\202,\300\352Op\277\352\030\373\006x\r\265\277\\-\336\0148Y\213\277x:T\360y\235\216\277E\261\027\337{\004\245?iD\2366\r\275\271\277\375\204h\334\221\202\302\277\207EjB\"\231\264\277\326\310\2242\271\360\230\277\300\214\014\221\245\177\270?&\353X\313\034\014\242\277\331\306h9]\367\212?\212\354\022c\374\n\260\277*\245\014g\305\264\244?Y\301\030Tu\010\221?\205\225\351\003\265$\261?i1\034\021\033o\232?dK\321^\332s\260\277\200\nE 3\n\215?\326\300\331bi\305\226?\363\277\237p\257\\\247?G:9\'\201\362\245\277\314\360a\033k\374m?2\203\207\220\271\253\233?S\006C\026\024\026\206\277q\213\\\344#\334\230?\376\02012pd\233\277U\277\220e\225\206\250?\230\317\0355)\214\263?\032OYk\242\027\261\277\035\212\260r\030\216\241\277r\222\347\330W\013\267?\376,N\202A\274`?b~\326\345\232[\276\277\352\014\377\036\352\305\201\277k\335x\326\003\037o\277e\356|\004\356\354\236\277\231\303\333vF\010\214?>\002L\343\002\t\237?Hg\312\007\246\302\240\277V+\014\215B\347\260\277\232J\\\037\321]\221\277\010a\361\260\327^\245\277\327\366\250\362<\314\267\277\344$\013\207\261\301\212?\371\221K\345%\240\231?\367p\255]\003\305\224?\332\374\177\244\274a{?\377\226-v[\360\215?>v\3502\026m\233\277p\356,c\260\304\233\277\201ig\232\322nw\277Y\312q\261U\n\252\277\323\377\250w$\247\247\277\\\326\312\013\341\204\260\277\210\257_,\373\t\236?\033[\315\177\204\333\254\277\251\030\037_\351\366\262?\265\345\034\265F\327\234\277C\221\201\310dy\240?\224r\226\311;)\202\277\233N\321~\321J\242?L\001\334@pW\262?\017\245\316\221\316/\226?)\211t\271Wj\226\277\334\222E\221\364\351\247?E\207\260\361<:\241?\315d~\207\263\303\266?n\233\177\212jF\260\277\367\355\310i\323\036\313?\030\014)\220r^c?\026\211\362-s\016\206\277\307\'JM\374H\222\277vw\351\001|\271\226?\272FM\310\342\277\252?\326\'\341\344K^\232\277:\340\225\210l\350\240\277\233w\034w0\263\247\277\227\360\335\340\036\003\265\277\234G\366\334\367^\233\277h@\221\205-\304\224?Eo/\324n\236\264\277\215\031~\340\\S\253\277S\333\332\204\233\346\222\277\3530Vh\241\312\241\277\272\"\034\"3\023\300?\243|\0049\220A\261\277\351f\003\330\251\354\217?\220\245\352\'\230\265\247?UZ\375\210\373\334\242?&\0203X\376\001\200?\200P:O\344\244\235?5{>I\370\n\271?\336\234!\372\016\247\236?\352\221\004\336\306%\201?\215g[\\\210\267\223?\tIH\350\307\361\230\277g+\204\002\025\303\265?\001\211\204c\014=\245\277\0074v\224\203\037\262\277\247\303>\032\245\177\226\277\335\037\206\360\317\216\261\277\220\207\363\371G\027\233?\004\236\233\252gh\222?^\234\205q\021\245\245\277\'\'x\243<Q\253\277uC\213\332\036\225\230\277\255\211i\371\177rm?6j\267\242\331)\221\277\022\355#\3028\257\242\277\360\355\2215pK\256\277x\037~-\254\330\265?\213<0\026\021\371\252?_pXa\253}\225?n\026\374\037q\275\231\277q.m\317\t\214\247\277d%\317O\030d\222?\361\345RJx\227\242\277#\365\253s\033H\264\277\002\247\262\026\223W\266?0\210\025\367\2672\225?\237\212\016\353d\204\261?\377\371\267\244\262\326\271\277\243\\I\271\036n\243?\342\204]\315\317\021\205\2773\027\006\336\377\267}\277\355>\334\032\237\364\247\277\026d\'5O\244\243?mW\023a\272B\267?O\307\3026B \210\277>U\310\356\355i\260?31\337q\314,\236\277\212\327\233\261\201\203y\277\262\366J3<\274\261\277*\001B\375\227\363\243\277\352\n\372\020\325\232\240\277\205O\366\213I\323\251?\346]\rN6\026\267?m\255\315\021k\263\260\277\023\"\362\027\307c\217\277\211$\245&\254%\266\277\002\352\204\204\031\264\246\277\005\207\024\216\356\260\204\277\262\337\334\202\020\344\270\277=\226\0068\006\337\235?VH\374K\243\260x\277\236\363\362S\350|\221?\371\316\3532:\243\207\277\202\231\025\264\337s\301\277\004\206Q\372\333i\177?\372\364\273\364\206\261\270\277\372fl\002\224\334B?I\206\036\251KE\231\277$\251P\364\360\251\266?\177Wn\260i\344[\277\334\307\001~{\207\202\277\3241\323\207\336\214\275\277E(n\226\222\036\270\277\225\027\377\230\276\334\220?\212\312\251\223\253\017g?\001\200\236\014\010\025\241?\244IF;[\317\254?\267\177\320Z\361\r\232\277\t\247t\360KOB?`\366WQ.Z\251\277\035\321\310\023\026H\222?\026\224a\001\272u\300?\200\233\335\306\004\205\233\277F\327\2476\032\253\222\277\n\t\026\235xC\211\277,?R\343F\024\221\277G\2661\340\371$\265?3\234\3401M\030\234?\302|g!\227\256\203?\251\2027\331\017\336\240?\"jg\312#\317d\277\304M\370\230\301\306\243\277\344\333B\264\277Q\235?\216\371O\256\177D\262?X\311\3163 \n\203?@5\020p\370k\265?\255Kc\243JS\244\277\362\254\206\\n\324\223\277\3452~x[o\274\2773\334\311\010\203\177[?\363G\037\341Y\272k?Ve\311\004\3152\230?\010\024mG/.\223?#\262\2138\253\227\210\277\346\271\324\271Ap\265\277\035\224\250Q\n\336\247?\247\353h\305\005<\245?X\035\203g\224\031\210\277[\232\020\361\367\324\263?\350\210\326\2566i\242?\352\257\236\257\323L|?.%E\037m\270\270\277j\266\277%\306\024\257\277\000\361\255\234\313T\205?\203\020\365W\336\030\262?\352A.@\003\\I?\220\224\207\250\0321\264?\010\331o\322?\246W?M\272\002k\371\301\235\277t\002\325e\305\322\241?\311\353\260\267\363;\237?\313aj\224x<\276\277\262\263\207\265\325\036\213?\331\212\307\332l\202\271\277\003U\234\361A9\223?\363-\304\341\304\314\277?\257\260\372\006\014:\227?\n\307\314\226\0206\257?\230>\343\275\264G\241\277\"\233\247\002V\364\242?\242\000_\212\265|x?\371\345\236C\206\351k?H\210B+\372Q\244?\nK\001\346%\030\205?k\335\237_\217\210\210?\226A\242HP_\232\277Z\262\027\235\217\254\261\277o\025\002\313eu\250\277\274\376i\036\017\345\236?\000\030r\233\353J\243\277\026\272\240@\242P\262?\242@\314\274\337\363\251\277\367\372\003\260d+\212\277N\203\372b\313\365}\277y\362\017\r\2567v\277\n\324\206\363mL\272\2775\261 \274\272\206\222\277?_\363\205n\362\243?\273;#\237&]\210?\nx\315\252cJ\233?-<\004\240cJ\223?\3432\315j\312\252\270\277\324=X\311\205\021\275?_\260\325\007\342.\260\277\251\354\342\010\202=\227?\370\315Lp\017\366\235?\236\264\274~\243\271\261?\303\202\272\376*\376\245?\266O\333\036b\227\244?\200\207p`\215\236\263?w8GB\252\300\252\277\211\022\203\342\035\271q\277v\006\320\037\311\226\247? |j(\202\336\241\277\002M#\004\315p\257?\373\245\360\200\'\375\253\277\230\362\345qg^\264\277\3663\3161\346\250\222\277\251J\212W\244\033\202?\2543b\030^\213\225?\375D?\357\262\037\202\277Y\260\270\375\024\244\220?\371&\335\377\002\210\261?A9\363=\220\242\226?\246E-\003\204\323\263\277t\201;\276Am\203\277~\307Do\000\037\254\277S\3236\331n\337\261?q]t\337\366*\233?H\tx\'\022\223\310\277z\3062]\261\203y\277\3153\372!\206L\267?\202n\301\360zH\252\277W\321\346\347 z\255\277\031&P\356;\231\262\277\013X\017\266\263\373\226\277\377\334@\234\316\313\260?\302\344\003\313\322y\200?B\312\345\211k\207\245\277\025\304w\237\363=\273\277U\205\375IF\027\245?\niX\357F\332\246\277\236\227\245\227]f\272?\235\323>\2618\367\243?>\256\242\265\320\247_?\002\223\347a\231O\253?\354\347\272\307?\323\205\277\032#\341z\214;\267?\340\247[\207\321f\211?\340\365\357.\360\307\227\277\303\270Q\313\220\003\210?\377\202\202\342\\L\213?\251\n\321\326\202\241\220\277t=\304D_\023\260\277d\032\271\243\3679\274?\257\225\315\234\336d\223\277J\004r\312\237\177\240\277B\327\364@\207\334\207?\202\316o\013&\335\227?\2218OY\022O\236?\3725\017\351\345w\203?\211\020\331\'\261r\231?\351\217\223w\372\242\242\277\253\235T\034:.\260?f\270\200\223\222\240j?\243\020Qc\323O\220?~\251+\340\276H\252\277\027Ky5\355\037\267?\222i\330qlT\221?\027\342\274\313\256k\226\277\321\010\345\002Q\231\253\277R\227\362\230\"\001\223?\243\022\230\217{\311\234?96\246\270\024\036^?\223te\365\355R\214?\351\3166\017\262\202\237\277\367q\361B\3001\244\277\226y\311\271\"\r\225?\356\324\305uQ\221\230?\331\342\275r\236\030\262?/\2778\257)]\225\277\n\242 B\353\274\260? ;,\333K\263\206?\334\333\256\300=\343\225?\3076\240\325\223)\257?\223DE +\332\267?\211\230\351\340\370\324\244?\352\327\2422\004\261\242\277\350\277\221q\225h\220?C\'\320Il\\~?\316\243\276v\313\375\220?\253Q\215~\341\245\211?\217\262\363\222L[\246\277\244\236\336\217>\275\222?\\\026\251\376\223\n\215?\341\001\\\3147\221\237?%\003om\256\356\272?t\217!!p\340\224\277\222K\273\025\267*\264\277\336\344\221\237P&1\277\036-\374)v\233\300\277k\0141\305\267n\252\277\212\270F&.31\277/U\352\211G\005z?_\"\352cx\n\246\277\254\353\200\304\342O\242?\264F\2443S\327\227\277\264\035\333(+\211\267?\245\304\210\266\272A\242?fT\200\240d\206\253?>\302\340\324\216\341|?3\036U\340\274\240\203\277\023\001\231*%h\223\277D\372c\212\246b\241\277\374V\333!\273#\223?\307i^\376\220\352\242?\272f\017|)f\262\277|\224\362R\367\262\243\277\223\304}\213\205\243\261?\3725\2417\230c\266\277 n\336\247\334*\245?FU\016\323\334\333\240\277\307\364[\000=\020\303\277yws^\016l\274\277_\307 \365Lb\245?\342\236\351\"\201E\226?\261\215\035-\347\314\261?g\233\243\344\364\025\273\277\374\265:\273\330\014\232\277(\220P\265Z\021\222\277\370\003{\375\301\306\255?S\353\305~\300\376\262\277\365o:\334\014r\262\277Q\215\305\005k\'\265?|\253=e\371\"\272\277Lt;\216\341p\230?\227\306i\020\340{\225\277\357\004#\253O\032\266?n\014\225\262\231\217\241?\243\270\377:D\361\256?\003\334J;\031\001\230?Xi\234\372\377l\251\277\206\312\317F\'s\226\277\346~\350\312\262\226\261?\006D\342 \325\311e\277}\276\355\303\354\313\254\277\237\347.v\t\367\225\277\277/\024b\306\240\256?\267\233s3\360w\207?{\016\243\352\253\360t\277~,\337\225\264\240\204?\200\205\304\215\317\235\273\277x\022M\216\303\275\242\277H\315\017\211_\210\252?m\351\007LPZ\246?\346\220=\307A\216\201?\362\234^E\'\202\244\277j\252\030/\344#\264?\323\255\351!^\316\250?g,\221@5\024\251?\324\3160\335\322\315\262\277\325h\341\335\311\204\253?\340!\357\315>\334\207?\031\027yK\365\256\304?\345\307\007:\321+\245\277\347?\350\003\267\344\266\277k\033\304\362\345\010\246\277\313B\025=\220\301\240\277\365\203\235\3109\355\266?:\215\022\001\304/\203\277\307\211\013\237\357\027\210\277}\372\n\331\026\272\210\277\374\337)\200\366,\252\277\354\013hn\375\021\207\277\027\rNT\t%\260?\2240\343\335E\355\270\277\201\225\033\364/\355\246?\243Z\310\004\3736\231?\372P!\274\335\330\231\277\373Y\\\274\275m\237?\3125W\267d\244|\277\210\323\261\225*,\261?\343o\317\020\204}\211?s\321\024\341-\277\233\277\272\007\273\0046\231\264?%\236\227b\223z\277\277\323(\001v\232l\253\277\317\006?\355\351S\233\277\355~\321\346\240i\221\277\214c ]\376\200\210?\260K\326\274w\306\265\277\363e?\001\222v\222\277\371\2174\013\010\251\271?Bv\274\333Yn\217?\353\210B}\r\204\263\277@a\037~~\315q?\3708\324+[ \255?\026\006#<g K?w\313\033@\257\371\205?\340\020T\234\226\211\205\277\366\365\335x+\207\233?\211\234\003w\336\256\267\277i\350\205\"\362\333\263?)C\220\345\220\030\245?\021vp\261\300\352\212\277b\303C\352\r\223\207?\027\255\233\205B\275\244\277\024\236\371\241\352\347\251\277\223\203x\371\024c\242\277\2511s\376\204|\265?j\361\300\023}#\223?\274\314cA\317M\226?s\n`.\242q|\277?F\365\301\014\251Y?\0267\320\254m|\221\277\025Q)\022w\351\221?\216\2328\003\333\"\246\277\237\034N\004\367\260\256\277X/\016k$\215@?\223\325\3329\207\370\254\277/[\034\003\240\337\266?[\221%k\326\352w?\027L\323\340\246C\216\277\263\375t\240\254%\303\277\241\2553\001\031\246\243\277\002=c\024-\335\225?6\t\211`\201\222\300?\224\214\311p\031?~?\035\022\234\310\331\002\250\277\341.(?p\260\231\277\016.\316\347Y%\224\277C\314B8G\375w?\354\346\032T\034\261\223?\'\227(\014\3534\253?\352p7\367MS\246?\314dS\354\005\335\257?b\275ek\226>\255?\016\232\211\234b8\256\277D\365#z\004~\241?\235\021\322\321>\203\254\277\315r\233\246\263\027\244\277\330zsBgh\230?\352\341\'\027\331f\243\277\247\230\272B\000%\265?\226JP9(\004\244\277pAaY\242\030\225\277\001\024\240\367\013!\241\277\241\303V-\006[\213\277P\177\355\304\247\323|\277\306z\276\243\363=g\277\367h \014\377\200\254?G\343Q\'\207n\236?\032\234<\347\305o\300\277\237,\033H\3735\253?o\220\242\333s\301\256\277\337\251\277&\341\360\234?\026)?c\010v\231?\211Q\240\372dl\233\277\330Ek\257uA\250\277\000\262E\265rp\212?\215\n\036`\317\256\267\277\373.f\036\263\262\245?p\021\260\264\367\325\217?E}p\323\270M\261?-\302\324\361\364I\201\277\211D)\362Y\244i?\361\224|}\276\013\255?!\246\035\332\324g\266?\000\343\302\250\262\266\227\277\223\236\033\303l\224\261?\3210\265SO#\215?\240\214\014\204\374/\252\277\304(=\306b\264\264?\271\363-\006\273\016\235?\267^\212%\245]\247\277\352\t\227,\2444\246\2771\202\177:3\343\225\277\030c\237\354\036?\254\277\207\201\000\335^R\244?\361VN\216\335f\226?\220\030\264\356\214\207\245?\363\030\275\201\214\013\230?Xc\036\265\203\302\255\2770\244\264\314\330R\200?\313\003\304\034\231\027\234?3\360\213\237\204\373\220\277\374>\311Eg~\221?u\302\267.\340\376\242\277\322s\353\246\247\262\227?Ac\021-\0223\207\277\007\023\024G\001c\253?\342\360Or?\000\244?\304\232\ny\257\302\210\277\231\013E9\351\276\230\277\221?\215=q3\230\277\367\314OT\306&\277\277\224\236s\245\260\276\224\277\232\374<\202\351\374\205\277\252\321B\355\307\346\277?\ne\206W\253~\262?Q\022\246k\310\255\247?\217\000\311\316\273\223\246?\000\326\3449\226B\264?\371u\313\3461\232\221\277\211H\376\345/l\263\277\271\322M\033\224\014\260?\275\0066)\360\233\\?4l\217F\2434\252\277\200\375.\274\207\264\245?\230\267\"\355\353A\244?\336\274\372\321\026\260\237\277\177\372L\244\361\315\241\277\371\303t*!V\241?\303\177\001\264\314\374\261?Z\361\034R$\202\266\277\333\320[U\002\342\255\277\361\253\333\3659\365^\277\355\301`]7G\211\277\216\302\355\371\375\274\220?\265\260\363\273\017\002\230\277\020\252F,\337\376\241?\265\237H\004[\312\242\277z)\231\262\014\310\254?\254\370,\255\217\250\260?\340\317P\004\353x\253?\255\303\344\207O\205\245\277\340\260\347#\205B\263\277(\224\034L\260\272\241?\006\031qe\331\'\261\277\177\374\335\204+\270\242\277\245\355\207j\274\034r\277\357L\205\2621\006\254\277r\271\244h\272\277\262?\342\361\274u\020~\213\277\t\252\315i\037\312\241\277C\003\2200ZL\231\277@\032\247\314\2344\207?\362\2620\216X\303\205?t\213\364\374}\360\260\277\322k/3\362&|\277O\311\202\272s\031\262?\300\270\270B\216?\217??c\227\222,\301\260?\257\030\247\234\177|p?\314\232\274\204\327\302\227\277\202\242`\271L\217\301?~\036\021\242zS\244?\215L\327\"\247>\221\277\351[\205\367xI\226\277\222\324z\371\325\326\246?1J!\376\334\001\240\277*S\225\205\006D\254\277~\337\016P\007\336\211?]\037\020\307;\342\261\2777&+\357KV\222\277\266\334Zn\346\365\177?\221\340\r\303\352\310\240?\034\344\317\301\005\311t?\251\031#M\256\375\262\277\307\371\333\255\342\304\207\277\307\345\302KK\347\246?\304\254p\236)\034\200? \304\221\317\005\273\246?,;OI\003$\250\277s\230\351\321\364\005\213?Q\351}\220\352\316\276\277\177NZV\303d\202?\327D\325\235b-\256\277YR\362|\311H\250?r2\247\226!\022\253?\3644\211\300\300\027\247?\375\305\004\332\300\312\237?5\341\257\225\035=\225\277Z\275M[\032\347n?x\312\023\220DU\203\277\225\201\331\361\261A\251?vb\201\2578`\260\277\t\375\010\270o4}?\014n0h\253Bs\277vb\030\301_A\240?h\377\034\224\024\302\223?T\212OEa\3328?\022\337\223\253\306.\216\277r\3662HF|\262?\022zf$\343\257\226\277S%\373r\002\003\253\277\312w\211\303\236e\230?UB \234u\227V\277\223\363\377\314cf\224\277\370\326\224\352\234\300\266\277C\017\246O\376\272\243\277\302s\no\003a\260?\275\222SZ\243\210\203\277{\025:U\010\360\177\277\347\305q\255\221\000\257?\342\342/k\324\300f?\374?h\220YM\271?\241\330\014(\377\362\177?PYi\020\371\021\204\277\350\0221c\\:\240?/\223\255\033\325\266\243\277k\217s^\363\336\246?L*Z\216\034\322u?\251\273hO\220\256\223\277+\200\211\310\347M\232\277\260\352\263\336xt\255\277>YJJ\033\307\257?\275-\253a\313N\266\277d\244\3377jr\222\277C4\234\007\376\201F\277\333\214\206B\213d\212?\026nG\002\244\366\207\277`\262n1\335\337\231\277U\246s\206\311\n\225\277\344|\257\347\022V\213\277}k\372\337\307\357\276\277\031\227\277\304bo\257\277o\034\003rZ\315r?P\372\327\275\\J\243?d\231\271\305MO\251?\251C\316\221\257\304\246\277\211\233C\276\000Y\254\277~2\200\366\323\333\236\277d7d\010\2443\234?\353(J\314P\251\231\277R\317\007I\026\361\262\277\220O\210\270J\025\241\277\330\034\240\014\356G\264?\0027 \333\235R\271?\313$\315\255\227\356\222?NF\270w\243\364\220\277\334M;\352r\022\220\277\324!\337X8\351\223?x\264#\243}\336\224?G\246\322\252\360A\266\277/\277\335\336uB\243?z\353\226\202\326\205\257\277_\013\032\033T\374\246?\376\300\231\357\002\376\260?\024\263\326az\tf?\035\365Y\"\251\233\216?\242+\375\0307\253\231?H\246\341-\247\014\251\277\315\\\001\354\224@\261\277\0144\215R,fw\277\254\262\302\210\264\323\243?\217\212\331\326CB\207\277y\347J\317\371N\250?/f\020K\247\220w?\226\326\323_\370i\247\277\027 \345\357\232\313\252?\177y\212N&5\246?\\\024&\365m\330\204?u\030\"Q\024\\\253\277<+a\334*\223\257?f\030\372j\037\r\224?\234\315\\\342\227\346\227\277\034fo&\353\253\262\277.\261#\207\316^\234\2773\017g\275\\\321\241?\261\260\034FE\203\267\277G\3327\210W\316\250\277\267\325\031\346o\022\301?\204\2646\022\270\030\262\2773k*\177\005m\231?,\233\374\025(_\204?VMJ\273\275\360\264\277\003OE\271G\303\203?a\241\211V\2257\260?\251\005`\312/\226\226?\\\307\271\372O\027\243\277\206\313k\013\234\241e?\334\020\344H\214;\242?\000\237\300\266\243u\241?#>f\252\333\356\260\277X^\207s\224$\266?\3520-\325j1\256?\231\372J\235\036\304\277\277\n\014\306v\322x\241?\312Z>\330\363\264\277?\226[A\242\355\210}\277\313+W\020c\376\261?\340\020&\235\222\226\222?\262-\313I\272#\246?\276\3204\346\210\202\250?\204R\347{D\354\251?F\261\324\310R\246\204\277B_\205E| \245\277.c4\266/%\232\277X\n\177\246\257\007\237? \177EZNU\207\277\004\242\211\360\266>\231\277\300\273\327\210`\374\271\277\311v\333\\t\250n?\025\tk~V>\221?\360\013\306K\001\"\261?Nz\376\311wt\240\277e\320\'%\002$\242?\2068Z\366O\315\260\2770H\006%\231`\222?\217u\307:\331$\216\277\376\310\363\375#x\253\277\220\220zgj\000\265\277\233\017w\236\177\326\204\277?\022m\035{\224c?`B\344\303y\302\270?p\243#/\311X\240?C\007\271]\305,\212\277@\212\001\323\024\211\274?\201u\r\027\272\005\245\277\242:\306\017\264\347\237\277Q\216\213\373\347w\246?\243\212\026\235\213\300\254\277\255x\251\002O\227\235\277\271\000Oi\033\266\206?[\304\r\210\202\314\223\277\302\351\377,n\233\246?\245\341\247\347\266]\260?\202\367\342(\251\360\222?\001\3579\005X\206\236\277L\347\035\313\272n\261?\027m}7t\007\262?\341Pm&1\207\262?\200\207o\374\231\211\233\277\227N\340\215\225\372\241?>P\367\241S\214\210\277f)\033\310\305\333\221\277\342\004V\205\373\345\207?b\333&X\314\301\261?[c\265hO\315\205\277\375\210%\252Qc\263?:\354;<|\277\214?\265\311\223\203\013H\255\277\370\275\337\342\274\235\247\277\215x,\027\227\310\223\277\021}{\217\254t\240?\336\234\262\351\335\021\260\277\035\226M\332K\335\231?\022\273\256\364\304B\270?\323\037v4-\361\225?\301T\371T\332p(?vk\t\217$L\271\277\024\2454\'\247\207@?\340N\204\3661w\215?\030DyY\302\014\230?\'\302\341\231\375?\223\2777\222\232H\232\223\240\277^\323\241NJ\243\201?\035\217l\254\371J\232?f\357\343)\001\355\232?g\302\253\252\222s\251?b\232E\013\3756\263\277\337\\\234\354\217U\236\277\230\224\005a\264\310\272\277\"3\301\265\321\270\273?\317D\205:\235\201\213\277Z;3y\203\320\264\2771\366\2038+K\246\277\352\307\274\025\0258\264?i\362Dp\220\371\224\2779UC\006\016I\245?\301\237P\365\331\317\275?u\222x\n@\320\262?8\326\226\222\211{\243?:d\203\241\201|u?\3347w\252\277\326\232?D\325J\242\226\263R\277\373\364\222\334\270\005\267?!\302\332\320gN\234\2773w\321\016\335A\230?\270\017~\260\303x\263?)d\251w\030\224\241?\370\032\251V@\363\221?\210H\251t\367U\241?\204\026\316\301\023v\215\277\n&\177\210\247\213\261\277\266}\017>u\264\254?\005\241h\';\254\243?9o\023\r\237\231\210?x\31627OG\261?\3621\006\361v\022\237?p\241@b\255\013\247?\327\342\262\316\224\336\303?\362\331m\240\241Z\243\277?\002\260\275X\273\262\277\310nO\351`+y?bo\222\252\035\037\272\277\030\314\r6U\246\270\277\262\321\232\242iT\237?+\262w\013\251l\241?\361\037\360\227\334\027\220\277\206\312\310\313\0323\270\277M\027\351x\322\334\206\277\203\206n\313\343\333\245\277,\236\3151\316\205\224\277!/\354_\273\340\262?e%\374\333\213\243\243\277\354\021\267,\235@\242\277\340S\350\252`\377\222\277\256\\7x\264 \257?y\256y\256\214\317\200\277\302\341\221\271\327d\247\277/8\355\327\251N\222?\273}\014%\"0\260?\322WB\351\255\222\260?\323\315\177\343N\375\250\2776\226\221\336\227\252\277?\351LOr\"X\274\277y\217Rk\362D\256?\020G\221\203]\340\244?\375\330KM\276g\224\277\300\016>.\241#[?\031>w\255\2028\250?\375rD\242\366\255\250?zU\372f\215s\265\277\335\2461,\327\305\233\277\200H\307\202\273X\260\277(>A\201TC\263?\013\0377\002\246i\242?P\027\'\375C\325\254?\201\033\307\310B\315\255?l\342\024?\342\350\273\277a:\352\234\255\320r?\022\233\330\370\245\235\256\277@d\017Xh\022\261?n\261Zb\247G\260\277\377\211\315b\363\'\263\277\362\\\337\010V\250\251?\036\202#\325\305\212\274?\257\035\221~24\267?\n\365\017\177\243\217\243?S\231\311\\\374\251\242\277\374\257\343\236);\227\277P\205\310\232\034\306\227\2773&D\236\224\222\240\277\335\010\273v\250\017\266?I\267\224\004d\305a?>-\262\0209\'\255?&\037\2222\324\370\244\277\271\000AN\034\350\260\277\236t\237\372~\022\234\277>\0107\342\321-\257?xA\211\356\035\263\243?\322]8\001\267\355\207?F\253\037\363\016p\233?0dxf)\323\221\277h\206_c\232@\227?\227\252\014v\271<\253?\'C\010\031 X\265\277\007\236\336\003<.\203?\267\276\\\204\312\364\240\277\267\347>q\246\262\256\277B\262\204l\341\203\252\277J\321\341\376\374\014\262\277t\002L\344C-\227?2\364\343\372\031#\247?\022`\323\256\003\215\235\277\3430\327\330}\376e?\312pG\362.\021\255\277\352 \216\344\361B\275\277]\362e[\0324\200?/\363l\t\240c\244\277\021RPOh\347\276\277|\351[$\334V\264\277\"\031\344F8rs\277A\202\263\212\260\251\246?\247\314<l\252Y\271\277icu\002\360\243\252?\204d$\0346\337\237?\330r\3279 \346\210\277|\252\226T\003\265\231?;\357\014t\016\206\252\277|\252^\230\366Y\220?\267\265\264,\316\304\233?\322\263\214\361\230\002\225?`<|\240\300\031\305\277A\025j\313\277\017\241\277\363\310\030i\005\221\236\277\254\357\263\324\345\306\240?,\327\210W\026\026\260?&\341\240\326\362\003\244\277\331\035\263\037s\227\256?^\302^i{\310H?\021\371_\344\211\357\214?f\313\350L\351\217\215\277\2460\026\345*y\202??\326k\023\217\037\256\277\364\3520\032#o_?\3716\030p\275\017\266\277\252\251U\254\257l\205\277E\251\227\222nq\240\277\263\304d\217\337p\244\277\376\274\302\340\\\367n?Y)\201\213\377!\235?\266\372\257HS\322\223?\240\261x\214\306h\262?\261\232l6X\007\244\277\250\3272\3503\247\261?\246oBu\336\002\247\277\254\325\020Q\261\031p?\205\346D\251\267\251\252?C\334e/\247o\251\277\236j\246\202\241\030\274?c\023\034\307\302\204\255\277\2155\177\231S\037G\277_\246S\303\035(\263\277\311\340y\245\360\005\234\277\252\245\276\357\243X\245?\021\322\005A\205;\246?l\273\235-\327\255\241?h]Y\351,\226\206\277\320\276\014\326mb\206\277 \304\037\215\323+\230\277\350\217*#\037\207\243?x\301\004\276\341+\244?\"f\024 S[\236?u\251G\304\303-\245?7\301cQ\267\343\274?\240u\224\037k@\206\277\304(6\373\030\254\252?\205\320\345h\261k\266\277\317,r\234(1\213\277 \322\017`\304 \240?\333\314\350\343|\324\215\277v\331aOK\220\253?G\232\233}\304f\231?0\001Q\360\2777\242?BJ\032\351\366\"\251\277\327\260\034\205`\016\200?\007\'\271\0232\346\246\277\213\315\234\272l\227\273?\331\335\361\010\300 \244?\341v\344\013\212\306|?\363\336\210v\213\261\226\277\366`\340\016\323\312\270?U\203\345\247I\207\232?n\0133\246\252j\234\277x\206\231\007G\306\267?\226\251L\271\251\257U\277Mi\307b\025\214\255\2779\002CE\274\255\264\277\t_4\033\014\353\243?U\263\350\341\241\372\235\277F\024C\237\004\363[?5W#\003\270\244\260?\350X\306\344\361)\241?:\233\250\262\204`\237?\20074\325$\305\235\277\035\275\205\351\220g\260\277\3131\242b\347?\210?\3378K6\304h\216\277\nJ\326\2108ts\277GD\207\266!t\243\277\330\2016d\301z\271\277\306\252]\362a|\253?\277\260kD\336-\203?\013\'\321D\341\212\244?/\340F\030\361\031\272\277FS\251K\261\222\256\277F\241cj\227-\262?\243\222\266\307\250\031\230?\223Tp-\371\355\222\277\010\352\313\326\r\024\210?\251y)`\301+\241?\256\036\306\006\254\034w\2777\232\361\225\331\013\263\277\276\226MS\330\207\247?rU!L\304X\232\277\224%(\234\217\367\275\277\353\0243[J\010\255\277h\327ruA\204\212\277O\350\372$\325t\265?\3031$X\014$\236\277\024L\357\224\277 \233\277@\010xfO\202\216\277\356\177\003\373\243P\253\277;~\t\003\216pL?m\014\373\223l2\275\277yD\310\262\346\207\227\277H\217N\321\255\250\213?\256Z\036\355F\033\250?\324\221%P\020\305\226?\222\203,\254\270\006\264\277x\272\303\341\027\374\224\277\262f\330\352\357\300\375>u\223=\037\301\353\250\277\265\316\264]\374O\273\277\231\354\356\257|\302\245?\273\320\374\267\347\021U?\367\366f\'\227\255\267?LC\270IS\203\217?\234\242(\351Vk\263\2771d\342\2167\241\251?\022\330L\333\354\273\253\277\010\313\333\010nR\223?\037\036\241<\274\200\270\277\325_\216+\317W\243\277K\340\253\032\301\273\245?\264a\251^\267\000\242\277\246\345\265\314:n\232?\246\257v\353Kr\220?\314\0146\r\022\347\271?\216G\271\231\341\353\224\277\367\351\3634\305\246o?\223\375\365&\353&\262\277=%\210$$-\254\277f\253(\270~\301[?\355\316\341\004I\316\266?)\373\277;o\351\213?\203\014\337\"\266\232\253?B-\255\341\004j\222?Q\027\264\004)\372\247?}f}\234_J\255\277\332\336n\346\200j\241?\327N\213\206\341\266\265\277l\360\352C\213\361~\277\236\016\\\020\305\277\200?&D\n\262y`\260\277J\'\263\316\256I\226?\232Go\307p\032\204?`\3215\243\034l\226?k\031Zt\237\"\272?\246\321\342\316u\314\200\277v\255\037\000\302\354\252\277us\264\320\027?\225\277\250P\225\362\273\211\215?\\\344\033\314\224\275\221?\254\0308Nf(\206\277!\\Ry\027\273l?\363\244FX\014\322]\277\177\237^\245\250\261\265?\220\2666\374\006I\263\277#q?\003\331v\301\277\005\253\tJ]\364\256?\213J\000\302\320\217\251\277\240\350\361\374\361\304\231\277\343T\211\211\225t\224\277\014\322\232\377\277\'\253\277V)?cK\305\236\277\247\370\263\264\234\327\227?p\375}\023\372\252\244?{\301\223\021\014\322\270\277o\336\305\226\203\347\235?G\257D\363\346|\266?\022\241(0\006;\250?-`\234,\3721\242?\361\300\311\232\031\353\245\277\221\241\213\230\036Hw?\n\202u\342u\271R\277\033Fp\366\230\355\273\277\314\346\210\255\221\212\203\277\024\261\343\020O~\263?\026\373&0M\241\260\277lo\313\342\366\322\241?B\262\307[\265q\260?\210i%\365\325\215\251\277<vB\367{\211\232\2776iw\323_\203u\277{\335\202\350\216\334p\277\333\322\351\006/\024\200\277I{K\233\365\354\270?+\371\024\302\207}\244\277\001H\007\334T=\234\277\017\275\321\"\362*\223\277\343\005\213\257\325\006\236?\273\002\\l\3545\240?\223L\3332s;\226?\001\264\232\220\034\353\276\277\351\367\023\312\223\203\234?\221\356k!\326\251\301?\307\265\347\r\342\322\222\277\203\032/\333\000\321\225?\0140\212\365\266\251\242\277u,\225\351\343a\224?6\302.\362\354\314\246?Rdx\370\3368\271?\002\266\315(\306]\241?c\315B\"5\344\260\277\n?\244\\\235\024\203\277w\2207\374\370~\262?\3664\006F\215aw\277t_\204y \341\276\277\216\006\350\210\202\343\263?\231\332q\3147B\271?\347\367\347\377\263\303T\277\360T?#D\267\260?\337\2358K\307\264\256\277\311\324}\220\342\025\241\277\3463\204\010\2158\272\277A\264Y\016l\221\265?\350\222\236RBV\207?\256\"\216\240\251]\237?\351\032\336T\352N\207\277\205L\256\2275\3204\277u\017\2501\205\021\264?Dq\016\314:7\264\277\267&\271\032O\260y?\031\311\303\226f\334\237\277a\024\014\306?\177\253\277\263&\036B\305\310\263\277O\361[\350{\242\233?\233J\r\221\225\323\217\277\237\242\2373\376g\262?\346M \371\337\023\244\277Y\2538\372k%\266\277\355\353w\205\037V\223?.\323g\"q\273\261\277\211\273\026\003\376o\223?\260\225w\324\235\324\224?_\3031\330\324Z\241\277\304:os\332\001\265?\357\027\347\316I\324f?\242\027\001\003`\024\220?\003\325_\2723\252\254?\355\310\037\247\250X\223?Q\325\300\265\314\335\232\277\276RH\314\204\025\231\277\311l\3610\245\016K?\316y\337rw\212\246?\244I\014\360zH\234?\004\330A\217\227\271\207\277\360\377  x\277\236?\373\243mj\231V\267\277zS\243\265k\177\263?0\327/0\371\270\211\277\004&\324\033C\002\244\277\302xJ\\\nb\244\277\0176\315Iz\325\262\277\255\325e\332\035\230\234?\241CH\312\212\357\245?\026q!\260\r\204\253\277(\251\311\007\261\232\246\277\000\3159\276\035C\277?%*\204\036,ys\277\330\362\252\220\003\002\235?\335\026\316\034\3171\200\277\321\264\230v\302=\251\277\353D)\001\261\025\261\277\264\245%}\rx\261\277f(E\345\322h\246?b!\024$n\016\271?s\3658|\\k\237\277\301$\343\271\324c\213\277\331\267\277O\nt\231?+\353G6\215\303\260\277\003\t\226\366\304k\264?r\305\204%{\376`?\007\010\003\030\363\227\231\277c\273\237%\232\351\260\2775O\214\330kC\235\277\022\334\350\223A\017\256?Q \3658t`\232\277\333V\3710\t\217\241?gv\237[T[\240\277\363\356\204\2440w\202\277}\361[P\361\256\243\277\322\"\271\311\337\263\251\277+\365\345\226sQl\277\344t\003\006\2108\245?\342\025\237\260u\317\260?5y\337\301\337\n\260?\031\2524g\313}^?\002W\nEU\214\260?\317\023\373\252\212\371\235?!\"\230g\341\035\210\277\360\246\204\277\356f\235?\274\3205\243\035~\215\277\024m%\274\016\177\261?\034\304\036\342\354\212\252?\027{L\035\334\360\257?\324x\362\221\356c\242?\213\221`\226r!\240\277\360\364jZ\253y\211?\034a\221\326ut\254?N-3i\361A\302?\305\332\247\263;\227\177?=n\230.\002\344\244\277\022\361\035\351h\371\243\277\356\221\016\2076\004\277?BV\346\367\276pL?\240\3145\320_\370\254?\307\344\357\026+\202\246?\313\324\323ar|\257\277/\374Y \2343\274\277\224\017\351u\261\223\224\277v\334\004/\004\250\211\277\375\375l\331+\211\226?x-\250\027\236\256\271?u\207\334\370j\016T?$m\327\257\273\254\255\277\024\'\3418\203Z\232?=\246\336\315J\014\245\277\361\342\362`\214D\201\277\253\277\021}\235\250\250?\327J\206\301\t\025\274\277~\377\336\303\321\333\224\277\353\373-\241\023c*?Y\262\374\343#\027\300\277,8\024\370[\026\201\277\307\274\366\361\201t\232?i\310\221\255\341\t\220\277V>=\026f\245v?\025\347\317\275V\205\216\277\274{p]L\035\213?\202\002rG\003G\252?\367\363+7\224\357\252?j\310\306\302\206\345\231??x\277\213\332k\212\277\377\030\374\360\032\270\214?\005\344\354\000:\266\241?\377\351\213(\300\311p\277\350\304\360n\214\013\247?5\303\327\243SL\227?\241\331n\352\335\267\252\277\252\251}\026\266\332\220\277\264\230\331\375\271\301\177?\373\220\037\372=\000\222?\351\305\227\017\301M\203\277\350\010\r\242&\310c?s\220\352\374\255\261\232?\300\r`\376*\341t?@\247\213\304\032\241\256?\215\213\315`\213\371\300\277\261B\207\244$\361\276?.\266\002\036\001\177\251\277\331uV8p\263\263\277\307\256\273o\345\360\226\277n\244\350\235\216\213j?\027P\271p\202m\256?\025d\312\020\245\327\243\277\264.\005V\'\'\241\277\315\014\2154\265\216\266\277\3037\000\025\363\003\240\277\202u\246\233\271\325\034?\310^\334:$\246\242?\212\305\037\024\220Y\215\277\267\242W\257\246\014\226\277y\001\254Kf%\221\277\252D\210\r\303\005m\277\257E\333BOO\271\277\223\032\363\361\010\031\241?\361o\005\362\324B\222\277\342\025\272\317\367\231\265\277\377\214\305\205Tl\237\2774V\"\233\270\361\241\277\254_\"?\313\250\246\277\002\222\024\034\033\202\303?\365\033F]:\364\264?JQVA\360\304\225?YqK\003\253\353\253\277\324\354i\312\036\260\222?\233*\226\230\335\202|\277^\377\264\033\375#\203?\034}\277\025\260\340\245\277\215\353@\024uf\247\277\346\023o\310<\321\272?H\341N\360Z\001T\277\265\215V\2710\016w\277e\227\033 J\367\227?\217\026\251+\016Z\265?Y9<M}N\227\2778{P\313#\177q?\351\236S5#\023\263\277Qh\264\010\035L\251?\3016\234`\351\'\260?\215p-n\201r\215\277\023\356Q\2568c\263?\332h\r}\252\215\236\277b\200\203t\320o\253?\275i\267\330\020\312\262\277\330\002\232Q\016e\245?\005\223\267\204\244\307\221?\003\201\372\021\036\'\246?\333O\264\216\256:r\277y\377\311\323]Z\226?f8\024c9#\220?\236\"\323?o\345\254\277\2434@8\367Y\260?\306\374\014p1\335\240\277\266\224:\014+-\242\277\254\330|\260\260\235\205\277\352r\306\355\217n\240?xJ\007\331\3601\267?\036+\253L\2755\261\277\376\225\316*\n\331\253\277\355\036Y\224\021O\220?\362\216&?r\r\272\277\003\333\303\340+P\265?\177\230\312\240k\274\274?\370b,\004\303\020\261\277\375\215&_k+\266?\265\000\314\030\017s\245?\372\251\007\306vc\257?\304\307\353\\BT\221?\342\277\223a\002\334}?\224\000\245\230\'\234\256\277\\\023\305lW\216\266?5\317n\025:7\257?m\310\305a\007\300\211\277\200\000J\206\007\371\203?\340\210\265\261\205\251\261?G\366\237\222\017\231\262?\373\361P\305\211#\260\277\020\253\250\366y\302\215?*zF\013\2637\255\277\215\275=\234q9\241?\333o3u\243\010\213\277+\235P\327\343OZ?\331l\314\025ZR\242?\323\201\361\206\241R\262?\223\236pG\207\\\240\277<*^\'\003\t\227?\224\233.@\016i\210?\346\302;\262M7\275\277;\033y\211\277v\223\277\207@\325%&\234\227\277\306\373d\246\343\221\236\277\330\261X\352L\013\242?<\354\026\'\263\231z?<Sx\353\023\250\251\277\037\016\247{\352\314\262\277!\366\215\221+\202\252\277\303c\235U-\346\256?\033\274e,H,\257?\355\314\377\263\305I\266?\266U\204<\t\305\261?\342\010\334\317!\366\241\277\251/\317\201VG\234\277\352\201\315\325\ts\232\277>\266)\\\312\353\263?#\247\224\230Y\210\234?\225\271\357XR\223\253?\340/$\204v\235\241\277\021\322\013jq\276q?\216R\262\306co\210?\032\324\\U\312\306\242?@\354J\\\212\317\247\277u\314z\254\342o\201\277\262T\033\224\361\\\244\277\314\031-\302\272\326\275\277[\343\331\202\t\265\264\277\327~6\241gj\237\277\2605f\372\272,\226?-\212\340\255\0313\224\277I\023N\216Z\376\205?\323\016p\372\241u\275\277\306\224\303!@b\225\277\335Q\312\301\352\360\227\277\017\270hbRj\233?\026Lm=\256\256\250\277m_\362\201\200\204\201?\365\370\243^\214\212\253\277\242e\345\252`\353\233?\256`\267-c\014\241?$\017\374n\222\212\224?\237\316SQ\324z\252\277h\310\245H@\276\226\277\344\357H\312as\234?\346\206x\230\337\267O?\311\253U\213\212\324\246\277/C\032\260}%\225?\020\221\233\354e\026\221\2779\301\351H#\243\253\277\312^|}\341\032\256\277\214\264v~\336\263\231?\001\\U\262\031 \250?vM\022\331\234\370O?\201A/\363\267j\226?\334\266\375b6\332\236?\216v\241\330\324\022\230\277\250\243F2_O\243?\236\372\222\274\364\222\235\277\332\3262\343\010j\262\277}:\300\330\350\017\265\277\232S\314\247Ac\256\2774\271(\246\341\236\204?\n\000\204\353\342\013\227\277\002\360\372`\264\305\230?o\251K\303\026F\206?\361\354F?\020\303\251?\340\320\277@\226x\302\277\211\354mT\222\301p\277@\022\027\301\000\376\262?:\224\263\365\251\n\207?\006V\253\271\325\t\244?\033\tj\3049\373\215?\230\205^\305\303\004\210\277Jc@\n\0072\251\277{)\205>\2308\247\277l\"\311\003V}\221?\317=r(]\035\227?h\234\034\t%\377\271\277A*\212\273\306*\242?|di9G\272T\277\232/Z]\364=\257?\377X\225\211\355\n\244\277F\357\023:U\343\267?AV\214\024\307S\262?\206\021Q4\204*\260\277\261\256P\322\003\025\257\277\350\354]\000\004\277\244?\001\377\225eN4\220?\264\332\017\3028)\261\277^F\314\260\2329\254\277\320\327\021h\245]\244?HR\353>\252\310o\277\320\344\035\016j%\267?h\341,\'\002\247\254\277\250\323\005x\375\256\213?\234(\316E\342\203\250\277n\257y\302\204\274\227?\252\220\227g\273R\213?\321`\314\201\024X\237\277\275u\333\361\035\232\242\277\377\322\213\222\n\255\246?\rb<\316\332\314\255?\226UW\302\021\207\260?r\003}i\0313\245?\364f\207\321\026\370\260?\352N\034\3203\271\250\277v\322\256\341U\204\254\277/HGH\033\353\277?~\'\267Y\'\316\225?v\t\374\177\201\037\257?\014\274yT\351C\256\277\013\017^\316;/\232?}\357\326l\337\\\235?\037\356\017\233cf\260?h\200Wp^a\237?H6\036\344\373\t\223?\240e\320\354t\206~\277\243v\324t\026\313q?\235\205:9\230\016\260?\352\320\253\255\311o\244?\332q\270t\345\033\201\277\276hFU+\355\243? \013\374\265\235:\246\277\255Wz\326i\332\256\277\223\030\254\215\247q\246\277\273\255^p\260\201\254?W\217\240Y\205\013\226?\n\214\260/>L\225?\000\211FiI\303\255?I2IGl\317\212\277\307t\226\004\266\213\245\277\273\323\367\311\335\263\221?c\364\2362\023b\234\277\375\302\312\355\314\364\254?\220,f\272\025\t[?\005\177\266\343.9\250\277*\031\245#\357\037\243\277\347:\367\324\321\227\262\277\336\345\243:t\376\260\277 \215\354h+e\250\277\'\373i\323\204\233\257\277%\356Z\210^\202\223?/\353bP\225^\202?\006\361-\272\362X\217?\326,\363\033\'\372\240?\030\351\304*\220\214\234?I\246\026\345:u\210\277\276\031\"Q\014\033\277\277p2\003A\023|z\277R\226\243\274\372\034\252?\201\"A\340\034\326\201\277`W\306m\310]\264\277\033o\236k\265N\242?\300\025\333\255A\245\263\277G\213\321I\003\314\214?EVBI\270\216\212?\346\035\273\254m{\254\2771\002kt\335?\221?#en\221\333\364\250\277\332$@\271\340\026\301\277\224+%H\037\006\235?\022\3067\020\362A\301?\014`\223\t\210\242\260\277\257yAa&\034\247\277\236\251\027\206\366\332\266?x\360H~\357K\262\277\"(\355\t\276\265\216\277\370_\341\020S\010\221?\246,m\321\026\315y?CV\030Vs\264z?,\356\255\366S\365\263\277,\364\340\345\027\334\257?\033\022\027\222\244\n\267?\177\245k[\276{\246\277\'\342\205AQ\354\214\2774\3746\035Iq\212\277P\323\326\263\252Y\272\277H\'3\237\355+\275\2773\301\325)\212\244\232\277\211\242(\026\341s\301?\316U\202z\235G\255\277ze\241\263\245\346\253\277>\304Fb\334^\251\277\033\330\310~\335\204e?b\307\256\336F\226\271\277\310>1\010\021\272\241?\202\254_\255\3674t\277s8\254\341\370\036\264\277G\021z\2019\240\261\277H\r\\\001\305\217\263?\022\265\313^\357\350\266?EA\272vM\'\204?\363wHy\240\253{\277H7\305Y\235%\245\277K5S\341\037\263\246?\205\3169\331\255uy?b\027\270\205B\\\250?\251\034\364\261\200\262\247?\276\031g\337c\266\262?\024\023a\002\327\262\256\277\326\331\216\tc\\}\277\336\306\'A\356\226\262\2775\356\247+\345@\300\277Y\013\304o\323/\240\277\253\301S\264#J\267\277A\311\207o\232M\254\277/\272P\203sg\240?\366\003T\210\310\372\265?;7w\264\355\276\243\277P\251\266\363\376H\251\277\013q\371L\233!\236?\301\231\235\220\250\353\210?`l\335U\251\362`?\335JK\343O\031\300\277A\347\211\214H\022\236\277\267#\304\2050\344A?\352\024\033#f\303\270?A\021pV\266\334\227?^2\0353\362S\216\277\237J~r\276\373\300\277-K\324gb\325\246\277\010\345\371^\371Z\206\277\271\342\213$<\233\221?\304@\235N\330\375\252\277\010\025Gz\002\341\267?\255\364\331\nZ~\240?}M\206\311\207\342\270?\212\310\245\001;u\300?\030\n`1\334b\262?\363\205_\273\305#\200\277\037\031X(\315P\252?XC\334R\210\250\247\277P\263\210\272\242\364\262\277^\355\0061)\342\245?\327]\2151\3457\245\277\206\252\030\261cH~?\t\375O.\307O\236?\266\240-\000P\270}\277K\030\032\014\030\020\243\277H\r/\236\213\005\224\277\346\025\263<\300\342\227\277\024q\202\010\n\200\275\277\332#c\226\230\347\243?u\020\374i\334\276\226\277\t\341\323\304\316=\240\277\244\217o\244\005L\237\277\233\350\237R\243q\263?^\0041\272L\375\255?I\312zB\024\226\245\277M\324`\004}\220\253?\005[\"%Z\224\247\277x\035N\377\214B\203\277znH\322~W\202?x\336\352\212\266\204\242\277\212\n\2505Eq\254\277\\-\366\243Z\325\260?\330\276\360%\235\\!\277(\272\325r\333\307h\277v\366\266\202\026\264\250\277.\005\261\312=E\211?\302P\\-H,\260?$s\253j\037W\301?y\272G\231\340#\271\277\310bVNVe\234\2774v\357\030d\223\247\277\247L\0024\315\212\207\277\271|\n\250U\r\250\277\311\232\006\237D\374\241\277rf\357O/\312\273?_\357!\244\351{`\277x\330\323}\260O\234?\360\220>\357\032\205\245\277\346I\003\374Q\224\230?\'\225\325\037\350\375\214?zW\231#\327&\241?\350\277;\031\002\305\214\277\327\002\035\034(\376\213?\334\334\316;\363y\243\277&\230,\006K/j\277\016\t\273\316f\001\273\277d\224\372\026\367\237\222?\305`\221\031\371\201\262\277\251\035gi\001\205\261?\335\002\317\033\266\223\270\277\310\013v\3105\266\240\2770\331\247%\216\221\236?\023,\352w\3145\235\277\036\341C$\374#\224\277[\263}\266\275bw?\177\306\245\251\003\t\260?\203*\350\271\337\255T??\002\311\273\231\014\234?\204\225I\000\340\260\240\277&\353\251T\201\377\226?\017\031\347\035X\033\201\277\372\000\265Xfq\275?w3f\\d\276\223?\262\317\214\351\214\r\234?q]Z\242\020\030\260\277\242\220\024F\344\340\221?\232\331\336\365\315\023\300\277+\213\261\021\005\202\202\277\231\212)_\036\275\262\277?w\253\353\244F\264\277\347\227\313s|\322\266\277_\032BR[i\247?\310n4\240\365.\227\277E\356!\237-\253\267\277\244\253NJv\264\247\277@\373|\255>\312\240?\233\000\253\247\327\303\271?\374\314&\275q\372\250?\306c\263\001\025D\243\277.\215\373\272L\274\227?\224BX\275\300G\246\277\364\240\303\244#\014\241?\023&\224\023W\026\221\277\262Q(\205\367\334\252?}y\3706=]\254?\246N\252{\253\331\264?\033\233\355\361\036\335\241\2771\341\227\330\266h\255?\002\033t\216\345\016\214?K\356cx\226[\253\277\354J\351xT\366\241?\310\005\335\303k\226\251\277o\216`\265\002Mp\277\216X\224\313S:\215?\226\003\036\r\263\246w?\304o\2366\360\300\201\277\233\271\216wi_n\277k\267\313#F^\255?\025\'R\366:\346\263\277\310\'\216\367n\247\224??\022\002\261\303\350\222\277\222\370\326\256\003?\250\277\372\226\007\226F8\236?\306K}1\3003\262?\362\367\261\214\2103\243?H\374H:\306B\223\277r\244L~\200W\262?\003\022w\220< \260?\264\330\344Rx\212\234\277\021\253\001\204\221\332\233\277\000\225\203E\214\350z\277I^Y,\301\335\236\277{L\231X\312o\262\277\363\356\260Y\237P\246?\321M=\330\224d\202\277\350\376\233\026U/\206\277{x_Ak\301\177?C\231}Q\363\031}\277\365\233S\306\235:\246\277Z\2042\r$\316u?\220\345\322\0173 \256\277\320\371~\306a2\266?m\033W,\340\274\245?v\3719\230\211F\224\277\024\311\3559{:\267\277\347\025\n\254\016\034\270\277\017$\245\376\206\366\264\277b\372T9\354\264\231\277\034\272R\007Jp\223?\0059pFn\250\243\277zl\020\206\234\363\273?\326\r\352\311\304\357\206?\0142\313\362\256\023\254\277\214\351\006\0326%\254\277^\001\024J\203\355s\277d\271\317\300\264\367\260\277\373\034\306\354\363a\245\277}\017b\312\216\230\240\277\273b<\2128X\253?\007,{X\270\017\252\277P\237\232\342\r\227\261?\275\355\004z\325\327y\277iD\360N\324\371\211\277\361>\276\017\340\005\277\277\210)\207r\022A\203\277\351;\325\315\007\223\201\277\005\037\211\352\221\342\253\277+z\306:\366G\240?\364<\367:\235\233h?YC_&\206\217\241\277`\241\351%@\204\263?\215f\2619\374\307\236?\010\372\232qn\260\207?\330*O\377\261\007\207?x\271\200\274c\242\261\277)\375g2\021\033H?\320\362\017\030\263\266\222?F\215\320\013\317M\253?\027\243\245\204`Zg?\016\372\345w\225l\264\277&\330\275u\020zj?\326\361\340\365R\020\235?`\240\363\035.\036\224\277cQ`\245fFx?E3\262\023\202n\247?\304\020~\n\237\254\274\2776\0030\267\344+\266\277\032>\372\201\340\272\226?\021\251\236j\345\320\277\277vh\317\235\210\334n\277\255\247\301\324\337\363\247?1\032U\003\211\000\242\277B\023tM\322u\226?()\326Da\220\256\277`%\221c!\270\261?\027\000\265\355t\313\232\277\010\"aN\357\017\247\277\354\336\034c\256\341\247\277(\r\332\365\212\027\225\277\3209\2161\316c\276\277\326PU\367)\376\242?\313\234\226e$\313\220\277\215\336\240\331\306\311\225?\355\274b\177\025\200\247\277\222g\261\346\331Q\240\277\262K0 \217\000\205?\264\365\023Q\315CV\277\316\377-\323\356l\227?M\254n\000\025\304\233\277\251~\353_\304 \240?\271\332\332\271\037\261\260\277\255 \211\202\242E\204?3\343\372M\007\367`?8\312TF\320\310\243\277nsS\3129\355\250\277\023\366\337\221\362\'\234\277\025\035(\215.F\242\277\001Y\247\344\003\020\247?\2737\330R`\'\262?\361,\2457AG\250\277T\376\037\025\360Z\220\277)\250\351#\037`a?\202#\013\034\224\347\265?p\202\236\227\021\017\251?\251\242\020\255He\235?p\2328\".\310\230\277t<K)O\311\210?\302\373\317o\366\204\264\277G\201\262\007d\242\202\277/\260;R\214\320\244\277\t\373\331\332\216\240\267?H\275\263|s\260\220\277_\345w\306^\020\265\277K\363\201\270\021\013\244\277\223-\266\201\304e\226\277U\210\350\272[\333\221?p\372\264\376\255\002\245?\320\351X\340!\313\221\277Bo\232\226p\354\260?\\5N#F\361\240?\347\316\375\031U\256\243\277\345\207\301r\371\232\242\277uo\223*s\364\264?\316\361\r7\277\274\271?s\223\005?\375Q\227\277]\216\r\000\257\322\267\277>Z\261L\271\245\224\277\266\210&\263\263\260\250?\311\241)\251\324\257\243\277\005f\340\316\337\300\244\277\353\346j{\036\n\256?\312\003y\013g\337\241?i\262X\370\367\034t?\2718\241\363\302\360\266?\220\324}\177\2214X?\202Hh\215\363ry?6\344\260cJ&\261\277@1\322\342\033\235M\277;\307\354\025\223\254\246?\274\276M\302\370\005\207\277\353&c\346\034R\260?\231\331\255\332\023\250\243\277\321\014\312\266\007\037e?[\203Y\326\003@\231?_\244\202:.\r\263?\244\2370\262\310az\277\352|\254\377\373\274n\277\242\350!\204J\220\265?29\032p\020\274\247\277\316R\247\344\007v\270\277.\005\031>\202\350\261?\252\033+\001\"\224g\277\252\016]\326\356R\246\277, \254%\303!\233\277f1\320I/\243\225\277\363N\313\344Bs\235?6\317\260\220\241\361s?\307\346\241\315;i\252\277l\350XT\342\320\260\277\353\224\270\364d\177\222?O~U\251\224b\257?\003\301\034\237\200a\276\277\332\221A\322JH\233\277\017\024\310\031\003\336p\277R\226g\300\273\272\262\277\2771\330B\023e\215?\310o\357#~[\237?\365r\303\3372$\263\277\203N\246\335\022\263\241\277)\276\003RZ}\243\277\005\rZ\277\355c\253\277$\2754\353\335r\255\277\3132\016e[P\240\277_,g1x@|?\301\243\242\367k\241\221?\314\216$\032l\366m?CB\303\310\022\017\246\277\311\224\242\324\271\257\243?q\211\031Wk_\227?HUX\240/F\271?g#\374\342\002\037s?\245\240\240\024\247L\243?\366\342JW\240\260\232\277M\366;r#\314\256\277\311\006\017\357\'\335\261\277hA\007\315\016\363\255?\376\306\3308#\232\177?\321\246oX;J\254\277\177\361W\025\002\334\227?BzV\207-5\246\277\350\241\t\017\014_\230\277S5\216\246\\\337k?\367\033\"\221\361\332\246?D\322\3368\263\366\226\277\305\216\373\026\270\274\241\277\005\362\211L3\r\265\277:\273\367\354\350\343\242\277e\264k\302/\331o?\340P;\030N\201\243\277\017\033\025\346E\245A?\025\323\257T\211W\263\277\261\0232\n\220\356\263\277\017\023\312\250\355g\204?\354irF\251\'\255\277M\270\341\210Z\361\257\277\322\340\376@\324\335\242?\3024X\363\203\300\261?\265\375qja_\212\2772\177\2359\326\004\244\277\n\005\022n\217\206\260?,\373\037\'\035\331\260?A\375\205\237\375\222\227\277^C\374c\340\362\207\277\345.3\372\271\0303?]\351\252^\021/\250\277\211{\323s\322\316l?\230\252DE\t \273?\233W4\326\333\021\254?\301L\016\242\227\247\217\277}\031p\312\272\203p?z\023m\253e\017\230\277\2549\r\216@o\241\277s\025\322\n\214\206\231?Uh\33521{\244\277\216\021\256\245\356\363\224?I\226\366\2137\215\221?\201F\255\262qzk\277\344\256\024\344\\s\265?\221\325x\303\375\262\244?a%\223\265\305ps?\315G_\343\225\035\240\277@\242@\316\373G\260?p\363\275\276\364\364\250\277\237M\356\000\266\337\207\277\214\006/\301n\240\244\277\013\377\365\214\3424\252\277\301\252\310\376F\257\\\277W\006\336\222\314U\237?n\007\265\205\340J\241\277\303\362l\306\315 \242\277)\017\324\1771\243\266?*\315[/\373\257\242?\353\365/\341oy\250\277\005\3477-7=w?\377\221Ckt\345\213?[\376\2547\301\252\216?[J0={Hu?\224\323\"\001bP\276?\007\367\036\3606\321u\277i\250(\365\250M\256\277\244\203e\361+\361\240?\371v*\026\253\327\273\277_\314\203z\0362p?4\'\344V6`\263\277\330\361\223\213\266Dz\277*\310\r2\361\332b\277\r\306\034\257\364\245\223?\031V\236\254\204>\240\277_j\265\014\253k\272?\211\367\1771Q\242n\277\245\024\230\216\315\307\261\277\362Wa\021\261\203\247?\007\236\365\345N\276P\277\261\327{\255\027\322\214\277e\373Q$x\321\257\277\321\247.hp\026\250\277\036Bb\325\023\352\250\277\217\266\202\323+3\241\277\207\177\227~\333\230\212?\323+\357\'\273\373\262\277<\225\006\017\311N\204?\241\315\320\206\231\361\263\277\315\036&\303\341\220\237?\272q\010fM\366\227\277\343\334\002s\241\224\231?\373\303\000\210\313\236\236?\337\034Jl\0223\202\277\302]\310\341\262u\264?T5_W2e\231?g\n\346\242i\302\234?\230\r\251x\036\237k?\2725\207\260\200\217\250\277#GT\302\r\274\247\277\376\267Y\374\254\321\254?{\250kt}\376\251?\326\324\370\tZ\214\246?\274\020\030\"\266#\250?\346\211\237\2151aT?\246.t\256_\264\233?\010\264\265\351\"\006\236?9\270\206\333\334\207\240\277\366\220E\"4\202\217\277KX\250\262\376\323\203?&K6\251\354r\266\277D|\250k|\337\220\277I\370j\230*-\207\277z\270\252/\346\321\303\277[\262\371\375\021\202\224?^\233o\332\004\353\233\277\336\230\225\035j\310\242\277)\\8\301\276^\225\277C\255O\273\277\323\273?\017\010\256\252\226\254\261\277\274\2235\377g\225i\277\034T\306X\271\304p?\"\205&\234\3303\250\277h\371\246d!\222^?\241}D\347l\205\244?\251\r\344\243P\001\235\277Y3\327\274\270\000\233\277\013\213+\2238Jt?\340KAo\366x\300\277_\013\204\005\232\331t\277o70B<\206\245?\334\375\350JO\032\212?_.\034\035\305\322\260\277\256j\014\270b\225\240?P\226\361\361\330g\276?\031!x\331\362;\251\277\020\016\366\342\376\303\226?\331q\223\201k\231\242?\246\360;bWT\201\277\206\r\273\005\211&\225\277z\200\235*\343\237\300?O?I\273\014\007\250\277\227\204<A\335\252\232\277r6\214\323\340\000\233?\271K!P\027\003\231\2776\311g\366\251\366\244\277E\365\242\263\247\023\243?\356\361X2\253\n\224\277\004\237~\252Cc\241?\301\035~\361W\203m?\246d\222;rOq?u\034\022A)?f?\'\024\276\022\337\361\210?\014\373\244`)$\263\277K&&\2169\372\255?\343\256\236\376\000)\245?\002\327\274\005\222F\266\2779\312x@\325_\241\277\004\314tg\220\355\212\277\016V\217\326\357\353\204?t\014s\342-;\267?\303p\241\377\010\252\244\277\001\253\nE\260\364}?\331\335\201\013\016%\241\277,\223\223s\317\201\232?c\230?\245\234\315\253\277\240T\267BP\327\205?\242\3145\236a\006\255?&I\305\n\246\211\243\277\013\r\362\\\367*\263\277sY\270\270\025\026\210?\001`\010xqt\225\277e2\310\231U-t?]d\340\264D\002\246?\275\216C%.I\241?VK\3170\023\316\270\277\226\221\006\265\307V\264?\201(9\0269\037\224?\216\221\310\033\322\317\262\277&\025o\006\017v\261\277\313\314U\300f\023\237?\270c\356\374hZ\301?\n\033\t\037\307z\264\277\350\371!\304v\327\250\277\277\242\r\310\002\016\250?\315\004\222`\364T\253\277\315q\227\350\242<`\277\203\014\373g\223o\215\277\001j\006\202\267\n\240\277f\232\235\341x\204\220?\311c[\030\357\214\222\2776Y6\237o\r\224?\357\313\377<\375\342\276\277\332\310\221\324xi\254?(\373\001\232R\033\230?\023|\023\023q\n\271\277\227\330\305\332x\220v?\223\266\302\264\230\373\230\277j%qZg\321\260\277\364l\'\201\330g\271?\033\222u\214\363\221\240?72\326N$\351\204?\217\027\372/`H\235?\343\275\206\236\353!\232\277\374\207b\222\374Gr\277q\242\325\253\315\026\241\277\005\267\345\366\201a\236?\342\024\033OE\316\260\277\210o\346\'\027Y\223\277\351\243@\336-L\260?T?\006\025\" s?\367\024\243o\204\222\246\277\312\232\340\226\032L\242?\235\356\253;|U\214\277\211\326\355\240\2461\264\277M#\213\265\311\375\233\277S\315\227=G\024g\277ZV#V\330\303\224?\213w\274\347\211<h\277UWh\361\201\242\272\277/\372\352:\005\251x\277\345.\247W\342N\215?\201\302E\256yS\272?e&kQ!q\236\277\210B\217\027\331\325\213?v\006m\031\330#\276\277&\3706\332\370\240\230?:zh\270*\315\242\277sD\340g\r\366\212\277=\361\357HTD\274\277h\010\n\322\037a}?\343\343\020b%\376\254\277\311\213\356>\002\017\240?_b\204\351&\263\250\277\020Z\027\240\373\224k?\214c\253\023\325\326\224\277j\257\204g\273\233\210?\241J\310\177\343u\216?}a)\346/z\262\277\271\321\2444\320+\251?$\371\273\371\220i\230\277R \324,\341\030\224\2770\246g*6\345\223\277\312\336W\325Ye\240?\312\364\022\271L\014\210\277\376rp\206\006Y\250?\241{U~\201\323\253\277t>\036o;\304F\277\243y[:\362\334\264?\343\204\266\316EY\274\277\353H$\277\245\024\254\277\005\027D`\267<\266\277~\017\356\213?\201\252?+\253\\\354\"Z\241?G\243\250NMI\240\277\354\241g\0026\037\254\277#\252\202X\204\014\246\277\253\241\313VV\222\270?\302?i\361\252V\235?\370\222\177-\241\030d?\331~\210@\375d\256?\014T\276\325\315y\260\277hZ\'\014~\315%?\374\312\'8\226op\277\350\356\364\337\257\361\224\277\tQ;\020\247p\246?\352G\355\276(=\261\277@\331pv\332\361\261?\306\346\237pP\032\230?\332\023il!\032\263\277\320\311\245\236=#\276\277\2207\2659.\354\247\277\212\037\320\033\020\223j?\013\275\2111\313x\206\277\030\"\203\310\3552\223?\373\341\354(\302\352\243?\316,<\362)\006\257\277\370\257y\200.\305\271?\253\204\227\331&\372\244?\347\222\022\342\274x\250\277\244tnE\227\314\203?z\'\255\260\033\376\272\277\225\307\213\341\025\031\246?<J\341\037\251\r\265\277\364\024\237\212\302\263\263?\346\312{\230\t\031\241\277|\300\304\266\335\001\226\277\r\370\022\333\357d\227\277L\010\213_VR\250\277%\037\221\212\003\261\242?W\207c^\304u\242\277\010sh?\256\300\271?T\203SP\332\271\223?\361\351\312\313\222\005p\277\ty\320\272\274\027\221?\344T!Wf?\262\277\201Z\343\022\022b\276\277\026\n6\304\263\212\266?7\214\305\234&`\225?\203\275\n\302*S\222?\210\351%\232\263\002\221?&{Y1lm\250\277--\331\247\221\177\242\277\3323\336\357`\354j?\232\220^\254\250nd?\017\0374\253R\335\270\277\244\200\010Ss\315\227\277\013.A\036\374;\271?\352\361\013kV\312\263\277m\214c\226\\\350\257?\232\354\\\262\353\364\204\277`o\236\363\021\344\264?(k\2340T~\253\277CM\207\024s\004\215?\326\314\215\0144\242\226\277`\030\014\305\330T\272\277\235\312d\0033d\217?\357\201\334S\002\341\247?\266\272\002\230\010\360\274\277\363\3647\263I\305\253\277\3471\260\230\n\242{?\260\237\377H\326\366\275?\205X\265\225\265\022\232?\317L=\311\361c\226\277,\267\2535\013Y\204?=7=\025\210\267\226\277b*\t\221:\336\245?4\371\006\242FKf?f\341\365K\225\236\253?T`\242\020J\005\251?\302\'+\300\'\362\234?\377\266\362Yv\020\225\277\0078\302\365\266\256\226?\375\370+\0227\276\223?\035\246\013\207KG\270?\242\240\007M\206\031\254?\355\330\322\234\372\203\266?\003\3256\014w/\217\277\321\303\225\335]\203\277\2772|)g\373|\250?Gad]\0308\277?\301\201I5G`\247?\315m\241\2514Y\245?9AX\316C\374\220\277\220\030\357\005\310\377\217?t@\276\370]\256\212?\036D\314t\003\314\244\277\310\210\007\035\255\260\226\277k6Y\376\311\265\262?\n\371\266\014>\363\222\277\244o\234b\235\221\227\277\210\303\235h\237\200\241\277\322UM^\":x\277\010\335x\016\001w\201?g1\021\335\254\307\240?O<.H\371)a?#ykj\222\235\250\277\365\365w\374\0274\241\277\325?@6\023\026\244?p\014\370\332\026\254\200?@U\372<\000\340\225?\017\354\007!\346\367\252\277\000<\303K\266\007\254\277\352zq\004\316a\230\277i\\\262k\020Z\261\277\201fc\377\304`t?\344\033\220M\304\n\243\277\334f\306\243\177\311\241\277\226o\305\333\222\264\205\277\014\227^\035\372I\217?\342\323(\250\252h\302\277\264\225\3106\254\033\255?x\222\202\310R\246\257\277\035\220B\215\361U\252\277AI;-\002Oi?\306\365\rY\212\202W?\'\372\212\0033\301\265?\327-|\032\rP\243\277\332JmjTx\274\277?\222\257\030\237\030\263\277\270!\266\031a\214\236\2778\343\315$\226\225\261\2772\\\200\252\016\341\240?lE7;\265=w\277\267\023\306fu\034-?\376he]\020<\242\277.\340\243\210\311t\264\277\264\001\255i\275\333\255\277\373`h\267s\024^?d|M\0244H\237\277\3118\021\277\023\204\230?\243\274\246c\017\000\213?\3043\030\021vM\217?\222h,\267\326D\222\277:>\223\3104\022\220?E\036\0034\225U\215\277\243\373&K\312\201\221\277\322\031\317\031\223\202\235?\0310S\343\325P\204\277\376\326\276M\274\332\267?\342\327\357?\022\262\200\2777\007X\327\325^\225\277\371m(\365F\025\252\277B\035w~\tq\252\277\023\020\314\356{Y\205?\323\341\227\225\303\321\247\277\014\"\207\326\212\341\262?\0229w\020\235\205\246?\206\016\237c\303N\240\277\344\237r\005f\256s\277\307Vw\253\337\354\200\277\305\327;:?\305\257?\247\366\365g\037\036\250?\257-\357\322q\324\264?3\341GU\355\323\240?\206\245\227\250\253\312r?n\3272\350\315\320\216\277dWu\020~x\255?\201{~8\337\"B\277\220M:W\365t\237\277\351\314\024\316i\252\227\277\264\365\276\236\226\232\240?\275\255bA\177\261\220?~/k\\\233U\202\277\267\212A\306\355:\255\277\034T\034n\010\001\244?\237\351\300\241*\346\225\277\031\214\227X>\303\247\277\366\343\300p\316\323\204\277X\217\230\306A;\261\277\303\340\351\277 \226\254\277u\242\214\310\355\220\275\277m\274\267\006\217y\225\277dg\023\312\351f\300\277\3136M\266\275U\230?\352\227\236\200\\\326\203\277\350O5?MP\271?\335\027\362OvN\243?\323\375S\250\215\360\250?y\214)Z~\216\234\2772D;c\264\231T?#\230\320\206\214 \235\277E\177\263=\t\r\247\277\2715\354\025\320\346\241?\325\233\275B\254M\247?\356\264Q\345B\024\251\277\274\017f\251\3178\234?D>\tL\255G\240?\301\261\236W\203\355V?\367\007\276)\203&\240\277\330\220\332\330m\362\250?\346^`\253\347\317\262\277\347\200u\252\334\357\201\277}\321\\:\3008\243\277\000\013}\371\002+\301\277\001o\332,Onw\277w\020\244\313t\374\223?\236X\327\2279\023\266?\214\366\2201\320\023\252?2\021\303mCC\301?N&\235\277/\271\244\277\331\3323C\006~u\277\376\235I\246\266L\220\277_\010\331\023\237\304\246?O\256t\253\005\275\225?\246\321\027:r\022\227?\214\274b\314\234:S\277t\206oC\235Bz\277\020\017Q\255aZ\222?\243|}\240\\\366\221?x\003>3f\201\256?D+\312\242\317\331\300?\251)*\202\273\021\274?\210\342\356\023\350y\204\277\353\214dV\314,T\277\263\312\327\330\302\260\243\277;c\177\217\357\245\227?h\224h\254\2322\277?\330\246\323\343\307p\242\277{\301rX\330\210\220\277^T\010;+\350\251?\215;\236\373\005\343\260?\254K\303\r\255U\225?Dh\213\r\000G\275\277\355x\023\2556\236\220\277\322\270\021\r\0030q\277\036\243}\330\316\037\253\277\366\021H\007\372\310\222?4\024\320gV\361\265?\315\362\357\257\303\257\234\277yC\273\252\353\212\220?\013\330R\321\325\030\220?5\264\3760\035\355\302?r.q\201\314L\204?\000b87\213\310\245\277\343\331x\3712\266\215\277o\036\357\363\343\315\262\277-GfV&;\247?O\317\n\332g\363\260\277\255ty\272\277\014\260\277\224&T\010}\346\245\277!\025A\250\311\253\245?\216\310\243\227\312\223\266\277M\374\261\370\"I\271?\271<J\031\224\263\263\277Hm\261#\033\300y\277XI\350]wO\237?\334\322\232\317\027\215\264\2777\277\020\214\257\231\242?\256z\313[<\340\207?J\344\006e\013\220\246\277\201\335l\342\233\271\254?/Ml\355\343W\260?H\366qCA\215\221\277\001$J\251~\252\243\277\275\325\001\304\006\333\213\277zI\027\245\216y\251\277\207 k&\340C\243?.\027\306V\354V\236?\025\315,\tG\254\212?\003\315*\002\007\372\207\277\020\361Q\354\256\025\177\277\311\030\340\304hvg?\244948S\333\244\2772\244\226\217\204k\215\277tKU1\312&\246?\327\312.\356\236\351\204?\367\024;\372K}\231?s\320\272\307N\322\213\277\036\323\330b\305\271\220?z\331$)G~\300\277\321\305)dl+\263\277\3575\274\317\"n|?\013\260\"\227H\271\273\277,\364M(;\226\257\277\232\360\260\340#^\226?\213\275\310\253\326\010\232\277"
      }
    }
  }
}
node {
  name: "layer_0_type_0/matrix/read"
  op: "Identity"
  input: "layer_0_type_0/matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@layer_0_type_0/matrix"
      }
    }
  }
}
node {
  name: "layer_0_type_0/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\211\366b\357~\031\346?,d\357\202\3649\340?\277\375w.\344\367\002\300:\0211}9:\366?x\214KlQ7\305?}G\201a\t\230\333\277Y\245-05\353\355?\257\305\201\356\256\030\324?\256\3771\310\235&\352\277\250\223\211\363\235\321\375\277uyK\2762\302\310\277\353\306\006\346I\220\351?<d\2523\265{\343\277\007i\336\0360\371\347?\020\232\037\302\230\032\251\277\325j\255#\030\023\363?\016\325\273\000\257K\344?O\360oRH\257t\277{\205Y!\330\367\357?\260\n\236K\033\243\370?"
      }
    }
  }
}
node {
  name: "layer_0_type_0/bias/read"
  op: "Identity"
  input: "layer_0_type_0/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@layer_0_type_0/bias"
      }
    }
  }
}
node {
  name: "layer_0_type_0/MatMul"
  op: "MatMul"
  input: "Reshape_18"
  input: "layer_0_type_0/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "layer_0_type_0/BiasAdd"
  op: "BiasAdd"
  input: "layer_0_type_0/MatMul"
  input: "layer_0_type_0/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "layer_0_type_0/Tanh"
  op: "Tanh"
  input: "layer_0_type_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "layer_0_type_0/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "layer_0_type_0/Reshape"
  op: "Reshape"
  input: "layer_0_type_0/Tanh"
  input: "layer_0_type_0/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "final_layer_type_0/matrix"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        tensor_content: " {\346Zy.\252?\033;\216cL\335\257?\236MnO\212\202\304?\263\0102Y\\j\275\277A^\331\2774F\320\277\257\372\252Z?\323\240\277\003\004*\t\374\013\305?\022\332.\010\214H\321\277M\263E\250\362\353\265\277\225\214\310\351\264\217\305\277\374V\316S\322\321\317?\343\236\n\203\2220\327?M\221^\326\027S\301\277\037\372+\302\013\251\262\277\2301\304z\260\010\237?\225I\230PL\367\257\277\322\367\007\206l\021\306\277\240\017\324W\205\364\312?xY(O|+\335\277)/d\256c\023\322?"
      }
    }
  }
}
node {
  name: "final_layer_type_0/matrix/read"
  op: "Identity"
  input: "final_layer_type_0/matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@final_layer_type_0/matrix"
      }
    }
  }
}
node {
  name: "final_layer_type_0/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
        }
        double_val: -0.21459206059975372
      }
    }
  }
}
node {
  name: "final_layer_type_0/bias/read"
  op: "Identity"
  input: "final_layer_type_0/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@final_layer_type_0/bias"
      }
    }
  }
}
node {
  name: "final_layer_type_0/MatMul"
  op: "MatMul"
  input: "layer_0_type_0/Reshape"
  input: "final_layer_type_0/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "final_layer_type_0/BiasAdd"
  op: "BiasAdd"
  input: "final_layer_type_0/MatMul"
  input: "final_layer_type_0/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Shape_4"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_18/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_18/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_18/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_18"
  op: "StridedSlice"
  input: "Shape_4"
  input: "strided_slice_18/stack"
  input: "strided_slice_18/stack_1"
  input: "strided_slice_18/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_19/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_19/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_19/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_19"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_19/stack"
  input: "strided_slice_19/stack_1"
  input: "strided_slice_19/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_19/shape"
  op: "Pack"
  input: "strided_slice_18"
  input: "strided_slice_19"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_19"
  op: "Reshape"
  input: "final_layer_type_0/BiasAdd"
  input: "Reshape_19/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_20/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_20/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_20/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_20"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_20/stack"
  input: "strided_slice_20/stack_1"
  input: "strided_slice_20/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "add_1"
  op: "AddV2"
  input: "add_1/x"
  input: "strided_slice_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_21/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_21/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_21/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_21"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_21/stack"
  input: "strided_slice_21/stack_1"
  input: "strided_slice_21/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Slice_4/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Slice_4/begin/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Slice_4/begin"
  op: "Pack"
  input: "Slice_4/begin/0"
  input: "add_1"
  input: "Slice_4/begin/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_4/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_4/size/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_4/size"
  op: "Pack"
  input: "Slice_4/size/0"
  input: "strided_slice_21"
  input: "Slice_4/size/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_4"
  op: "Slice"
  input: "Reshape_14"
  input: "Slice_4/begin"
  input: "Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Reshape_20/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\001\000\000"
      }
    }
  }
}
node {
  name: "Reshape_20"
  op: "Reshape"
  input: "Slice_4"
  input: "Reshape_20/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "layer_0_type_1/matrix"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 320
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\034\234\265W>\247\214?\343\331\363\267`\002\227?F\027\\&*#\266?\017w9e\240A\231?\273\313\215\303\245\266\273?H\365\332\271\327\035\261\277\207p\360\274\320\005\243\277\037\357<^|\273\273?Td\016>\025!\267?OGU\017\360\345\263?\210J\256\rYR\260\277\027!\304\\\354\363\247?\234P\215pj;\251?\344\224\324=\375\275\226?\272\252\216\265\010b\265?\234q:q8G\227\277r\333_Qr\331\264?:e\227\211\323\223\251\277\205\257\336\246\321P[?@I\"\225\"u\231?Q\271\353\2312\366\257?\037L{1\341F\217\277\032H\265%Q\211\250\277-\204\227[\234\304\240\277\273\213\324\335\333\032\232?YV\022pw,a?\324i\350\220a\320\251\277S\3102\034\0148\266\277\237\374\326\023|\367\202?\310\304\267\370\241;\245?\236<K\376K\362\231?=,RF\214\017\245?:v\377\232\032\021A\277\314\016\354g\270\242\241\277>\014>4s6\220\277\357\317\2453\t|\235\277_\226\224\274\354\200\262?(@B \203\010\205\277&\321\034\265\374\357\226?\257\311\353b\241!P\277\253L\370\024c\006\255?\275\357\255\210*\275\233\277\265\322\004R@v\245\277\265*\252=\023\223\251?I~\211\213[\240\247?\2200\323\000|~\246\277K\342\001\300\301V\222\277&\204\244X=\206\266\277L\276u\272\222_\253?\306\233\265c\341\035\303\277/Z\266\020B\203\246\277j8\330\240y\361\177\277\023vC\034\022\357t\277\033v[jY\257j?\205\212q\205\nP\301\277\364\226\277\277\312\327\251?1\212D\224X\232h?\022\350X\020\0343\260\277\3464\273\017\351\227\255?\373*\310V\352=\250?\036\030\253Ea\013\237?\277\357\324|\201\006\244\277\'\\d2Z\221\272\277&JX\364\000(\261?2`)\344\315\247\247?O\222\331m\036\240\275?8\273\376\264\274\270\217?\177\255\033\343\200\244\203?\271\236;\275]\221\243?\027\022\224c-\\\245?\304i\330\030\'\013\207?\213x\336\303w\265\233\277\2670{ROA\245?\2658l\346\031\212\214\277A\354p\315\014Y\227?\231%\034o\340\036\217?%]u\321]\254\242?q\026f\256\234?\251\277\334\325F\266\237|\206?\277P\301r\355w\257\277\356\205\003\035}\231\246?[\002%i\345\214\261?\3151qpL\320\231\277?Ly\236\246\324\241?\237AE\261\370\231\242?l\252\242\2605#\267\277!H\226\247X\364\241?\025\323\007\224\316.\243?\2316\255Fh\377\256\277(\262\006\221\346\345\225?\356\267\0229\312\277\260?\226\207\014\250\037\363\230?U\353.\007\336DZ\277\377\246\263t\375\345\224?U2\032\313$f\267?\0219\336Q\336\013\266\277lc\003\366\357\271\253?\211\027\305\"\263,\271\277#9\342<\300\007\254?9\335\256\371rKy\277YDi\004\212\346\237\277\245Y#*%p\260\277\251\260\022\2716\364\260\277\213L\232V\226\002\235?L\022#\001\247\027\261\277\237(\3512/\306\264\277\'\361\036A\253x\271?O\267#\361\305\361\266?\035x2\377\227U\227?\201\206p\335J\325\225?\264\265\351N\336\211\214?\353\032Dd\240\367\266\277R0!{g\r\245?\334\210.\'\r\341\254?\221\347\246`\034a\206?\257k\013\241\257\274\233\277\002\215\366^\301\013\225?\rS\024\\\326R\226\277a\005\376k\341\355\204?\270gL|1\362\250?\336c\326\177\323F\255\277b3\326.\200\035\245\277\236\020*\214e\227\237\277D99\254;ju\277Y=U\224\256\253\261?s\024\362:\376\216\205?P#C-\016\033\262\277\350\351\360\021\257<z?Oa\370\"]\222\261\277E\312`\236\227\362\235?g\'R|\351\250\264?\'b\271\262N{\271\277\225\177\301\r\010 \264\277\006\001\246\326\311vx\277\374Q\346\014m5\233\277\375d\231)\366\303\220\277\371\272\201K5\270\227?\215\370-\006\272\035\225\277\005\031e\366KS\265?\372\252\325\236\250\027\204?7\262M\266g\204\202\277\266\002A\204u\207\252\277Gh8u\235&\253?dp\005\250Nw\213\277\226\3312D\235w\210?\366*\004\007\331h\206?\276\331M\351\343\201\264?\310=\361^Mw\242\277\350\222mf0:`?)\277G\372\227r\230\277\243\225\352d\201\255\256\277\\&\327\276N\301\232\277\324\035r\212`vt?\315\r\005\034\220\215\215?\367\245N\235D\2340\277\324\346jX\243\371\250\277YM\r\t\351\300\252?\241\344\374s\335\322\201?zqN\303`k\203?\010\247\016S\255\213\264\277\251*\353P9!\265\277\315\n\366\344\232\353\256?\372\3223x2\365~\277\347\314@E\257\021\253\277&\337-\026\320\314\210?|\3229d\034\307\225?\251E\201\222\336\333~?\276W\206\347\204\220z\277GEj\213\213\220\266\277\327\227\261\215]\004\245\277$\304)\"-Yh?\255\2077\311\237\205\221?A/:i\345\237\221\277\034\342s\330\366C\241\277\207$!)\254I\243\2776Q\357X9\035\260\277\346#\266\251\377|\240?\'\311\030\037\215\223\245\277$\002\207\325A_\236\277\241)\301\340\253\272\210?b;\321\345b\275\201\277\215,7\274\315\233<?VG-\337\333\276\256?4~\316\225*O\301?\260\021\357RA\010\247\277\241\266}1 0\252?y\267a\265n\210\241?,O\251\203\322+\244?\320\250\355L\376/\220?,\020\026t(\'\245\277S&[\014J\233\263\277\013B\227\351g\005\252\277\272\000\374\265\363>T?\322\254+\323\014{\267\277>\364\245\256\246\204\254\277a\314\316\257\306B\255? \025\327\212UJ\306?nu\177\2250\237\262?\242\3006%\331b\212?\222\265eg\356\263\236\277\014d~\271\346\204\201?\266\355-\007\201\221\272?P\242!\032\337\004\221?\030{\010r\363\035W\277\324H\220fd\177\224\277\215A\343oe\"\245\277?\351\332k#\021\254?\313\026\360\235D\n\242\277\276\204gF`\361h\277\354\3072^\354b\203\277\317\333@\310\221\241\206?\226\017\345\"\221\261\235\277E\261\255\245\233\330\225?\345,\\\257$\023\267\277\203w\004\005@\364\224\277\316C\325\032\336N\271?,\300{\242\204\216\260\277\375\344z\002A\302\246\277K\374\025\030\337j\240\277%y\003\354A\356\246\277\365\360\207\202\010-\246?<\311\320\177\001B\230?\376y\030\311(\265\242\277#k\3442\236x\230\277\265&5\213\2211\212\277\023s\336\017Uh\226\277\352\343k\307\271\205{?LGd\222 E\264? Sy\322[w\267\277T\237\230:\340\010\232\277,\200z\'{\013\241\277\361\375g\010\374 \277?\204\315\255\305\036\'\260\277\321\306\323l\017\274\244\277`\013\264\355/Z\245\2770\331]\270AA\246\277l)\013\004[\245P\277\000R\210m\000\205\265?\004m\327\246]\310s\277\325y\357\341\327}\234\277&\341ng\210\270\275?\206y\271\342\235\177\252\277\317\036\214\030\205\345m?\034\315\341z\327\264\225?\0044\222\334\302A\207?eT\3514\252\017\233?d\001\320q\265(\210\277X7-d\365\261[?\303r\243\375\177o\220\277\344\337F\352C\035\250?\245\340\002|\222\233\217?9\231\202\355\000\243v?OF\222 \226\247\240\277|(Z\247-6\214\277\222\n\263\327\273\265\224?_\366\255\244\361\374\246\277?I\215ll\001\221?\264l:\372\256\177\261?\034\225\346\237%\204\216?\'P\321\341\253\261\272\277\261\273Ji~\254\223?\226\256^(\200\210\232\277z#\237\204e u\277s\261\024T`\275\245\277\236%\352\247&\312\220\277+\367\016\'\377\3024\277l\306+\027\'\213\233?<\241b\001\217\343\260?\022\027LN\321)\222\277\224\316\245\222\377\267\201?@6U\375n)\255\277\255W\002\371\263\362\254?\323\352\032\'\016\362\222?=\205\222\340\324\343\231?+67\303\213*\256?\335V\273A0\345\234?\007\206Y\210\352\037\240\277\343\0026o\017Y\253?#\343hz\231p\267\27720\034\253\260\301\225\277d\003\233\010\021\213\256?\300\303\223Wy]\247\277\247\3348h\001\364\246?C\365R\224W\315\262\277\217\342\234\362&\236\255\277\332\357\376Ln\300v\277\243@\234\270\227\315\236?\021\307\325B\026\001\235?d\315/\035\312\305\261?\265\244\373\0228\206\247?j\217+\217;\355\267?\344]pm\266\027\222?\2310\023\304\272]\216?\226\030n@\315n\232?@-\207\366U\356\264\277\375Y\372\013\037<\216?2\227=\t\267\023\252\277uz?\257\306\241\270?\003\t1\234\035\243\210?\314/C\374\356\326\255?s\313~\240\257M\236?\016\217\360\312\003\030\242\277\267|e\234\001u\251\277\375\321X\177\331\\\262?\311\3641\262G?\260\277\337\247M\202{\303\221\277@\215F\245\020\205U\277\003rBH\2139\246?my\0033\3342s\277\233&\340k\362\261\275\277\321$\265\271\3300c\277=[\031\315\305\263\301\277\210x:\230Z\245\240?Pd\257r\314\221\304?e\035[\031\352)\253?\032\226\215\300w.\254\277B\250\373[\030\344\242\277\201\n\001.\253nj?\242\000\322\313s\330\244?\267z\2216\020I\253\277\303G\267\341P\214\240\277F\263\032\2065\243\267?\201\033J\272A\231u?\001\304G\024\313\216\223\277d\330\265\200\366/\243\277\034RK\331\205i\277\277\352\247\227\247\032A\255?\260\253YZa\271\201?;\233\370e\210\227\242?0!t\261\014\340\262\277 \2236C\315W\251?J\020B\244\010\207\222?\213\031\203\352at\261\277\025g\213`\345\n\220\277\374\301\263y\037\362\272\277/\233\210\003\201^b\277i\316\360\270\026x\262?U\377\214\366\375\246\254\277t\232\243\264\343>\212\277\271Z\036P\007\372\251\277\007f\027@\366l\265?\036K\372\300o\242\265\277\301N\022T\307\221\242?\246*\2303\255_\247\277\271.Ct\377\252\257\277S\177\355\236j\257\256?\231\220dA;\217\234\277\273\377\315\272\361d\221?\303\t\234\034\363k\251?7\311]B>O\266\277<<R;2\n\240?\037\3225\205\270\020^\277\356\224-\322\025\201\227?M\\\262z\314\353\260?\027\363\2735\256\263\230\277\256\316\244\024\376\035\241\277\216$\253\236\030V\246?JX\342}\321-\276\277;CWT\331\026\235?\367\244P$\302.\266?\244\2761\253\371\013\261?\243n\343t?\360\242\277\203\033X\214ow\267?\372\230\245\241pdn?\234\377>\024k.\224?\277@\330o\353\230\201\277\243\221\2427b\277j?\265,w\3739D|?\305\3071\222\347\323\247?\221\212\321\035\"q\273\277\002\251\312W,1\266\2775\370f\227^\315\226?\024\351\273\003:/\251\277\204+#I\344~|?\263\345z\217X,\244?\241\0135\235\242\251t\277\276]\241c\361P\237\277\371\343I\334\020~\252?\265S\247\033V\360\253\277_y\032\371\374\262\243?7^L]\207n\262?J\300\262<\327\312\232\277q\002O\341*e\240?\261\351\003\216w\200\275\277\363\307\004~/\364\203\277B\247T\317\033\200\210\277\345\375\320]\326\343\204\277Y\034\227&\232\356\252?\253T\322y\244\203\233?x\210\361\211\003\271\222\277\205}*\203<H\262\277+\004\255\220\351t\262\277\346tn\365\360]\241?\206\n \204\3373\263?\022{moY\177\254?Md>\326\334\332\271\277t\030\330z\222>\253\277bNA+\202\207\207\277A\321\213\224.^\241\277\376\313\236\340f\035\307?\376\334S\016E\003\227\277R\326\tH1j\254?\354\001|>\335\342\200\2775Y o\324\362\263?\005\335\007\034\\\022g\277Q\362\320\352\035\022\250\277\242\265[k\020pu\277 \372VXw\374\236?\020@\336\371\365S\242\277U\301z\002(q\211?d^<4\246D\300\277V&\327\204\365\332\242?\3648D+A\250\261\277\330\263\002D:u\242?\027\261\310Z0\332\231\277\277\276>p\030r\224?\305\3723?\234\251\267\277/\370\345\001w\302\223?\360\307Y\006\334]\231\277\316C\315\351\322\275\242\277\001\032?|\363%\261\277S\374\025O|;\242\277\321\323%\212\214\331\214\277\351\313\233\320\311\336\235?Ql\000\017\235+\241\277\324~\236\300;\000\210\277Um\014\2038\234\227\277\343N\340\030\312\274\223?w\261\261P\221\021\245\277\236\256\263%v\030\264?\020Q{\375\345\362\243\277\0034\310\330\337\031\301\277X\302\223r\025\034\244\277\365\260F\255\311\"\222\277[\314\362C\375\207f?~nU\233.\201p?\267f\341\367q\227\260\277\276I\301\314\362\231\202?\374\243\0213]\035\211?\255\013\r\010<M\243\277q\233\006P\3760^?\202\367WV\372A\234\277&JOv\321\357s\277\227\216\325\221+\360\256?h\022C\203\320\323\222\277\202\261L\315\262\223\245?\311A\341%\376\362\212?\177S\220\252\237\256\300\277\354\037\207\241\241\\\233?C\340\252i*?\200?H}\005y\232@j?n\023 \314Vh\233\277G\234\0131\206\357\221?\373[\3110\206\013\221\277\036\232L\257$K\270\277\033\270\017:T\005\231?\355\377\206&\254\367\240\2777\235Z\305\010(\260?]\254\334e\032K\235\277\216\257\017\177\231\256\204\277\220\255w\377\320\326\256\277SP\242h\316\324\266\277\335\203)\244\020)\256?\353d\222\034a\212\300\277\360]\357\030\3009\261?\370Z\216\341\247\010\240\277\311N:7uZ\230?:\272\274\035\366\266\265\277\201\366\261\353@J\202\277R\363\027T\353\327v\277\216\313v\003wP\243?\252\216\202\361\225[\262\277\337E\230\002\"\220\254\277\222\327\333N\342\351\243\277\330r\341.\314\360\240?L\217T\276\326\317r?\240f!\215\343}\273\277y\372\264u\'\307\270?\207\033h\020\017|\257\277X\263V\343\007\354\253?\036%\357\365\242\325\221?\221\212Q\230\320d\222\2776U\251\257_\237\226?\235p&@\n\232\201\277\022\246\317+N\233l\277\336wY\217\030\035\232?\332vH\206\032\306\266\277\n\254\266\363V\212\233\277$\304\250m\347a\222\277x\2161\334\323\275\225\277\034\2344\025\310\225\223\277\210\275\027>\245\361\272\277\031\177*\303X*\240?\207?\025\315n\373\203\277[2\354\027\336\207\243\277I\311\257Y\233\214\257\277m\032\3374\032\312\224?\347\314\230\022\r\353\221?\316\211\005\211\345\245\233\277:w\022\265j\004\303\277\267\333\262\266Q\004\224\277p,\265\235I\224\252\277Y/\303FsN\256?2@t9\211\330\262?<6\207=\310\305\265\277\242\021\340\2355\026\246?\220\361\030;/\361\227\277\236\263\023\254>\177x?\223]\310\243\264\313\246?\352\351BO\255\367\272?\223\0305\273r.\230?\247\305\177O-\220{?\253\007\352\235\3240\255?\025\254\354_\337\030\230?\325\302Y\202\206\014\200?\333\251\223Y\362e\260\277\207\3473\373\346\220\200?,I`\367dt\207\277\267\356\037&\266\371\240\277\337\261\276r}\026\234\277\262\314+^\214M\261?p\200\210@\366#\233\277o/\324g<}\302?\034\347\016(\264\245\272?\324.\320\226\211l\243\277\233\023\210\232f\306\206\277\002\252\325\201\375K\256?\342\260\3662\305\200\265?O\031\205\360gQ\274\277\325;\330[\034\275\242\277\307\266W5Sd\253?\275\020v\367\3146\250\277\005E\'\020\277^\225?\371\277\264\217NP\252?\037\214\200\327\335\026\220?\177\236\360n\034\n\223?\001\r\274*o\301\244\277\317\222\305\264\017\354\261\277-\210b^\035\302\262?F&gw(\226\235\277\022\010\0204H\236\233\277\320\217\017\205\262E+?\3348\261\337\026\030}?\224\272\310V\250w\255\277\311\335KLy}\235?x\025\316\220\305\202\267\277\r\271\216q\026\204\222\277\232O~K\221\226\237?\274`\216\302\342s\240\277:\035\010\306\203P\275\277\352:\212}\273`\244\277e\303K\t\320\361\201\277\207\301{\323\013\005\243?ivD\026K\343\252?\234\210\2250r\217\235\277q\221\371w\016Z\244\277b\216\220\335\241>h\277\354\354\350\342\253!\266?K\272\3317\367\305\217\277c\033q\364\367\236\237\277\n\207\013\2404X\254?!\376~j\354\036\247?\271\237\031%\373M\237?\260\027W\014\037l\260?\222i\310,}\275\244?4\266Z\236B#\234\277!\322\262\233\312j\263\277\236\317\030\225m\205\244\277\366-\246\360jz>\277\003\371$\305\nP\200\277k\377\"\375O$$?\360,\033\371z\037\232\277\r\3311\362\307n\266\277\021\002\212S^H\227\277\010\237\205u\027\313\255?\371\t\275O\262\227\252?H\220\203\325&\367\247?!\2459|\030\205\274?l\026\342\257~\230\200?$\355\000(B\355\246?.\230\374\010X\363\301\277\213J\302\201R\206\232\277\206Y\255\2472\212\300?\214\352~\255\016\246\242?F\353g\363\322T\233?\017\220\327\244{Or\277\254\326\332k\236\200m?v_>\001O\336\223\277Q\352\215q\202\207\250\277|8\243\364sV\241?\363\\\252iT\200\203\277\374\276\032a\320\036\265\277v\207k| \220\242?\362.\221\361x\020\243\277S\210P:\230\002\224?7\357\261X\345\267\253?E=\213-! \267\277\211[N\322F\356\237\277\265d9s\311b\240?\000\206\204\310\316\000\223?\r\377\023\016\210\327\215\277\223q<\343\\I\243\277\305\226\263\274\253\023\272\277\260\206Km\010-\246?\226UI\362\000\356\240\277f\022\257X7N\252\277\324\374\225\3273X\247?\216\346M\377#\004\247?e\255\023\203\337\312\242?\345\242\330\344\217A\247?P\212,.\343\307h?\236\210!<\212\375\254?\3753\233\036\225N\223\277:\3109\000\342\311\234\277\\L\371Z\307!\246\277\263\177\377-s\003p?\303#\263U0\177\253?\230\t\216\006d\337\257\277\343\303\331`g%\266\277\24448\344\233)\202?\020)\271\037\022\333\221\277\233\343\210\312\257\231\226\277\026[*\355\320-\206?|\361\321+P\204\201\277\366\251\255\363b\354\260?\027[\3371\360\245\221?\375&=\311L]\240\277a\t`/\304\207\226?\271E\366[\221_\261?4rm\206?G\240\277o\360C#<9\267?\365\177\023\371Y\335\233?\266\225\\\233.\301\206\277\213K\311\016\206P\223?\343\'\337$I\226\263?\001\301\240-\362\022P?\332.\274\230o\267b\277\327 \336\321r\367\203?\002\240\2105\360\022\251?\231\346\342%\365[r?\247\335S\370}\304\177?D\302\031\322Z\357\201\277#\237\221\274|U\247?!\361U\211\367A\260\277[\234\n\313\361t\227\277\255\255c\316\320\316\224?_\264\027\263\227\311\200\277\223*\300\2308\363v?83\360M\023v\262\277\362\230[\332\030^\200?\323\311J R\325\260\277\254\007\034\017\274\022\226\277\000\034\231\233\242%\241?t\255\334\277\227z\222\277\374\253%\346]\236\274?\241;L\250]A\255?b>^\262\274x\263\277\034\032\365\001\276\036\247?\2029#N\303!\271?\253\266\000\375U\246\260\277\004Y\346?g9\236?\357\305\211\307\031\016\236\277\000&\350\254\\A\234?\366\221h\t\346\253\213\277\262\312\356}\306T\213\277\242\r\020\253jO\234?T\312\025\034\022\264g\277c_[\002\222\304\216?\342X\r\320\361s}?\242l\223\263k\033\221\277D\244\370\300\224<\252\277\033\024\216\376\365m\244\277\240\315\014\335Fw\243\277\331\341\256\276\262\275z\277\0216\247\234h\352\272\277\354\036\356\234\224)\243?w\346\242\362}\214\271\277j\2729\033\226t\240?\336\264\264\267\tS\222?\036\305\037\330\300\007k\277\243!\353vkV\215\277\314K\025\231Q\377\234? \333\250?\303\313\226?k\247\316w\260\365\236?rfL|\333\253\275\277u8F\353\007\366\217?\337\274\235\216:\005\246\277\027}\307\002\225\306\241?$\356\205\020\264\017\261?m\234\230\r\363\344\261?\220\023V\375\235,\302\277J\253o\240\316X\234\277\346\224\3441\341\241\214?\331G\022\306}\002\216\277(O\025\034\247E\227\277\372\t2\224\373v\271\277(\002\r!\0075\221?\334urx1|\244\277qQ\002\260\323G\216\277\261\262Eb\n\274\251?X\000\367Z95\260?\r\360\307\372y\360\241\277=\272\021\231\3667\223\277\206\3511\362\277\241\266\277<\317p\006-\335\247\277zd\324\307U?\222?M8Qw\364\255\234\277\372\210z\007!j\247\277\034\346\t\010s\265\252?\255\030v\3629\201\271\277j\244~4^\005\265?N,\236p\202\002\261?k\253?\244\202r\267?\204\217\027\004\223\177\203\277\375\343\301^\206\t\207?\276\001!U<^\220\277)r\207\321v\345\220\2775\241Qg\323x\252?\244\227h\365\245KJ\277\223\254\317\006\216\234\242\277\372\216\264d\r\333\240\277\260\310r!\304c\300?\236qB\034\277\367\227?\334N\222\232\365\232\240?\032s\211\255\313\316\230?f\344\n\005\357\226\261\277\305\314\030\242\252\205\254?\271\021\374\000\002\274\246?E\311\312=\177\326\213\277/A\221Z\324\342\255\277s\263\253C\277\032\250\277T1Rs\\+q?\276\207\014Pv\377\256?\007\310 \242\310\'\300?{\300\375\201\322Bz\277I\236m6Gn\273?\365\206\360v\277\353\240?\327:\265\255&e\272?J\377;\\M8\224\277\037\352\006\305\n\210\254\277\320R<e\343\013\255\277\2243x\334\202!\256?\021\260\214F\017\245\223?\325\007em\214w\246\277\024C\243\251\255\247\245\277\026@\265\214\235\256\230\277\217\274y\270N\317\245\277\375\037$\257Q\023\244\277\313BM\352te\257?\224\253O\200\226\343\250?F\354\251!\330\363\221\277\307>\231\231\363\263\215\277\202\255\361\027\026\240\263\277\310\315\36755\330O\277G\262E\271S\033\260?\271\215#0E\013\303?\024\277\257s\256\276\252\277-\271\323\325\016\353\222\277o\361-\252\237\356\253?\007u\242z\3060\200\277\001.\2040g\200\242?\3377\322\305dd}\277&#\253\246\321\344\270\277`j\247\305\370\231\254\277\212\374\322\232\271W\267?\020|\006\223\263R\213\277k\013\203^\327\270\233?+OjO\246\032\247\277r\327\256\26774\304?=\020\225\230\206)\257?\362\240\027\205\323\346\264?\247,b\246\201g\266?\322\373 \367\037K\224\277\276\352\343\372\226)\232?\027\231\376\311\2707\240\277\020\321\035z\303:\227?\250yX?\327,x?w\320\274\007\273\320\255\277\253\337L1\355\310\277\277\007\215Hg\344\375w?\377|T&\\\223\220\277\2228W^9\310\252\277\333\366\260\377\376\334\224\277\3325\254\n\224\316\225\277\226t\341\365\'\360a\277\356G%8L\221`?:\307\376R\024\n\226\277\257Vd7\325\354\213?z\300\245\235\256U\232\277N{\021HdW\244\277\251\205\351\267\313\251\250\277\276\253\232\234\t\035\242?\266\'\226\014\276\352\233\277b\"\362o\355\366\243?m\214\242\344\307\367\231?u\376\342\027\313\233\220\277U\221\314\245s\026\201?\237\222\351,\234\026\270\277\361>\325\356T`\247?\347\241\371\345\307\260s\277\367Ak\003\\\235\216\277fg\r\354\271}\243\277W\331\005\317E\251\242?\021\362\204\202W\244\271?z[\007\234Hbc\277\235Z\204\342\234\335\226\277)\032\202\230G\305\260?\324\243\202\364\340u\207?9\260\265\214\000\267\250\277\243o9\307\367}\300\277\204\177\307\272U\030\222?\266\333\330r-\013\260\2771\016\266\374\352\024\247?f\234L\301\360\005\237?\036\017\266\326\277\036\250\277iks\035\226s}\277hA\365=2\247x\277\026\343\273\364\210\225\243?\032\"\324\234F\007\251\277\220\315\330\202\372\001\220?_\334zL\265\033\217?M\2539\0175\262\261\277\344@\335\270!T\221\277\302\202\354B\235\376\236?4\2601J\347\035\236\277\261\313\272\371\272\177\235?fT\356\362\"\260\262\277j&\262X\000\250\240?\302\204\002\251Tk\252?t\006\254dP}\265?P\336\236\275\327W\220\277\030\007\025\301\001\004\250?\270\333\3330r\222\261\277 \036T\2274\002\267?\036z*CY\314\233\277\256/\265P*\357\241?\321Z\331Y\251y\230?Ye\214\342\243)\264?[\236\010,1U\230?\"\213\315\350\267!\225?\272\017\347\222\266\013\251?\030\035\316;e\214\241\277?\224\274Dv)\257\277A\004w\304,\301\245?swb\023\326P\245\277\275\t\\3ah\223?\331\361BX\273\263\262?t\240;\025\335\207\254\277\027\007\177k\202F\233\277oI\0229S\t\236?\336\037\320y91\242?c\rM?\325\023\260\277\260\021}\034\000J\240?o\365\360\225\205\244\301?)\034\2511\262i\271\277\375\3309\357\342F\244\277\347in\375\031\n\231\277H]\013\007$Q\276?n\303\223\020\240-\216\277T\010y\373\"\274z\277\203\273U\244\236\200\230\277V\243\254\231{\027\222\277\371v\020[\020i\241\277f\276\317\343\246Y\236\277\357)\253\344\373\374\254?Y\305\263)\370\361\242\277\221\207\025\267\031\245f?\207\370\213g\312\332\303?7\345\363\"\023\016\277?q\203\365\363_\324\234?\341\201\n\355\225_\245\277\017\215\035Cv\001\206\277\237A(\177\021\300\276?\3215j\302\005\342\261\277@I\302UOE\253?\210yL\2544-\243\277\311\\Gh\"\372\203?\351}y\200tj\273\277)\3337\321\221\031\262\277\346\365\2748F\274\240\277\212\246Rq4\314\300?\307\374\364\362\323%T?\251n\003m\314\223\201\277\023\000\304\374Dh\254\277\237\350[\241\370B\203\277\372:\205\245\222\203\270?Dyk~Rc\263?f]T\026\021\325\246\277u\014\303\300\233\222\206\277\214\315N\010%/\262?\211\276\306\"Phq?K\265\004\377\017o\242?\r\265\r\226\301\272\240?)\"\336\205\231\336\263\277$\010\211\005o\273\240\277$\006\353VvP\223?\320XTs.\035\264?\r\224RD\346\362\240?Q\207-=\262A\222\277\201\000xp\360\205\243?\376:\347\235U\376\215?F\253\24200\240Q\277\232\n\307\005\010\375\270\277>\231\335\016Z5\233?\347\334\263\332\033\353\244\277C\302\336!\233\271~\277R\271M\237Q\005\253?3\233\244\364\361\224\225\277\235\017s.j5\240\277u\316\216\025\n\372\271\277\007\207\275\022\252\022\306?\254\014\034\362\0034\227\277\013\313\3235\226~\204?0\264\020\330\263@\261?o\034I0/\021\223\277|\251g\204}\355\224?\323=o\030\3376\253\277\236\216\177\374[\037\254\277C\362\301H\310c\205?%\004\301\211\020\344\237?\214\306\270O\236\004\264\277\211j\206\341\360\203\230\277\347\311\355\267\347 \211\2773\300\345\342m\260\255?\323t\351\362O\213\241?\027\324\r\302\261v\241?\271\177K\243\2618\222\277\2520\310(\342\336\261\277&\252`\241\334m\242?v\376\026F\203>\220?\014\327\216|\017\223{?|\3245\n)\355\247?\360\216#\026\342\261\231\277\177\324L\353\240\214\240\277\305\364`\310\361b\270\277\315o}C\211\304\225?\006=\366P\307\270\246?\320\002\376\362\311^\244\277b\344\211\263 /\250?\255\3652+}\251x?\250\215\005Z\257\353\270?\004\243\375y]\362\225?p\326@\221\001\270\200\277\270q\311\264\026\035\224\277\310\345\210T\262\034\262?<\201\n\316\307\300\233\277\211\362!l\374f}?\036\352\220b0\035\266?\362\250^]a\347q?\330a\322N@\226\265\277\350\013\016\314\335%x?\006\026w\214\364v;\277\330\002\226x\014S\201\277Qn\341Jju\270?\034\267\311R\033\370\263?\275\022\004I\002H\264?\\#\350V\033\224\256?\200\321\034\246v\\\222\277\236`Np\245$\210?bX\303~\303\231\227\277\024\221\356\352_z\263?\\\242\024\32004s\277X\330\025\r\335\254\260\277! W\356k:\263\277\001*\344Y\252\230\254\277\201G\227\207`\036d?\355\224b\000\037\375\251\277\350\202\013\375\256\006\260\277\305\221\273S\367\271\202\277%\000\240\343M\025m?\302\032c\2615\327\225?^\"\033\213\006M\256\277\000\235\2330\347\271\237?\246kXE\341\353\262?\310tw\302\272X\226\277S\242\246\020\220\261\224?=\021~~<\375\263?|\034\240\031\214#\224\277\3028\270\355\363\362\244?\006\307\373Rbt\261\277lV\223\310\031\334\207\277\354\313^\276u_y\277\236\230\307\214ee\252\277\357\037\335\364\277\313\245\277w\273\320\312i\377\244?\224\262\237~\204\242\241?o\254\020C\336c\247?\031\227\327\000\251\227p\2773.\220\326\270\366\270?\tq\270\304&\035l?@\316=\375\342\'\222\277:\236\270\267 \225\240?\243\026(\201T\343\266\277\371i,\367[\302\214?\2333\3121$\305\201\277@\277\307\314k\252\274?\257\3247\371\3316\275?\205saV\204d\251?h\301\020-lc\220\277[\033\241\325wZ\251?\327\370\306\300\263\271\224\277\320F3\026\357\354\260?\350j\241wX\030\237?\234\020\016\277\234\211\240\277\251\340\274\007\312\023\240\277,\250b%w[\260?Q,\251\204\202\267\260\277y\006\331\222\014e\273\277\0103r8\'Q_\277\223\366\344\315\023e\212\277\264\331\343\213BB\204\277\331\343\227:\373\242\254?:\316o\262\260\030\205?\324X3\255ST\237?r?\007\206$\301\302?\265\356\207 \006#\200\277\360\371D\302\371\327\262\277\035\037L\2458N\240\277\0321\234\244v\362K?\220\214S\302-\344\277\277\241\303\036\213\213\303\273?\370\200\365\246F\352\225\277%\317\010b\237Y\251\2772\024\260P\202)\205?2\013ZA\240\367]\277\334\373\314\354-\302s?qv\327\013ug\234?\325\360V\214es\253?\333\005\355\253\033\362\270\277\346,u\346\222\016\252\277\007H!\357%t\237?m\266\225\305\004\207\247\277\377\265\035\272\212\006q?\201\235\247\237&\022\252?H\346\260\271\\4\217?\3118=?\335\363\261?\"\\\037\230,\361\267\277\272\3152\351:\366\270?Av\203\177\243\225\237?x\'\234<F\337\200?\236\356\305\302j\210\243?\231\246\241\177\313\340\205?\177\030\352\245G\254\255\2773>\210\2442\346\244\277\273\034m\241F\021\241?D\272\265\343\220\005\246\277\314\204\362Y\237\333\260?2t\003\013+\250\216\277(v\000=%\210u?\000g\035\276\256\340\231\277:\000V\334\310\241\264\277\204\354\330\264\023\230a\277m\260\034p\200\343\264?\367\177\311\202\315\357\300\277h\245\222\353kx\256\277L\320(nD\330\240\277\245do\324^3\206?\316N\375ln~\214?\036\223s\217\376\301\262\277\023\324`\n\023\373o?,C;V\375\331\246?\342~\020|\265\302\261?A\273]\304\211\212\263\277\271\261\344\266\366\201\260?\301Hc\261\2238\247\277G_\227-\232V\260\277\340#\005?\334\232\232\277\247Y\302Z8\243\230?\343^\305n\343\256\273\277K\210\374\214\374\030\203?\202E\022M\231\006\216?RF\213A\r\275\234?.00;L~\263\277)\301\236\'q\025\253\277\263,N\303W\252\304\277\304\'\364f\030\002\213\277\247\022\027\376T=\244?\304~\343~\000\\\217?0\200\034\014f\344\247?m\233\036\036\357\244\254?!XDjtK\241\277\272\302/X\"\336l?\013\202\321Q\277g\233\277\377\370\230\021\2472\244\277<mw\021\031\000\264?\333{\200\360\253\276\263?n\252\203\272\013:\243\277\222\017t\354\261&m\277\202\355\022#6\344\226\277M\311\177\310bme?4\305<\310>\254\254?O\344\\8d\004\266\277\233\234\036\301\364\344Z?N\010\314\317\215t\233\277I\001\026\274\270\002\264?\233\\\337\305sN\201?\005\250%\217Z\302\211?\321Bz\00724\220\277\207TT\303)\340\272?\250\371\360\302\300\246\217\277\351,\344\220\0005\260\277Y\254\2775\327\301\274?\370\216\360e\365>\247\277\331;\201jK|\261?\343\025\024x\321\262\227?k\235\265+\355Ov?\205\022j\357\2677\262?(\025(\320s\204\247?\346\270\355\245\260\014\251?$\177\373\203\215[\241?>\'k\252\177V\243\277E|\245\244\270s\202?tb8^\t\017\221\277\240\005\024Fol\212\277\277O\336\0222\177\272?P3\025\327\335*\260\277\213\345\026\367\010q\206?\033\037\221exz\252\277\232\031}\000;\252\254?!f\024\365{8\216\277\016\230/\304}H\214\277\207c\350\356\334\036\247?\037\"*\2016\332\257\277\317\361\335w6\025\245\277\264%\001\206\370\311\254\277\361x\332\203\027a\210?\355\347\3701\325z\243?\035\237@\306Pz\233?-\376\307\273\245\263\276\277l[\325\240E\237\242?\234\332_\333\327Q\245\277\314\000\016\337/\307\204?\274r8\254D5\240?\344a/T\217\225\267\277\205\000\034B3w\243?)\305\343N \350\260?\201|!\366j\366\271\277Ov\264\026\214\240\261?\223j\221\352\362\224\265\277g\030J\204\2066w\277\313\261i\351\361z\256\277Y\314\033=\037s\301?\352\026F\255\266W\277?\th\201/\254\210\264?\211\361X\260\355\004\270\277}\265\226&\344$\263\277\373\300-\256\242\316\242\277-\320\310\3418\211\177?\221zo\001X\212\221?\223\213\321@\374\260\270?\243\226?\301\344\302\201\277=j\212\330r\020\241?\307\030\345(/\241\212?MIk\354NJ\263?6\365g\315\347\264\240?x\255\345jCE\205\277b\232\037/\232P\240\277\240\3079\0176\007\261?F3U%\300P\242\277\363`\355\363>\230\267\277\324\3058\024\246R|?\314a\320\351\204\302\244\2770\t\365\264q\352\265?\000\217\275\340\014:\263?\277.=\347!\232\260?KY\324px^\255?j\335=\303v\037\240?\253Zw$O\207\246?\324\216!+\020\250\247?h&\263\2140b\237?]r\210\317\026\243\232?\352r\001\017\177R\240?X\263\325\020]\'\212?!Kr\014\2646\221\277\223\241m\333$J\271?\216\002l\356\242\234\233\277*\013\260\2723\342\267?\340\236oLI\034\263\277&R9\311o\370\305?$\367_\312\330\036\243\277\322\036f\350\033\271\244?j\243\325\220z\300\262\277\272=\020Z\321\r_\277\033)\252.\212G\206?x\251Q\340w\311\255\277\030\216\210\275\353\310\256?s9\334\355\234\n\272\277\277\r\207U_\236A?3!\014\211\031k\206?\0145\375<\225\031\231\277\005 \003\234\212\256\264\277I_\275\230\221\227\224?Q\312`M\016Y\242?\275\213\332a\334\262\241?\240\372\314\014`!\262?\260`]}Y\272z?U\352\260\022bC\213\277\361\314iVC~\260\277U\324\214\206\312Nt\277\317m\213\212\375T{\277\376_S\014\263\203\243?\356\311.\027;\230\230?w}\3746\275v\241\277\201\245\245\342\224\'\245?\235$\331WE\362\273?dG\003}\354r\254?k\321vq\177<\265\277\320\246:]\374\260\204\2776F\347\025`\256\244\277O\251\344\240\302\354\231\277\036_[rC\202\215\277\236`h\250 \t}?C\201P\365\204\244\210?80\216m}\013\235?\017/\267R.\360\240?w\035\316C\235\364\267?\350\000\276\340\2017~\277%\217GR\n\346\216\277b\330\366\372\275\354\272?\0362\236\230\245#\302\277\260#9\257\0106\220\277m\276\351\362Ik\256?\315]\376@\266\231w?\350y#\231R\037\241\277\253\335\260\345#\320\241?\377bzr\226c\271\277\032\234\347\262\204\357\225\277~G\221\346\350\235\236\277^I4\013\240\005e?\245\347\033\030\001\332\245\277\273\255i\037\024U\236\2771\304\325]cY\224\277g\370\024|\352\017\250\277[\274\306\264]\\\274\277\206LW\311?@\210?mG\220\240@\202\260?\265\241\271w\373\221\247?,\001Dd]Ho?e\t\005\330\313\223{\277\340}\r\346\021p\243?\00122;a\374\240\277\270\240;h\'Sw\277\367ie\326\216\033\264\277\371\357/\240\372,\205\277\250\03747\010\315\217?.f\275\177\244(\240?<\247\037\346\236\242\205\277\352\314\247\271<\312\253\277\177\317\233U\003\177\260\277iYK \366je?6\007\214\207W7\201?\315\207=PK\227\255?\363^\274\020\237\000\232\2771\237\310\343\373\216\267?\300\007A \353\255\261\277\261\032kl\332L\255?mV\303r\247\206\210?M\355P\274\004\200\267?\325\217I\251\014\371\241?\004\0140\305k\000\177?QK\237\031A\343\257\277\314[l\244\336\350\265\277\243\255~\360\3160\261\277\276z\256\023e\252u\277#\277x+\306\020\201\277\0318\304\205kw\220\277o\351\250\310\203\323\205?\347H\255\235\344\216\253\277\261\331\270\2419\242\275\277T\341\024\361\262\312\247\277R\224\201x\t\347\246?v\214)\351>\240\233?\312\321\341\022`\204\240\277\273V\n\267\317\277~?F\271\354j\334\036\225\277k\237\267\367\006P\265?m\027PU\230\033\242\277\177\2118\220\330\025\223\277oT%\230\202\317\254\2774Mj\210\366*\251\277\026\207\345yN\251s\277\222=\035\200\227\226\220?\262P/\350\200\036\300\277\247\332\"b@Xw?\316w\300\001Q\001\257\277\341]a\257@\271\236?\233\261\245\364\'\370\214?=\220\004\342s\255\215\277q\220l\351\211\217d?\252j\275\304#_\260?\247,\264\203\3153\255?\025\331\032#J\371\226\2777\231\224\221\to\247?\316\013\t\371k\360\264?\264a\036\213T\350\256\277I\372\'5k\006\240?:MpZ\367O\267?\276H\311\214\305b\266\277\365\357\240Q\227i\225\277\354\305\213\376\377\022\250?k\332q\320]\313\207?\035\032^\"\233\326k\277o\273t\266\366)\253\277\345Ll*\210\013\253\277\273\363\222\2166\n\226?\372`\343#$U\264\277\251\341\313\360\027\t\257\277\255\021\312l=\377\245\277\331\337\257tp\306\240?-\177^\251\\\254\267\277-2\0353&\270s\277\000\366{^\2460\223\277\340\031e/\242c\240?b\323\253U\033\006~\277\001\033XE\353\326{?tTP\235\370\003\256?v\355+}Ur\202\277\325T\321%\377W\202?\275\211\334b\227g\270\277\242\325\300f+\023q?\263\306\351\033\257w\255\277\320^\222m\213\210\237\277\303\321\257\230\2079\263\277\213J\037\007;\322\203?\311\361\213\032\277\321\244?\324\231nW\241?\240?\034\375\2130\246L\241\277\023)\236\003x\231\263\277\363Jc\221\370\335\212\277c\356\214\363?\375\236?h\024uE\212i\234\277b\022\024\331\036u\205\277H\026\321\206_\250\244\277\355\005\355\321F\224\234\277\177\320-\226\266\200\301\277}\216\"\350\255\230\245?\201\027\014/\266\253\264?\217<|\333?\360\203\277\001\342\233m\224\311\257\277\023\261\326\002\261\230\241?\275n\r\324jn\254\277}H\020\244\311\274\222?Ll\005~x\030\245\277Q\207\374 \214\273\241\277Y\251\315\002\034\340\217?\002\340\352\230\264u\266?\234\214\354\373\366\271\215\277ZF2\307\275\313\205\277\302\230]\232X|\270?c\367\030q<Go\277j\313a\263\271\370\207?\307\261\301\253(\016\260?\031\221\337!\351}\256\277L\177\324F[\333d\277\225\004_\246\330\373\205?\316\365\257K\212yu?\234\313\216@\254\225\246?7nGQ\213)\236?=\365\003\326\356s\253?_\264,\211od\233?l\246%\221\200\351\223\277\207\025\020\370\275\250\237?\345\374\t-\312\211\224?I<\204E\2613{\277\335S)\031\243\254\242?\324\362\325lO\222\243\277\224\237{\355\275E\204\277\272u\306\335\374w\224?\362\326\276\336\003\226\247?i\345\322\361@\323\216?&\257\037\rC\004\264?>\036\"\270@L\261?<\360f\r\351\217\256?I\t\224\020.Z\274\277\217\3642\332\\j\256?,\226s\226\233Z\241\277\236\211\251\356\207Zv\277H\266\325f\361[]?^\260\230dr\366\246?\311\026riK\200\241??\377\013\212\232\341\245\277\326\370r\247:\304\262\277\201\2167r\255\253\215\277\207M\0036\236\201\260\277\254\322\263\217\370\217\240?\323\212\026\031q\265\254?\207F\346\213A\030\233\277o\306\224\356\000\024\264\277\212@7;+\203\245\277\204\265\271\376\010\350\254\277gn+=J\235{\277\233ogqU4\224?\017\371\017\352\317Y\260\277\255\243A\010_}\270\277. \264\002\223pU?\032O!\253\306\341\255\277\227\360\013B4\355\224\277q\016}\014\331\016w?\337op\033\274\261\207?\270P\2521FS\272\277?\322\227}T\rj\277\207\363p\331\304\240\222?^5?\025\305\303\222\277\322\311G\313\232\342\241\277\2770\255W\265ms?\312\320C\353\333.\233\277bj\000\372\014\n\260\277\350)\026\020x\206\240?wE\307\2309i\257\277\001\257s\240\370#j?\212\354\374\341H\324\257\277\261N=\006\306\261u\277\352\323I\335\240\273v\277_r\274|\305\364\243?d\245pY\021NC?\344\236\035,\374\324\231?x\000\315\007\224\201\232?\245\216<\013#\252\243\277\303v\352r?\023\266?\356\257\036\312\200\343\204?U([`\2201y?\326v\224\224RS\225\277E\271\237\325MqP?\307@\365P\025H\254?$\376YDk\246\264\277r@\300{<\376\221?\365;\322\243[\237\222\277\217<G\202\235\261d?k\300\017t\315\202\270?\337\376\225a\025\207\222\277\360\231\206\371x\337\261\277\357\326\235\362|\215\233\2772\302u/\244\375\213\277\360\253A\246\351A\224\277\214\263\035\341\323\315\262?\356\314\264\024\335-`\277\014\334\276\3766\314\240\277\301\271Z(\201\376\203\277k\343R9`\002>\277\265\246!\202\304\267y\277\220\'\320\000\342S\226?\370\014\267\'i\005\263?\225\374\206\037\365\335\257?\270\344\265\007,\251m\277\371\301\r\236\022\201\225\277\374\370/\007v\273\226?\3239\374F\224$\255\277\335\357\335\022\265\312\254?\254Q+B\256i\252\277\0359\354\340\342\263\245?\203\232\354\361\211\247\204\277|\271\356\327\347\354\253?A\036\264\360>\260\230?L\272\0015-\375\263\277\270\017\026\365f\217\225\277\000\233\220\024\214\254\242\277\3228\304\007\345\371\227?\021\302\212\017\224\026\310?FZ\n\014\273\322\222?{\347\343\212uc\260\277\244\016\374\256\232\201\257?B#\037\324\360\031\262\277\340\333Sc\003\205+\277f\360i\245\036w\243?\351E\242~?\025\260\277!\216\210#\377\222\232?vses\361\\\261?\265\246oNr\310\242?B$q\326\265\333\252\277\341L\327\250p\371\246\277|\3776\270g\355\256\277M\350\211\005Hd\202?\267J\222\0331f\270?\021\274\325\002\271\243\223?\224)\th\3546\230?4\346\342\r\321C\203\277\226\251\300UGk\233?\272\306-p\225z\264\277\374z\320\265\023\033\227?\231deC\177\020\223\277\340g=\274\202\020\220?\001\360V\037J\360\241?H\256(\3001\311\241\277\206v\330;g\013\230?C\372%\2569\007\227?!Q\'\222}(\262\277\026\305\352r\264\355q\277\356H{I\253\271\222\277\206\362X,\333\313\260?\363\013_\210,\200\265\277:\365\240\217`\265\224?\362\251g<ME\270\277+\034\356\222\252\307\250\277\320\241\372#\262s\256?\355\343\010:\324k\247?N\310Z\274B_\270?\177Y\n\033_Z\244\277\001\323\236\301w\236\265\277\315\\\005\206}\323_?\321l\361\301\244d\262\277\234\230\314^\016b\257\277v\333\315\372a,\221?\274\t\360/R\224\260\277@\272\347\350\370\277\222\277\240 \303\035\311-\226?3\001\202\'\264\316\206\277\247T\030\"\356\013\234?\005\327\273K\365\361\240\277\031<\377*-\313:?~\231O\"\361<\254\277\225;\235\215\nK\244?\303\222\251\363\231\316\210?[\346\217N&U\247\277\257hP3\317k\263?\337>\245\240\213\372\234?tw\035G1\321\233?\236\355\353A\231\266y\277]\332Z\340\275Jk\277FK\225\225\312\347\261?\001X\024\256\333\325\227\277\034\036<\007\321\334\244\277\217\242[\347/\206\252\277\204\322\\\327\330\260\243\277\003\360\to\336\261\263?D\364\202\202P\\\245?\210W2\247\3346z\2775\354\300\364\017\341\254\277\351!\251\375\'\\\266?;>Bl\177\021\246?\002\346A\353\231\036\204\277-{k7\272\014\246\277n\271%K\336V\252?\34791l\341\374\220\277\261j)\326\254\373\235\277@Y\34258j\256?\332\031\367*\312p`\277\315\2128\301\250\315\271\2771\236R\346\245\311\301\277\352\214\023\222uU\247?%\234\365\321\273[\224\277\332~Q\316\257:}?\367,6\260\026*\243?\257\340c\244\304\367~\277\256\035\344\3403?\261?\255\3330\251\366\205\205\277\006|\254\317\3157\236?\003s3\331\354}\217?\221\'\200\007y\252\251\277s\251Lh)\265\266\277\367\031\200\031H\226\263?{6dD\204\223\237?\3153\332\256W\337\270?\037W\272\302f&\256?\345\235\346\370\341\373\211?\372d\337\305Z^\260\277d\324\\\025\227t\263\277\270J\224\333\276\352\263?2%\024\004i4\215?]\300)\252n\005\240?\"\316\370\346<\247f\277\324}\255\315h~\234?\353\211\223\322\265\013\264\277\232\023\305\310\376,\232?4v\020\230\005\t\242\277\034\223\277\027T\225\261\277\024\307\030\035\265f\272\277\265D\266\\0Q\262?\333\204\245y\322\250\214?4\207\207`\232S\204?0r_2\\\335\242?\013@fw\027\225\301\277\367V0\301v\363\211?\202\233\244\233\353\337\264\277x\201\247\371\344q\226?\257\342\027}3p\217\277\325]\003%\2578\232?\013\327a4\3451\225\277\010_\214\020\345\000\276\277N)\375I3\266\240\277o\203I6Ra\265\277\217/p\030\376y\265\277\312\005\020\262\205\277\263?\232qy\010{\225\215?\244\267]i\037\021\262\277\345_-U\361\001\204\277\177w\t0\257\241\263?\261\231V5U\313\200\277Q\252\373\200\377I\271?\366\215o\010|\200\240?\024\014\356\034@ \260?\243R{Bp\036\223\277\251\344\3536\327.^?\032\206\246\254\303(\206\277\322\242\251\013{\256\257?>\2010\010\252h\257\277\315\345(\235\247`\266?\360\002\004\031\340^\260?\253;\275\020N\267H\277\257\213\305\353\033o\241?\330\377\0177\334\211o?\261\257\257\217\374\307\215?:/\0100\036\263j?;\26636d\237\260\277\305\251\237(]\007\225?\272\336\216,9s\211?)\374_a\332zg\277\350\216|\2566n\213?\267\272F\361S\327\235\277D\367\341G\265d\254?\3154\237\215\006x\255\277\250\235aL\033\203\204?\330\304\245;DS\263?\340E\334\017\'\021\252\277a\311$P\373\325\220?\247>6\212\354KK\277\030\216\225\341\023,\303?\234L-a\300\264\261\277Q\334x\205\265\200\256\277\305Wl\022 \321\257\277\275\213\226?C7K\277u\021\311\211\241\013\240\277\245\205\231\023PP\227?Dn\224\t\360e\246\277\373\223<\355\\x\220?2*\241/\330\235\247?OH\031Y\036\243\252\277\300~Tq\336%\263\277f\376\322\226N\277}?\200\322;\027w\316\235?-\203\3473\3700~?\312\216\r^\200g\231\277\301\371\314\004\250^\200\277\205u\325f\206N\227\277\310\335\037A\333\347\237\277\263\235Q\0236c\230?\002\316e\305\351\374\266?\212\250\352\213\224\270\241?p\r\345^j\260\261?\221\221L\240\313Nz?\256vQ_\312\t\263?\223\205*\253\314\033k\277\367\r\0379.g\207?$\311\306q\322\037\224\277j>\027eg[\233?\345\201f\242yz\246?\r\205{\017_\325\264\277,k\234\361z\234\252\277?\350G\206\014k\212\277\220\365\030H\235j\212\277\010yX\272\001\364\227?\013\252\253\020\344\334\215?\357\336)\370\274\327\226\277\360\030X\242t%\265?\007K\n\026Z\307\250?a\377X\315\237\367\275?\001\"y\001\037\035\237?\374\232m>\362\241\265\277\023\333W-%\340v\277e\032L\203\2462\263?xv\242\001\2028\300\277\274\333 \367<\221\225\277A~\271\232\310h\225\277\314\270:\026\316\201\253\277\231\216\213\016\207\243]?\3762*\304\1777\251\277N\302\033O\024\251\253?7x\234\246o\357\247?q\303<\217\t\223\256?\250W\245\224\020L\211?)\"s[\314\267\213?(\t!\373\223\342I\277\271:\205\371\226K\263\277^\372\017\217\240m\261\277\332`\275\3400\036\256?\247\344\244E\247\213\267?\376\364?\367(\221\236\277\310\245SM\344b\207\277\211\316\215\375,\322\255\277b`T8\234V\265?\000\374\216\2329g\224?\235h\200\032\021Y\254\277GH\0332\"\312\253?d\230S\345\202_\206\2776l\004\325\225\n\201\277B\377\341\355\305M\245\277^_\020]\376\357\202\277\264\334\367MD\302\214?\"\363I\334\1777\235?q,/\010\177\320\304?\275H\310\375[\260\260\277\332$\343\344i\315\204\277\231A\2016hf\215\277\253U\357\362qB\242?\364\234,\316X\312\253?\\e\354g\3511\207?XZ\305\357\3277z?o+\006j\033\271\224\277\374\206\027QE<\247?\375\320\271T\0214\245?\221\245M\021\337\r\230\277\023\327\257\374-\202i?\t\367|\232\243\201\260\277\263\303\353\033C\361\257?\233x{[,x\253\2778\313\227\303\326\006\225?x\252\'\223\313\023]?\271e\233\377\276\344\232?\031&\206\363\3263\260\277\n\235t,\241Y\232?\363\370DR\232\033\235\277\213\342\301\354\261\350\245?|\353\215\337%\261\223\277$\210L\2254?\245?\376\205d\207)|\265?d\233k%\214\345\224\277\020;\';\216\242\264?\3026}[\325+\220??\241p\25709\253\277\016\257j\357\033{\234\277\036\247*\343g\325\225\277\270\033rQ\243\322E?\037\256\004\245\313\344\263?T\037{\301\000o\253\277k\254\315:\014m\221?\2078\270\263\017\315\242\277t\272r\224S\001\214?\310S\303\334o\262\255\277\211\267R\202}\237\265?X\353Pk\361\272c?@\216\347lCV\266\277\020\352~\031\n\317e?\372\'\3658\232\036\255\277r\000\261\316\350\234}?:\206&\334\034\377\260\277\262\\\311\203s\320\242?yzK\0211i\244?\307\252\023\005\334\314\250\277\007\022\250\007\202\341\226?\230Z\"\203|E\240?\355\010\207\250\275\000\262?R~q\"\233\322\211\277!\306\210/w\315\242\277k\271\267\033G&\242\277\264\356\357\326\207\354\240?\3434|\265\276\246Q\277\302\006L\212\310\336\275?\014\241d\000\260\330\240?\303\245`\221(\240\251?\244\036\227O\355\333\240\277\267\272\337n\365\237\206?\2028K\266\021%\207\277\270\213\304\215O\317\203?\002\030\nP\016\312\253?\312\3632\351LY\236?\"\372a\335\335\311\265\277\247\005\333 \347\267\277\277\0178\264\371\016\201\267?\200D\rK\355\r\220?\274\206^a\022\337\226?)\372JM\305\252\234\277N\311\253\344\3479\250\277\216\036\273I\247\200\220\277\234r\262\272\361\256\241?4<\220\337\353\033\227?\306+\252\332\267)o\277\006\007\326u\211T\261?Q\344\343\3161zm\277!O\223+)\245f?\223t<\0316O\206?Ri\274Z>\034\251?B\301\202\002\032\014\254?\316t\2649\372\203\245?\2476\3216>U\240?f\213:\2661`\277?2:Nz\207\021x\277\367\375\336\361\3577\223\277\000T\344\352\004\227\231?\340\036\253Bn\212\262\277\306\341\344a\255z\225\277e\020\273\001\332\257\254\277T\301\351\231+\262b?=\230\223>\335\233|\277\204R\007T\016X\245?\235\363\376\353\232\365\231\2771\016\003\265]\256\233?e\303\037\032\220H\265\277\222\3422\025\277f\201?\343\030!\2425x\272\2776\3747\235\016\327\242?\243\306@\374\316\014\221\277\3038\250\376\007\021\306?\346\030\3259a\222\233?\316T\244\024\037\251\245?C<\311?\262U\212\277\361\302\346\352!\375\244?\257\355\354\367\0019\265\277\245\333\305d#2\262?\277\'\000L\365]4?\244\204<\215.\256\207?\204\347+=\321B\220\277f`\305+nm\227\277dX7\006!\271b?\357\251\202\010lo\262\277vU\306>\232\367\241\277\\\311\231\376\0208\243?_C\224\254z\271\241\277\216Y\211.\001r\250?2\351J\376\313$\252\277\240\014\340\370\227`\273\277$)\272\241\304{\253?\277.R\306\377x\210\277^\231\300\221Un\243\277#\201\027\032!\027\232?\235\361\007#5\005\265\277^\363\370\362\034\235y?\350$d\313\204\247\257\277\227\347\230\2434\263\252?\351\034\205\2544xe\277\037\252\253\213r\263\265\277\222H\317\216K\246\261?C1j\252\360w\206?8\310}\252\233\001\266\277.\230\342\003)\370\244\277\321\321\004\222\224po\277\234\024<I\013\375\225?bs\341\253\357\004v\277\014\265w|\336\304\270?\025\306\023\222Jrr?\323\313\354fv\355\264?\276o\276b\235\006\212\277\227i\354p\020\r\244\277zxk$\313\355\224\2777\026/\335\311W\245\277M6zb\366\214\207\277`r\271\325-o\220\277\312\301\312\373\367\324\257\277J\357\302\217\362\332\260?\0326\2230Q\314\256\277\370\256\377\274\321\221j?\313\371c\033f\024\245?\031\361\222`K\243\261??}\321Y\213l\241?\331\237\303\355[ \240\277\241\262h\230]\324\234\2770P\010\202\214\365\240?\236qG\236\306L\217?8\324\320\320\226\250\243?[\307\223\201)bi?\003\305\036\000\357\210\265\277\360\244R\351\223HG\277z|\266\365\223/\234\277\255\2227\231\271\266\231?\017\nc\357\3265\263?K\345\264\001\376i\202\277\365\215#\017\317h\204\277\243-\036\243]\007\271\277\377\201#\233LS\237?{\364\200\342[\223\247\277\326\"\217\254\036@g?\300[d\324\226\265\235?\005\342&-V\364\250\277\030\010H\350%\212\243\277\032\205x\016\035!\240\277\373\036\327\353\312\177\252?T\302E\254a\205\262?\241N\301\370\262\305\270\277\365\257\227&\222E\271\277\304\260\272z\376\302t\277-6J\222\374\235\265\277\313JQb\302P\306?\350\r\224\374\203x\232?\271\344\342\002K\334\274\277\034)\251\236l,\223\277`\332d\272\373k\227?E\224\234\014\222\230\241\277\323\374s\025\013h\243?B\364\207\204\204Xi\277\321\234I\331\207\"\255\277N\250\031=;\341\223\277j\024Er\223\020\267\277k{\036\217\036\345\275\277;\303I f\003\261?3\250;\260\227\324\240?F\325\307{h\253\236?c\342\270\\\375\364\272?\227\3345\35381\265\277D\233O\344o\362\261?`\337\3760\004\273\226?\177\261\350\330\301\033\231??\033F\340\330\217\231\277\013\332\250\235pt\265?\213\221(\222\230\031\220\277\334&\013\304\202U\246\277\301\337\014`\247\356\214?\274\246\006\235\2343\270?\325\256|@yU\240\277\300\201\353\352\275~\236?Z\323\343R\250\023\251\277/\335\245\231\320\001\266\277B/.\235\370\007f\277)\323\032(\005\225\271\277\257\372\222\345\233\214\247\277}\027\n\267\177\231\243\277\207\027\274D\252\006\220?\246\261\325\020\333\244\262\277\275\331\3406\036_\222?\333\261\356\364p\277\246?[\206\035\271\361G\267\277\364Q\031\032B*\261\277\205[~\326i\226\254?\255\3161\"-?z?\363t|\226~\222\260\277\337\257\344Ny\303}?\0021;/\\\"\242?\027\222\353\034\262_\262\277\335]\233CG\235\204?\032\347\203\nU\222\232?Y\234K7lv\260?\330dk\340\204\302\206\277\332\311i\2753\252\214\277A\264\364\343m\255\240?\356R\210A9\350\237?\257\\\323\010\277r\266\277\364\342\344\321\251(\226?\033\315\314y\236g\245?\016`\323\314\363e\177?\013\236\254*\222\224\205?<\247IV\024\334\224?\350\320\020\375\024\245\215\277\257>\321\235\203\'\261\277A\243ws\003Y\230?K\016\031\034\010\304\231\277\211\326\271\334\254U\270?Z\332\306\225\013\\\222\277\200<\237\020:A\263?\303\201\005p\023\371\242?\300\330Q\240\333\ti\277\350\254\320\353-F\243\277j\003dS~#\210\277\332t}Y\t\236\203?\t\314Z\353\331]\216?O\271\224&\303\001\177\277\031_\202\203B\312w?\352\ng\306\264\r\222\277b\323\203\034~)\230?\226\372a\'\002Rt\277e\223?Qs\316\215?\363+\376L\331\323\226\277\313\351\245\220\374\367\246?VJ4\243\177\254\257\277\020\216\206\313q\304\233\277\370q\237\016\327\244p?u\276\177V;\352\261?\255\373\203\342,{\201?\\L\23562?\266\277J\376\026\032E\022d\277\265:\336\010\221\352\265?\3251\256\263\014B\234?\344o\222\003\332\r\257\277\257TR\263\031\005\252?\336_\370\374\240\225\254\277\242&\361\2457Y\263?\335B\353dzD\262\277W\326\373gE\034\304?\023\002\001\241i\331\241?U\205\023-\333\235\224?\352Ch\211\327:\245?\365k\035[\004\216\215?\353C\236\236\237\312\272?\263\215\236\253\306\270\256?\207v\251\273<\252\205\277\303$.\361\211\256\233?\3665\213\n\212\277\265?\362I\253<R\305\223\2773\213\354\031\242L\272?\254]\342\300\347M\261?R\375\3737\207\004\222? \315\301s\351\261\250\277\210\020\262\037\342\256\264\277\331\267:\363\371\316\232\277_?3\035\364\320\221?\266b=N\306\363\264\277\227\030\273\353\r\362\250?\346\211\362Ub\236n\277\301\203\261=p:W\277\300\320s\221\225\251\267\277\352?\202K\327\345\245\277\022\222\201\276t\010\241\277\246p\367\313\366=\250\277q\026\002\302{\024\262?}\361\"\230Go\253\277S.\366\356\375\227\266?>\207\325\376k\365\205?\007\343\3529\213c\224?\352\365\350y\274\n\254?\340\362@=\370\205\224?a\013$bX\312\300\277$\322\275\0219\017\243\277\277\264-\311\0074\304\277um\212\340\030\314\242\277\016#\223\024\204@\237?\247\242\207\325\330\006\303\277\326\300|\232w\370\277\277\345\356\3136\244\370\222\277\252\033bo&\374\265\277 \221\036\004\224\033\276\277\342\232[\333C\334\222?\320\257\214\245\360\237\235?\341\254\327\244r\303\224?s\363\344\251\253\247\221?F!\221m\235\325\257?\263\031\247\257]\340\207?\226\202\303\327v\307\223?\332\035\205 \254o\247?\204Z\254\021\206\270\233\277\036l&M#\014f?\351}\305\003/\026\271\277HESE\363\350\265\277\2055\365\2273\355\262?\302gaF\250\'\240\277\030\'\253\217\304h\270?\003\224\367<\250d\221?=\027\251\364\213\340\255?\353Da\242[\262\243\277\307\322\177n\305\241\224?\363\013Q\246\351\302\240?\205\263;\361Y\357\201\277\353q]\022\004\212\255\277\330I\223\206$\\\256\277\305q.\247DF\257?Q[\335DL\033\262?\207p!\212_:\272\277m\257\260(H\t\227\277\321\366\210\227Nua\277\355\236\nd\276\306\221\277\254>\"\275\256\364\203?a:\341W\366\322\257?;\302GOG\340\264?q\004k\tz\226\234\277\216\355\357\375x\304\212\277%\234b\324\375\312\261\277G/\251\327:\000\252\277\353\274w\354\263v\243?Y\016>\260E\216\220?\375q@\227W\216\250?\264\274\304MY\241\246\277\324Ex8\010d\277\277\326\244\262\034$\177\226\277\303\337\374\233(|I?\234\236\312\352rr\263\277/w\352\004AQ\245?\"\375%\226\303m\260?_6,\335d\221\242?Dq\0250\222G\247?\016\246\212\323\2627\263\277\356?\225\004\305\226\217?`\330\017\211\373\232\236\277\307\005\277_;M\271?\237\243\252\247\322\217\227?oD:=\267s\271\277 \001/\330\211\242\207?\223\022\254\235)\375\240?\353\2754\337\032\206\227\277u\327|\324\345-\254?\027i\257\250}\301\275\277w\216\343\262\364\244\253\277xwn\350\351\350\253\277\236\0205\251`\244\234?\243s\235>\216\013\201?\363\"\205y\024\224\243?zR\351\241Z\330\260\277<\353\264\247\370g\206?\202\302\211p]@\252\277\232\245\253\354\017H\254\277\263Y#m\221B\247\277\244\333\340\270\022\353\247\277z\240mO\267\201\274\277\323\236[\210\307<\227\277\242\036\032\024\010H\241?\244\260\344\0218rs\277\241|V;:\212\213?*\247$\231\t7\253?\234\343n\265\277\031\215\277\206)\030\307!\035\247\277$\006\244\275T\374\257\277u%\304\035\272D\205?\221D\356\251e\277\243\277\353\230\032\265*}\225?E\343O\230p\201\217?\010&\351\333\245\336\251\277\361\026\337%\3170\205?<U`\335k\263\273\277\243I\260!A\202\252\277\035R\373`\367\320\262\277g\007\'w>\256\264\277\252Tt\372o\241\266?^\020\363\315m`\252\277F\322\257\365\227K\204?F\262\216VR\032\246\277`\364\324r\216F\251\2777\246\024\233\032\312\200\277\'\221\342\252\324\026\222\277\367k%R\312\241\253\277\343~\300\017\200\322\224?\\\006F\250\306\340\252?\"r\346\326\220\367]?\240l\305\246\032\262\262?\022M\374\023:H\207?\324\n+\303%*\240?Ta\321\221\366j\213?\t\016\2133\235\317\262\277\217D\226\210\362A\256?\361\203\374\222\206?\240\2770\276\203Ss\223\246?(\211\326Z\330d\267?}\3565\367\007\323\241\277##\310\317`\226\267?\243G\315j\370\312\240\277oo\376\331p\266\260?\261\216\236+\003\322\214?v\177\331\3342\017\254\277~!\340\272AC\256?\216\352\361^\273\016v\277\240\251\203\351\362\t\206?\250K\232wVA\260\277m\031\005\037\373Q\236\277$\241F\003\226)\266?\026\376\\_\216\257\251?&\350\270l\345\306~?\327\2439\201\035\350\265?.X,E\211\234d?\2150?\354\030\244\262\277\362S\367\216\350o|?\371\301\262\336\'\200\271\277\333\306\370\323\214\241\256\277\315\345\315\227\222\277\241?\375T\361I\371n\216?ez\000d\374C\245?\264kf\226\220,\200?\\;\265\325\223)\214\277X&\203\034\315}\260\277~\241\337\016\227\'A\277\023\331\224b\000\332\240\277Q\344\236f\363[\276?\210\371\007\3623\225\230\277A\313\264\345\023\035\260?\036MOz\376+\241\277\237Pj\232nt\201?oB\331\273g\361\244\277\031\"Td\006\"\227\277\352\3454\005\220\354\304\277B\314\202j\215O\222\277g\024\357|C[\230\277\354\247\315\"\277\271\230\277gE\223A\262_\260?\200\261\031\024\006\235\222\277b\226\204\324\270\361\223?\203\205\207,\313\\\263\277(\033\361\246\357\004\263\277p\006\tA\033b\264\277sz\323\037\356\331\256\277\025\2559i\245\257\253?h\211u<\0204\245\277\314[VG\306[\264\277\315\005\004\266\000Vz?\374\210\376w\365{\253?\016\032_64\274\265\277p\001\"\032\235\247\200\2774\365?\377\314v\262?\300\034E\304E\324\261?\365[\014\030Di\235?\202B\334\313\376\277\262\277\351\037.\024\351\024\242\277EB\024$\206\260\261?bk\203\214n\357|?\253\272\316\267\000\275\264\277]\377[M\345\266\230\277\301\007\235\205\350c\237\277\337\016Q\215\327\"\261\277\363\310\013,O\337\242?\264\356p\031\363|\242\277\025\277&\326\334d\237\277\007\220\321\351\004\332\255?(n)\201x\331u?r\241}\355\226*\232\277g\004DN\360\322\244\2775\323w\177~\307\217\277\374\303$\0305\323\245?cv\005\350\225\311\240?\203\240s\221\367\252P\277\262\255\235\276\247xy\277z\035\014\t\255ph\277<\202\373W\315\315\260\277\360\247P\322\212\237\245\277\220\220`2R\235\273?t`\202\346<\330\261\277\237a/\331e\245w?AX\235\002\001\277v\277\372\260Z\344.z\260\277\330\317\300A\242\215t?\001\3057\004\232K\204?\205\210T\355\023&\271\277W\320\034\356\037\275\254?\246\224F\373\0031\262\277\016kRU\300\003\250\277\302\337\235\003\3513\261\277y8\234 \340\201\251?\350u\361B\305o\262\277%\313V\261\246[\221?P\3714}h\243\241?\023\321\004\367\231\317\300\277\335\201b\355c\377\252\277*\'(74}\257?\314E\274\256\207\203\241\277Y\361\301\313\302\332\242?\364\366\233\035B\302\210\277\371\322\347\013\010\360\214?\321a\262Mq\340\260?\332\261\200{\002\354p?u90\344\276)\262\277\346\306\343R\207\025\250\277\366\313\2773\315\234\254?z\233\322\3758\242\242\277\242\331\271\317c\340\255?\212a \227\\\244\241\277Y\345\336\2115\025\222\277\251(}\355\333\013\275\277\024k\013|\377\361\214?\336^\010\232bB\232\277\210!\301\202b\210\200\277\300dI8p\021\202\277\257\206\303\216*=\224?\234,\"d\216\215\256?r\021B\035\272H\240\277U\2054\331k\231\204\277\263\201\313\320\021\266\251?Z5\277\355\021\314\235?,PA\335\224H\201?\2179\264c\017\275\240?\263x\365\316\302$\243?\213\031\265G\265\200\252\277\200#WaB\036\240?\373\203\321\014\331gp\277\322\244%\004Q\263\265\277\266\324gH\001\226\274?\036\274\2468\016\227\240?g\223\261/dXy?\302\306\344!-\331\251?\263\324\365\230ox\233?m\212\316\376/\342\250?U\322GdW\013\260\277\214\007\347\375;o\272\277w\204\366\364\325\326}?\317\222u:f\n\222\277i\037\333u0Z\242?\027\225#m\3136\263\2772\266J\r\217\263\250\277=!\333\037\313\205K?\276\361S\306\353U\244\277\340@\2469\347\205\235\277\256\224\262\262\276\312\003?\302\266:V\327g\263\277q 9\216Kt\251\277\003z\321\305\306v\232?\352O&}\251\214\241\277\032:~Ea\007\266?\360r\250\002\260M\244\277\177\350\'F\017(\252?Ad\367\212\021e\205?e\240\"\255\216\017\233?X\377\210\202\331~\226?\372\257@\016\347R\230\277 \240\333\347\314x\211?T\002}\257\246\364\246?_<\016\277)\374\247\277\302\373@\310|?\250\277\220?\266\211\374\220\237\277\030\010\210\226\350\235\245\277X,(\345\200\242\253?\023\365R\256e\264\260\277\344\373\343f\316\265\240?\030\232\320\335\215\332\266?\335\024\026\215\r\313\233?F\315\257\257\346y\210?\340\340\010\347nU[\2771g\343\376U\n\220?\245NH\201\261\210\264\277\007\224m\356\356\343\311?\314\215\307 \255s\253?\210\0078E,\211\275\2777>{s\333\005\254?dU:H\226\271|?\243\340~B\035\377\253\277\365\314Z>\303\3675\277\204\267\302\\\r\013\262\277l\003\354\006,O\237\277\034\214\214_\177\272\241\277J\267\345\340e\262\237\277\245lc\214,\307[?\265\332\305kI\276\252?Pl\264\276\233,\265\277\234\337\205f\2150\230\277\nE;\017\202\310\254\277Qi\272\013)\342\264\277\312\265\326t\324\214\232\277%su\0166\032{\277\236xB}\352\177\246\277\203Y`\225iAg?{\262\342\036\361\202\227\277.p\335#b\343\244?;\310;\023\"d\256?5\261\010_\227\003\237?%\247\332\037\333T\251?\027\221*\033\023\226\276?N%\242\242\026\221\243\277\217\371\0226u\254\256\277)0q6\022Y\245?km\320\277\236\244e?O\035\225\306\276\332\226\277\334\202[\327%Nk\277[\3334\\\2153\211?i\2627\246.\222\235\277{z\3721\356\035\245\277X\033\206\230\031z\242\277\001\206\2736\033\016\263\277p\335\324\'OT\236\277\251\\\375\345\001\002F?\247\311\267\351\215\211y?\335\302^E\265\024\207\277W\3170\370%\267\264?\316`\351c&N\242\277\037\222u\246h\302f?\350aD&E\326\265?\301t\202D\331\203\222?\266\237\2568\310=\245\277\376N\212\21543\250?\207\251k7\336\\\274\277NrCaK)\252\277\316l\217\246t\351\236?5\332\235J\222H\223\277t\345Q\342\036\314\254\277)\334F\342\301\2763\277\014X\t9Sk\240?\345Y\313\351wA\252\277\315\331p\"$B\265?\231\3345\177\271\366\205\277\317!ZT\035\233\204?1\353\262\275\3423\221\277\037\r\200\006\343\272\217\277G\331\263\354\013G\225\277?\252t\345\177\001\255?\355\212\365\242EH\247\277#I\005\266\007\373\232?\333q\361\241\327\236\253\277\010\374\017*\243\341\270?zq)\237\001\361\230?d\3649oo\247k?R[\235rGM\240\277\216p@6%1\260?\\\245OZ\331\376\273?\360\203\261\325\275\t\243\277=D\\\334\232@\261?q\355}6\004\032\244\277[e\363\2231\311\270\277\312\230w\010\013\320\233\277\366A\312\311\307-\226?\250a\263\n,\262\262?\245&eH\251|U?h2]n4\353\223?a\024-\361/E\260?\025\370\003\221\nq\265?\306*U\250\3524p\277\037|\311\322\247\034\300\277\n{\240:\013j\251?e\303\'\233\217\007\224?\020\252\350\326dq\257?\352\213\266\223IT\244?\270\313\246\005Bd\204\277\222\244\270\325hn\210\277!\244\3055\212b\252\277)K;A\357%\265\277g9\342\201\nL\243\277jA{[\214\223\251?\243\246C\230\216\230\262\277)F\237\236K\270\277?v\237\347B\200\323\260\2776\3752\0167\231\245\277x\274z\267\253)<\277w\330]\177\366\332\235?+\211\036\243,\334\274\277\331\351\274@Fc\227?\320e4\323W\241\236\277e\213\326/\201p\242?\2556\352\220\365\373\261\277Y\364\252\306^>\204?jg\326\272\373\302\252\277\240\335\307R\211Et\277\376=I,\274\252\276\277\327\203y\255z\007\232?~l{\244G&\234\277\255\203\201\330\311\030\263\277\203\242\227F{\331\247\2770\255E^\326\003\215\277D\027\266}M\r\265\277.\370\037\277>\372\265\277\203\313\030L\007\014\263?\217\327~\254\234\326\264\277\027\rs1D\276\237\277\275\243\2406\317d\241\277\350J\217\303V\240\247\277\364Gx\361\311\032\241?\261\177 \327\006\237\262?\246V\253\325\206\214\233?\237\352\314\376\2317\260\277TE\225\314Z\212\224\277Q\351?\361\242I\223?\026\001R>\243\336\266?\342@\177l\022\327\237?\223\206G\332\350\203\212\277\203\337=\036\232\310\251?P\337\234\362v\177\235?\022\267\227\235\273\241\252\277\014\214\267O\261\342\272?\247\036\'eH\374\240\277\215\034I[\312S\221\277\332\270W\327\206\211\247\277x\010\'\216\341\263\221\277\310\001\316\252\235l\202?C\361(\323\215\216\226?\032\203\025\326uI\265?\331\017\212\035\001\212\215\277\013/\300\343\203\217\255?\232\267o\351\311\353\244?\255\263|\360\310\215\251\277 D\364\253\266\204\272?;\266\241\316\376\360\225?t\237\322w\220\356w?#\007%M\000\006\227\277\024(e\345\354m\300?1\224\312\224g\032\300?\246\r\271\r\351|\213?\354k\337Ts!\252?\347\250\242\022x\265\224?\252\'\300\372\343\317\254?\373\026\315\331\3357\177\277k\371\2764\267\232|\277I\367\203\273\017$\232?A+\375\375\276\242a\277\226Z/^|Q\225\277\371 3\334\225\221\251?T\212n\016*\325??`|\211\324,\267\243?\341b4Np1\234\277\214\337\337\'\230x\245?\307\022\363\216R1x\277F\240E3`K\262?\235\331#\264s\371\257?xW\347\277~\312\223?e$B\n;\202\261\277\363&%\263}^\246\277\204\322@8\317n\243?e\314\226E\347\367\206\277D\300\266P\323\373\260?\371\357%\306\377\221\220\277&\254r5\001\305\252\277*\362\261!\202\005\255\277\311\027\326\220\261\374\227\277WA\022Oa\377\200?O\210\376\226\271.\234?r~5\210i`\277\277\376\307\254H\321\201\260?Yc\377\3774\022\254\277\245\324\330Q\337\325\245\277F\251\007}\263\004\230\277\343\275\236G\n\246\262\277S\332\0147b\314\246?\257\335uB\252\244\243?D\267\206*\355\'\241\277\r\25784-N\241?wa\367q\2341\240\277\010\227\324d\316\t\253?\351\220.6\337\002\226?CJq\177\276#\250?\035\0014\307K\361\236\277\262\372\324\227l\245\266\277rR\014A\260P\275\277b\374\304\2471y\263?\314\376|\215U\324\301\277eM\202\204\372\233\273?]\027\003Q\225\342\241\277\303\005\331\375_\000\220\277\007\026\225s3\365B?\252/\312\257[*\253?.\310\026\272\346\356\245\277\204!c\237\374\273\223?d\236\r\"\307{x?\242sZ7\3177\223?8\"\356\220\322\010\235\277N<\377|\242\367\240\277t\017\323\20490\271?\347\224\244\020q9\251\277wN8\212\3518<?\372Y\306D\010\236\217\277S\276\346\324\302\244\235\277\3505\347\274y\354\261?\251\251\032\tW\260\221\277\362\024\203\000w%s?P\304I1\001g\264\277Rq\334\017\367\371\242?V\220\022#P\302\262?qD$z\035\\\251?\310g\321{\2178\265?\300K\354F\312\324\237\277\225\002\356\351:\374\251?\312\351i\301\311\312i?\371\314\213C\035\\\262\277\205\265\177\\n\346\253\277R\025\263\261\3718\247\277\224V\n\204)2\243?\233\362\307:\225\310\222\277\024&\370]\347\221\255?\247yq\000\330K\267\277\326r \2660\302\264?\361`\225\243+\266\273?w\312j\315S\033\250?3\336\2220B\252\252\277\217\363\367\275^\303\231?\002\215f\317S]\237\277y\022\237)\234\316\244\277\220\224\352\362\031c\265?(<\273\304\303\334\270?\2437\211\277\245\200\220?\301\234w\r\257\037\230?\374\024\226\tL\230\241\277\322\234\272\213\3169\223\277\312\230\266&\353a\264\2778V\274\371\265_\240?S\005\330\330\310\347\251\277D?j\024\005\375\177?\332.\2735\217Y\265\277\252GN4\342\300\227\277\\\036\013\2609\313\245\277\317A\202\257DK\242\277\313c$\364\365l\270\277\006\236*\n\231\253h?9\240\314\311H\003v\277\357\310\271\330e\372\256\277\030,\032A\033\320\227?}\234W\315\364\204\231?\362\252\273\333\306\367q\277\371\310\375\333\355H\253?\013w\3442\332 \265\277\243\347as\316@\236?\223\036\312\026\345\301\272?)\336Qy\237F\263\277\014!\362^{\205\277?\364g\361P\202\321\256?G&D\254Z*\264\277\315#\344\275\002\342\234\277\307\310\210\216\310\311\230\277*\272,Y\366\353s?;\377\322\001t\014n?a\372\262\007\306\214\256\277\3336gl\032\300\227\277\333i\322\372\344\300\274\277\203\353\246\314\223t\221\277\004\330*\004q\357\256?-\231\253\244\335\002\213\277\002~:\254\016\215\244?6\261\355gi\255\233?S\244;\234\203\311\264?\336/\035\375\215\263\243\277\367b8\276\241H\271\277\273M\307\363\276\272\245?\272\244\335V\030\000\302?\332\323\016\363\240l\262?\237~\211\013\021\213\256\277PY\315N\301\211\213?\016\324 \271\263\215\261?\004*\252\337?\022\261?\266\201\024\027\207\036\257\277\314N\243\262\351{\255\277\277$\212\352@\276\246?\3701*\313\304J\253?\255\275S\357\277\216\300?\004\336H5\3224c\27710)\345fF\262\277\240\t\361\004w\035\215?\254JZ\316\003\037\260?z\330\316^,\227\216?\365\304\254\367\004\r\262\277\335 R\203\026\345\240?\'\0171\006\346h\231?\231\310VU\002\363\255\277\260\231y\245yV\220\277m\031\355U\237\203\241?\021\212\302Y\231r\267?@(\303X\267\035\260?\370\334\nD*e\266?8\013\\9\344\262\231\277\031T\250u\027\215\266\277\366\234dn\246\215\222?\232rJ1k(\254\277\216Y\200>\234o\244?Nn\236@\266^\275?\313M\267=\217\023\245\2779\213\020\000\024\271\220?\330\371\231\226\337G\271?R\323\2207Qe\223\277\241p\211\352#~\223\277\250\370j\210)\211\264\277\374\365\366\206\217X~?\2224\377Gv\321\245??\337V=\002H\242\2774\357g\275d\260\245\277\017\333\203\\\242\022\245?\267\3573\\w\365\242\277\'\326\0359&B\205\277+\n\243\211\240\346\246?\001h?\2478g\257?\2405\304\213\344\267\213\277\021\334D\214KP\255?\261\324\277\226{\223\237?\262\006\301fdW\255\277\000\254(\255\177+\247?lQ\031\316\331\301p?\312)\017\3675h\223\277F\022Y\254\246\002\240\277eX;\322%\\\262\277\001\254$\320\233\301\222?\233;X\250\023\207\254\2776\253\242\267]\330\270?\246$\337\003\360#\205\277\322g\367\2663f\206?\220\025\262IJ\021\261\277\024\024\241\241t\374\245\277\337\001\271I\355\223\265\277T\303\353\366 \273\250?\321Ctgr8\225?@o\237\237Y\316\203\277\343\303\306\355pO\243\277*\316\321\004\000h\264?P\0242w+A\230\277\367S\201\362\232\032\264\277\247S\3644/\327\263?\345_\310S\362\326\236\277;\307*;\275D\224\277\247!\330:qH\215\277\337L\206[\276|\254\277c,\260\367\215\n\216?\223}\242\337\010\233\200\277\324\365\355\"\343@\255?W\270\214bHr\247\277\334$`\225\264G\266?\301W\005I\346\207\257\277\310\200*A\314\013\212?\301\006c\037\347Gk?\344KI\240\267\324\240\277\353!\371\356\254\336\201\277\201\3523\377B\317\301?$\353\rD\232\205\226\277\022\275&\271\223\370x?\234@\256\241i\363>\277Ja\330@IYx\277\316\234\026o\2567\224?\312\\\005\214\230\324\260?\007\226\252\222I\323\231\277\340A\322\347\256+\302?\\\241\312We\267\227\277\tE\353\2355W\254\277\221ak\033$\376`\277s\236\224yr\210\255\277\353\364B\365\324\270\240\277\276y\236\203eg\217?\221B\305\222\252\254\220?c_\352\321v\254\224?Xq\0321/\277\200\2777\276\364J\373\343\254?\3603[\327\2020\303\277+lO\2011v\214\277\260\032\253I\024\274\237\2777\266\005<\301\t\211?d\305\227r\250\200i\277\370\225\020\004\273\356\223\277\250\244\250\370\021\241\263\277\177\356\252\376\2660\255\277;\253\332\273D\271\222?#\376I\231\037f\236?\236\341\313~\311\277\243?\r\315X%$\017\250?\013r\307\271\345\200\245?\030\263/\277\367\332\233\277\301\237\333\231\037,\243?\375~\036\027C\324\222\277L\205\321oR)\253?c_\260\007\342\271\212?\251\225JV\365\307\233?cF\351\364|k\231\277\351\245X\364\355t\261?\036\'\3451k\\\237\277X\316\254\357NK\227\277\232\330\n\233*\207\237?\320\347\200\352!\375\217?\223F\252\026\251\207\241\277\021\373\230\260\245\376\254?\211\"\025\302\251(v?P\255c\032\367L\263?\317\256\305d!\272\270?G\337\257U\337z\255\277\271\217_\005vF\234\277\262}\357\324\013\326\211?\230\207\264\337?\304{?\247\035\034\333\223c\260?\312E\302#L\370d?\261\213\355\372\223\215\250?\367\361OY\252my?\334}\006\345\234\331\207?\001y\304J\032\326`\277\311\023\321{Xj\240\277d\240\341T{\320\235?\255\360\327\032\223:\224\277\0341\255D\265\261\263?s\016Z\323K\035\261?\276^\221\305\212R\217?XS\336^\211\317\256?\246}\264\363\255\323h\277\005\006\377\351&8\253\277]\036\177\242v\026\302?o\'M\013\355\265\265\277%\t\334/\222\254\241?\360q\026Wa\323<?\2245}N\207\331C?\315\223\004\203\313\334z\277\374[\023\250<\344\215\277\252\221{\364\353\307\256\277\002R\317\251\363\227\255\277\364\310\0234\200\336\231\277n]\310\235H/\302\277R6\207\201\001\263\234?\352)\314\005:6\214\277\231\223E+\221\234\252\277+qN;>4\250\277\234\354\314\035C^~\277Hh\206a\212\220\250?\210XZ\026\032.S\277\371N\267\2752\023\231\277\357\244Q;\250\336\263\277\223\253\337\006u\321\242?(q\315[\336\372\271\277J\372\317\324\211\220\204\277j\340\330p\213\266\273\277\265<\t\243\324z\205?1i\331r\n\023\276?rpig\320\036\225\277\341\357\027\323K\323\262\277\200\355\324\277\177\334s?9\356Rw\312\226\222?\374\252\370+/\345\262?\372\000xr8:\220\277A\317\256\346\010\270\217\277\330\275\221bf\037\260\277T7u\035rt\225\277\217\272%\353M\317\230\277\331K\003\305\241j\210\277\3511a\303\003\017\177?d\241J.\343\326\230\277]\273\326\262\344\023\244?u\004(\263\005\314\257?%3.\0023\320~\277T\236\332C\321\207\250?\002]\'p\214\033\260?\346]\0223\360\351\252\2776\260\004&\344\333\257?\362\221\307\324\277\365\222?\357\322\353\tx\314\265\277\303\345\301WP;\273\277M\236`\2738\016\260? \3765\005\\R\263\277\351\265\230\217\243\361\260\277\344\241Z\025\271\337\253?h~\253\366\261+\254?\016\027\231\336\300\216\261?\032\275}`e\224\233?\222#3\026V\373\250?\005\326/\212M.\227?W\276K\354\305Hj\277\005S\306T.\252\213?\341\215\336\010\023\355\213\277\014hF\215\002\251\200?/v\270\237\366\301\261\277e\353:\354K\262\264?\017\357\024\335\256D\221?\217\326\266,<[\223?\227!\355}P:\231?\241\233\325\316A\022K\277|r\254\347\243\222\261\277\340/&\216\232\276\244\277\337\367\'F&L\244?\265\251\302\017g\277v?\343z\224\305\221\342\213\277\256\250\311\255\014\006\274\277j\255Gy\202\035o?\231\021\230\221\216\230\270\277\363\241;n\357\021\244?(\214\357x\361\270\263\277\323\245\277\343\213\203\240?t\262k\006\221\342\264?\224\254\210\365Jg\223\277@ \3657S\222\237\277\010\263\003z\242+\252\277\326:U\030\321\331\272?\027E\332 ;L\253?-\\\313\367\313\005\257?M[\020m\240v\261?k\323U\343e\026\265\277:\032\2059\244K\262?\252\337\036*K\362\200?X\216\304\355L\207\244\277\263\376\225{83\235?+\321m\254W\335\261?{\'7fQ\032Z\277\3559\351\336R\262\264?\001\001\232T\270|\246\277\364<6>k\207\254\277d\3038\215QV\260\277{\225\252\235[\221\256?oU,\245\322\003\255?\2419q\007\320\225\244\277F\276\356\032#g\225\277\270\270\272\360L\237w?\036\0052\377\264\270\224\277\365\377o=\216\210\260?\325\303\225\300B\313\224?\202\0025\341f$\260\277o\225\210\245\312\253\216?\236\350\000\320\027\267\255\277\321\252\237\340\217.\301?\271Z\031\214\253~\242\277\303SA\347\022\227\260\277+\336_\252\307\031\235\277\334\337\341\236\272e\260\277\257<\372b\241_\266?\366k\336L)~\241\277\246\224;]\263h\222?\365\022Y,v\201\233\277\035\360Q\000\311`\270\277^\300\002\367~kl?\313dL\363=\253\206\277\020\273\220\270\002\017\233\277\351\353\234\032[\305\267\277\246\224b\357O\225\205\277\370\233\333I\342\222\265\277[\206\242\326H\220\270\277_\240\235\320T\027\246\277\020\322\274g<\331\266\277\231\304\273\267\270\310\244\277\213]\346j\266\307\210?C3\370\037\037C\250\277\304(\233\247\245\034\245?\357\330\352I\351Q\261?O\033\273\213N\266\261?\250\326\357\266\371\367\210?>\351\315\374\264\351\261?\237z\354\\w\215\214?\306\306\000\370M\310\251\277\373X\001!\251L\220?\006\200]\260\376(\234\277\354\233}\312\002\252\230\277\nP\203\'B\311\265?\200\250\363M\205\271\223?\351\315\326\033\003/\241?a\3127G\025q\261?\375\3615\267\231<\230?N\n\277~(\215\220?\005{\245q\277{\264\277\235\356\343\016\225\255t\277\337y\"Wr=\266?\207R\306\007Y\272q?S\310m\260HM\245\277\014\375\352&s\376\242?U\315\'N\263\331\260?5\313X\356\336\334\230\277\356$\033\33344;?y_]\224xH\221\277\027w\377\365\024\234\233? \r0\237\341\373\234?\001\035L\236T7\262\277s\231\314\007\325\316\224\277\355#\314%\017\325\252?\225\217\264;kg\264?N\317\377\352RE\303\277\342\006\332=o\314\220\277\312\263\022\272~\367\215?O\324\320V\236Z\244?\004\301\317\225A\233\257\277?\000\223i\010\200u?\004\020\321\260=*\230\277S\242!\236r\"\264?\255\240\361\005_E\201\277\"\347\030<f\333\233\277r<+\276\321y\274?WZ\305,\25019\277I\370\276\344E)\211?\251\377\363m\356,\250?$4\252=\002N\250?\200\242\307=D\350\262\2774\240C)D\242\241?\200\266\3355\237\367\253?FE1\022\344\223\251\277\217I\001e\361\307\201\277\323\206\322\336\021s\233\277\266\030\220\177\215\347\261?\360w\254\335\350\366\222\277\211\266M\232D+\353\276\362s\362\177\214\352\225\277Y\254\351\211\034\333\220?\364\307\022\201\240\370\254\277WoW\226\032\033\275?\240M\310\352^\365k\277#\303\232\264=b\231\277\345\345\250\356\022\026Z?\226\375\243$\312\331\227\277\373\2734a\337\351\267\277\200\317A\215`g\252\277\303\331\317\231\363\036\204?)\004\323\026\306\304\235\277\347\257\004\202>&f\277\202\034}\324\203\322\245?cvL\211\266_\215?\365\257\211\303H\356\247\277\313A\2306I\342\'?k$\314\001\316J\265?v\264rT\0229\241?\001|o$Hr\260\277\316[\313`\336\r\247\277M\222\032\350m@k?\316\023\353|\256$\277\277|-\257\266\013\333\247?\312\211:>\212\257\263?>\010\202-\027\202\244?\3732\265\2160\337\261\2777G17-{~\277\235\177Aq\324\003\227?\357\324\322o\340y\241?\010\030\325\205\001\361\255?\300#\273\232\347\322\251?\265~~\021Fx\242\277\306\276\365{S\307\263\277\'NP-\234o\224\277t:\240+H\031\202\2770?\304\321\241\377\245\277\331f5]\205&\237\277+l\014d(\004\265\277\360\\\354b8\030\260?:\325\243]\\S\270\277\306\201\001pu\341\254\277\273\252j\256^_\260?=\246\020\242\3556\271\277\363U6\364F\013\247?\265\220hQ\221\301\263\277\357\225\203\305\330R\232?\265w\337tj\351\243?a)/.\332\260\257?\213k\311\331\034\350\213?\032\000\300\261\241 \260\277\2613\237\010\335R\277\277\266U\227M,\261\241?P]Lah7\223?\216\244\323I\231\241\201?\2735\220\305\203\206\243?\255\370\316Wl\256\242\277\364 \'\000\363\354\202?Ml\"\331Ez\221\2770\264\274\212\344DZ?=\324\370\373\265\261\246?8r{k&\301\243\277b\245d\001i\303\275?\271KY\262\377\205\216\277\211\330\210\224\275-\225\277\272[\271\245\337\302\260\277\341j\256_\300\021\222\277\243v\376\201\002\317\275?\332\221~\352M\231\276\277\330%$4z\370\262?\236*Nj\243\371\241\277\360c\273\324\037\204\255\277v\351T\320z\224\265?8\325\016\2146\330\245?\372\322\274\251\\\341\244?\253\217\205\262\276\341\246?c\022\270P)\215\265?$a\020iA\201\251\277\245zs:\306\322\265?\'\344\344\231\315\272\245\277\200\255+C\322\214\250?\375\037\244\261V\354\252\277\244\0017maP\205\277\014\370{\003\237{\242\277\225\302\264\342\213l\220?\256Eh4g)\242?!vl\233\241\316\227\277\362\336\300\326\266\204\240\277\221\300,y\225\210\247?\365[Dp\306/\241?\345y{Q\275R\265\277\004*R\253\033e\266?\3703\207\340\301\272\206?P\373\000\nq\366\216?\374\211\024@4F\253\277\256\330A\377\317o\241?6\307c1\360\004\244?b\247\177W;\355\250\277\031J\246)]\026\267?A\240>Q4C\220?\0103J\360\245a\261?\252\007p\225\317\021\232\277\310\325\026w\277\004\221\277$t\267\336\234\352\243\277\364\023\302$\355A\240\277-\272\002\320HHu\277\255F\017\3019\202\250\277=\315s\271q\205\221?\345\331\321\000\2526`\277>\221mO\360\332\261?t\230;\230h\026\250?\300\362\005\016\031\205\271?\366a#x\0272\270\277|B\023z\265\252\255\277\334\307\304\243s\366\223\277\373Dt\022\377\243\246?\244O\237\335\227\317\260\277\325|\036\346\355:\243\277&\260\316\306\206\310\222\277\204\324L3p\373\232?\3309\352\3708\004\200?\336\t\336s\0162\246\277e\351\245\033\227\222\250?;\262\273r\235V\214\277\266O#\023\324\264\250?R\363c\216K\272\210?\000\037E\'\314\022\230?\n\230\260\332\342\271\215?\266\241\244\273C\331h\277\032\2209\213-dp\277]\3005\023\274\261\237\277{*\207.C4^?C;2`\326\201\224\277\006s<\201m\200\244\277\301\316 \331\'\364\242\2774Y\r5\210\014\203\277\277\'\346\024\343\333\264?`\310\305\361\253E\220?7\271\215\216\234\305\227?@\270Iq\346\317\241\277\3277r3\311\356\216\277a\3525\242(\240\265?\3636\"\2473}\251\277\215iW\276M0\224?xH\204Ba\375\223\277\362\227\361\217\317\321\220?\225<2uG\257\270\277~\311\032\312\327\276\253\277s\316{\246A\005\227?i\321d\243P\271\250?F\204\240\'\322 \206?\032\366C78\355\251\277\222}N\ne\341\251\277J\230>!\007w\204?_j\231\270\334\030\267?=~\255\222AQ\255?\350\004&8\205&y\277\033\302\301!ZK`\277\264tQ\030e\244\300\277\374\265\302\226nV\246?E\315\324\264;w\236\277o\r\250~\207i\223\277h\032\233\027\356\001\227\277\237\325\307\323\'\340\264?<%r\346\254\367\262?c\027\017\244K(\220\277As\361\240W\327\302?\344`b\220\2466\222?T/1\317P\210\213\277\273$\0020\321\032\235?\311*i\377\255\301\262\277\356\317\277Yh\024\240?\350,\277\374v\ta?\300\307B\375\223\222\273\277\344\356\373\235\000c\272?\314\0002\370\001\005\253?1\257t\004*n\255?\301\311-\355\032\035\242?\274\366\322\235\013l\246?\037\326\201{\2460\262?kw\031\000\371\'|?xZ\231\006P\336\222\277\216\347\"\237gN\232?+\316\230Qh\271\255\277J\376\373e&\313\236\2779\237\371\377:\004\265\277\332/\345Gbe\243\277\244\201I\324\323\244\224\277\302DA\367t]\212\277\021\275\301\231\3665\245?U_\330\365aV\257?[\330ww\256wu\277\r\367\025\332L\026\235?4\371a\207x\232x\277\260\003t\335\333\023\234?\351rv\005\233)\231?\206\026\016AS1\260?|\335\262\353p_\257?\273\033\371}\311\317q?\361\344zL\272\322\242?\006\010\3239\007`\242\277\026\037\036\356\007*\254\277\233:\0072\2172\230\277\340\3175\003\277\302\271\2776\354\250\364\nf\240?u\231$\344\351v\246\277\354\326.\212y\262\243\277b-\344a\342W\244?\235eX\0133\007\233?\224L\373\301\242o\240\277\006\330\346o\224\337\244?!\321\245tG\033\263\277<\003;\256\373\371t?N\341\261\273\316L\260\277\242\263\024\236K\211]\277\3255\td\265P\224\277\274{\205\212[\367\254\277s\343\001\315\222\247\242?B\240\304z\300\363\206?\025\370\235J\275`\236\277Iv\307Z$\324\244\277\350\025\325\241%\253\207?\331\312\377\373]\320\210\277\317\020k\002B\007r?\302\363\324\207N:\276\277\361\215\232B\005\236\261?\202\352\243\213y\300t\277\342\231W>\330\031\243\277\246\220m\341D6\237\277]\220\262\223\247\257\252?\256\201y\204\030n}\277\265\"l7\205\255\261\277e\256V\353\203b\234\277\231\204.\300w\233\264\277\332KA\271\220r\300?\213M\327@\020\376\235\277\325\003/d\016\255\254\277p\377j\266E\231\271?\231\246\021\267\237|\240?8\331}\220\023o\262\277\270\275\214\022\r\326\252\277\246>..C-\211?\rr\331eoY\224\277\221\341\261\246\357\354\261?\031U\203\212\313\314\250?\374?\372A\364\004[\277\357\350f\222\211=\251\277)6E\020\354p\264?\352GbIW\221\223\277W\356e\363\371\340\271\277y\302\270u\304\'\233?\347E\311\031\252\217\236\277\255\2721\335$\241\217\277\203\366\003g\036\215\246\277\236O\361\330j!O\277\337\270\177\020G\010v\277\304\016%\333\204\326\261?\300o!\372\317\306\217?\017#M\365\315=\261\277\214\362\207\262\r\304\255?\t\245qP}\311\250\277$p?\265\002\n\217\277\360\303\223\220\212Z\202\277\317\353\311 D\343j?,\350\365{Ja\220\277m/\376\214:\315\244?\314$\360su\320\203\277:a\3264\374j\264\277\330pb\342\262\322\223?\276\325\363Y\346\275\207?&\210\276\302\212;\222?8\231_\\X\343\254\277\234\366\340\014\033\222\230?-\372\347\200\277\242\275?\341\273.\225\260L_\277\210k\033O\271\357j?\253N}\014\027\372\246?\220\321\250Y\037\204\240\2777\025\304\342~^\225\277Y\\\036P\370*\261\277\316_%\301`\327\257?\000\004\312e7\336\203?\345P[~\224\221\255\277\356}\003HQ@\265\2773\217\303\374\217\334\264?\346\255\373\367\336\343\200\277\314\312\3039k\346\253\277\267\232R7\027?P\277/>\267\273}9\230?\336\030\004k\017\304\246\277>s\266^\326\020\243\277\033\357\032\241\264S\247?\274\002kv2\240\303\277\325bB\321\t\367\253?\r\240\364\365\257f\231?\263\tU\013\305\332f?:\r\363Q\331\302\213\277I\224\240L\354\320j?\307\320\022\270T\t\244?\217\253\034\337m\007~?_\335u\366\223\\\263\277\241\364\337\240\232X\222\277\312\203\353\347%;\261\277\203BPtl\177\252\277\277A<H\307\350\233?\014\215\301\361a9\255?$\022Z\200;\244\226?N\001\217\365\235\027\231\277\356\377To\201Nv?7\255\357\t\305%\217\277o_g\262$\353\245?\203~gBLR\244\277\010%+d\264\216\270?\244\312z\302>\271\256?S\224&\313HL\243?\271\211Wg\020t\237\277\n\035\204\224p\001\264?#a\334\310H\002\203\277\356\370\350\264\215\213f?r\224XU\204Z\226?\311\034\216C|\335\223?k\302{\267\031\334\206?\345\235d*hN\241\277\245\025\372\316H2\245\277\037\340\255\365{\025\262?\257m\177\212b\355\243\277\273e\026\335d\234\261\277!\361\003\335^\266\226\277\266O\253\346/V\225\277\3268t\235g\214\223\277\220B,\237\333\203x\277\225r\350\265\n \247?\212q`\265\376\351\274?\241\235\373\361/\222\257?l\365^s\351\206\247\277O\213\016\n\006\250\256\277\347F\274\317fXb?3td\345R\321\261\277n\002/\027`\320-?\363\322\271!?P\232\277Y\016\363Q>\233\243\277\014:\304\026\377\253\257?y\032\036\277\276\341\236?\241\220\002\342\351E\245\277\034\311\025x!_\201\277lG\000~\312&\226?\214\212\227\266%a\277?|\031\007\320\360\276\254\277V\246\277\017\204\305\243\277\236\265\023c\377\212\257?\337bw\202\246\210\236\277\300\326\267\356\356$\241?$\211j+%\373\266\277~\035\211\014\177;\264\277\262ST\260\266\201y?\357\322\260\254\t\256\245\277\375z\370\017.A\302\277Xgm\370\020\353\243?E\222W\216\304\220\251?\361\024:)\375\235\262?\335\323\240\337@\311\240\277\372\361[\277\366\205\246\277z\214\006\200G\272\252\277\325tS\207\001\262\255?\364Q2\257?@\272\277\350p\3171EN\205\277\366n\214\271\212\231\212?V\030Y\342F?\252?f\373\246fY}\222\277\272\035I\261\016\013\232\277\321\210\243\017K\271\262\277\242\210^\223\rz\262?\364\340\232[\031\026\203\277SU\222&p\025\261?\300r$W\244J\233?\311\336\260\204\033\266\226?\252cF\207\302R\250\277}\227\rg\2278\215\277\241\003\310\301e\347d?\370\tc3\357\024\246?\321\363\020\340\337N\236?\010\350\260>_>\237?\255>\270\004m\026\227?*O\220~?\243\235\277+\252\005~u\254\217\277\010\036\253\243\305\367\240?/\200o5H_\220?\323\n\005.\001\237\245?\325\215S\"\013\270\236\277\002&\337q\256\325\235\277\322\311p\235\006,\200\277^\323s]V\355n?\222\245\370\356V\230\202\277\n\031\367X\311\224\267?\277\324@(\'\006\246\277N\353s\r\233-v\277\306\310\216\333\032Q\224?\022J@\357yj\235?\256Z \006\0013\223?\351\232\262\351\r\336\253?[\276(\204\307\336\252?\343\200F\037#\305\251?\355\305*\271nH\273\277\014G{\252\336\352\262\277;-`\276?\373\227?D\216\337\'\021\036\266\277\322\305\206\336R\362\226?\271\\\235r\222\341L\277\rB(\344\212\021\244\277\252\237;\304i\301\255?\256\'6 =\251\205\277*\220\"\301\251\236\244?\023,\004f\017\317\245\277\017\340\357\343\002Y\252?&\344\031\016\303\252\236\277\330\353\373wlg\261?\001\'\376\2226\214z\2777\016\274\264T\345\301?\200\364\314\023\230P\267\277\207\222jF,[\204\277\305\255\305\215\343\000\236\277\350\253\224\220\225\326\261\277\323\333o\226\220r\224\277\t\324\341\310c4\214\277\215\rZ\325j\311\250?o\320\206\245q\305\265?J\274\023\'\231\256\236\277e?\247[\373\306\237?\246\n\236\317\240/\257\277~\232&h\262G\235?\003\341\356T1O\255\277G\r\260\370\202\023\230\277\226\332\275\341\223m\241\277L\314\"t\237-\210?xbw\321\274\007\205\277J\227\035(\276e\260\277\'\224oY\323\006\274?\2141\367N\232\203\245\277\252a\221R\357T\243?VI\204\376\216\002\240\277l\251\376!<p\203\277\350\321M\310}\032\265?\266\003\244\221L\273\231\277\303tK\335\201\377\247\277\206\275@t\373\306\242\277E+\225\241\361$\246?\274K\031I\241D\266\277\247C\242\223\314\314\261\277_qx2\003d\242\277\002\266\323:\212c\265\277\365_|\243\257\271\266\277a2A\215y\214\240\2773nn\211\253\342\261?mm\323\200r\177`?\365\265\370\232CW\253\277\2073\317\337\232\013\260\277\251C\t\330e?\245?\316\205\267\267\242\000\266\277{c\334q\024\001\202\277~[s\305\335\212\276?\027 /\235\240\263\203\277\010g\314\372#\300\274?\346\315nX\336u\257?\216h#T\241\t\263?\\J\266\000\177\364\244?\341_\277\036$\rC?\212\005\235\276r\312\241\277\227\ttl\206\023\262\277}P\315\261z\"\300\277\343\277cId\357\257?\024\321{c\350\275\301\277#}\022*\352\211U?9\204I\263h\260\215\277\354\314\027\303\213\021\245?\373u\241\372\263\036\263?UYrYM\001\234?\337&\213\014`\212\235\277\3416\275\3554u\266?\3362Ba\334\275\272\277s\374K)w\357\221\277`uo\201T\266\237\277\360\023Gh\247\356\256\277\342\224\242#.a\256?\263\203\263p\003\245\200?\221\3078@\313p\240?&\267\253\371\0313\256?Rv&*@\247\245?\r<\337\353\371Y\266\277\325\310v\313\365\005\212\277\003.\232>\200\273\230\277\345\321D\320\266\316\246\277X\341^o:\226\230\277\314Vv\\\313_\261?;\\O\357\233E\264\277\260V\204gnL\243\277\315\323Fo\360\033\235\277\207\217\'/\225e_\277a\247\'\261@]\227\277\026\006\232`\017^e?r\366\"\315r\\\212\277\202\327i\\Xk\245\277\0310\221\317\361\237\227\277\243\267BYlb\222?\214\330\266}\324\360\227?\333\353/O\210\017\255\277%\255w\232Y\306\236?\017P\236t\031\010\214\277l\265P\020\221f\252\277\302\275\214mp\222\234\277\323\227\t\347\240\324\241\277\37711\257\007\355\231?\264Pc\235\320C\260?\366e:\310z\352\242\277\232\304\216\335\236$\256?\027\373\200\334\312u\203?\003jN\325g\301\242?B2\350Ph \255\277ugCK{\033\224\277\t\330\227j\251|\245\277\333\205\271\212T\003\250\277\244]\016M\247\315\260\277\035\"\007\201\217\357\223?\"\340e\371\330,\201\277\275`\033K0\337\241?;/n\336\035\266\204\277y\0220\221e\257\266? V\020A\215\236\262\277\372\215\030\342]1\244\277`\017\301\225lN\300?\257\272?G\261\027\246\277\262\220m=\025l\234?R5Yw\202h\300?F\346\305\321EA\262?\304\310\210\207\232\340\276\277\010\035y\252\312\300\225\277s\370\266\000\3515\200?\027\306\002 \241ev?\246m\336\304\177P\264\277&\362\004&t\235\207\277D\237\234N\322O\244?\347;\377AuU\267?\342\230v\004[\303\266?[!\207\326F\245\263?\236\371*n\034\344\205\277j@l\006Z\337\220?\016Y=C\204(\226?_\'\017\240^\226\237?>ur\360\302\013\241\277\032\202]i\001\245\257?z\224\200d\231\000\220?\032\241\215\003J\033\251?1\257\372D\277~\241?a\301\376\226n\354\203\277\240\247\3752g\210~\277\'\241\017\014\034v\245?\202\340E\001&\301\246\277\233\274\274v\\\352\220\277\234\010J\336!>\205\277\371k\312\375\371\026`\277\254\207\"R#Y\240\277<9J\2673_\247\277%\032\030t\262\305\235\277\'\235H/L\310\254\277\354)SS\221\236\243\277\3134\357\206\373\223\233?\231\032\253-\357\215\264?\267\361\022\000\233\013\300\277eL#bw$\230\277X\304\223\236\211\200\251\277\363\320\265#\215\367\261\277\300b\256\314\236\355\200?\372%\333\377-f\210\277\331\240\256\215;!\255\277\367\321\311\274\252\277\262\277\311\357\364\241\350\231\267\277\272&\034\020\362\220\250\277\022\'JL\230mp\277\322\321f\007_m\263?\356\352b\010\216E\271\277pjH\333\247\256\272\277,\237\004\240B\346\213?\000X8\332S\255\203?\317\"A\"tS\246?Iq`\362)\267{\277\223\355\227[\357\300\236?\334\310\247\034\004\376\177?3\302\006\341\334\245\273\277\274gF\3472\233\211?%t\233\244n\034\240\277\026\235\017I_\026\251\277\022\"\255\240N\301\236?\313;\337k\032\243\260?\025\327\252\215\0032\220?~\346\334E\354\261\263\277Hl\334\351d4\254?\235\330\300Fd\013\245\277\260\227&YD\256\201\277\225\375\256\257,\275\260\277SS_\325Tn\254\277\256\235%\302\031\336\210?\020\252$r$\366\256\277#\030,\366\032\306\300?\303\363T\025\360\222\254\277\237\213fG\324 \264?\254O\333L\352U\227?\n\324(DM|\204?\342\332\256\356\273\025\241?):\246\274\332\312\264\277\271\000\306\231\310\311\250\2778\020]\222>\301\260\277\017\320\322\206n\377\247?A\312\365\301\364\305\271?F\221{\311\272\337\263\277|\200M\r\341\346\237\277\"J\335\001d\312\240\277\364\275B.\r;\242\277\255r\270\245-\274\206\277\337\352\374S\013\336\266\277\213\343 \274\030Z\262\277\274\367[\275P\370\235\277Ir\306\322\037\344\215\277\276\261v\177\3113\261?\345c)\271\243\352\215\277\354\305\235\335\257\316\203?\225{-\026 \226\225?\327|\266\263i*\261?\377>\227C\226\014\263\277\3579\000\377\220r\222?\215-\343\350A\321\230?i vA\213\277\236?,\276\004\356\310@\252?8uh\376\220)3?\277W\354\275m\364\236\277f\343mfh\246\257?^\211q]/\024|\277\232\302\0313\302\355\266?z>u\031\236\010\273?\341\322R*\020@\262\277G\014\222\335\254\202\246?\010\302\037\023\250\242\224\277F\372\221\226\303\251u\277\3426\372\225\024\222\273?Bv\027U\211\306u\277`Kx\251\324{\272?zc\333\356rF\204?\366\247\310\226\267C\250?\214];\346W\332\222?\211\222\027-\353\371\271?2T^\273\304\316\243?|\022#G\320C\211\277\220\002\202\374\334\215\241?&\037\"\237Y\236\240\277\361s\027O\336\302\270?\375\006\003\2127Q\205\277\213<\265t\270\353\241\277\354_\366\3369\351\250?\021\353\355\255\347\226\230\277oi\207\234\3710\253?p\253\370\037\353H\210?-ie6\214\322\250\277d\264\207@\353(o?\350T\262O\230W\242\277\361\250\241lIR\271\277\264M\326j\330\341\227?\341\"\367\336\373\352\211\277\031\326?(\024\257m\277\366\346\276t\241\257\245?\242|i\216\003\373\231?;\325\003S\035\375\243\277\371P\017\274j\206\206\277Qr^\224\224\371t\277_\363\242h\356\352\241?\354\266S:\002E\232?\302\274\324OE9\254\277$WF0\334\025g?\305\375\200\343t\335\254?<\367\022^o\224\262\277\027I\330\215\314\372\253?)\333\010f\274\020\252\277\221$\030L\323y\207?J\336\366\360\211W|?u?\031\375\025\350\237?\240\317!\212^o^\277\021<\266=\330_\245?\207\2521|\317|\202?[\002O\300_\225v?[HF\355\177:\241?\232\311u\315\342h\257\277L\353\333\320Z\211\267\277,{\003lK1\250?\336|4\344`4\232\277;u\304\357\262\311\245?\307f\003\312\2017\243\277*(\210P\355\275\237?-\365\017\201\271q\251?\324\370B\030\242h\225\277K=\027\270\315_\245\277\247\343ct[F\235?\000[\3270\225\017\234\277\350\313\350\017+\331\276\277\220\017\017\357[\376\216?L \304k(:\236\2777\305V\035\030\237\211?\246\237R/\354\000\263\277\242$\373\037F\220\267?\216bT\315\310`y?\'V\357y\002*\220\277\261\305}\260&4\241\277\200\356\332M+\311\251\277\255\303O\336\261H\256\277\244q\226\030\227\333\265\277\215\256z\032\242\'\267\277\035\244$\200\034\312\206\277\022\237b}-\"\303\277-$esV\305\271\277E\310\326+\255\321\272?X\010+\222p\205\227?EEHi\356\374\242?\322\315\260\243\263H\201\2777T\252\272yt\250\277\245C\030c\033}\242?\022Q@\305Y\240\223\277\245\362~\\\311\\\251?\304\035\277\213\034\266\226\277\305\020\256.\357\266\254?\306C\301\213\034\212\224\277\200`\353\2263\254\261\277\343)\331\376\2515\251?\006\200(5\267^\223?\343\347\330\222\215\375\265\277I6\242\334qi\220?8\302\234\035\247\014\267\277\332\336\261\232\t\246\224\277\300\255\032\000\t\273\262\277\376;\371_i\267\235?A&\177a@\345\252?\257\302\027\265\371\341\270?Bu\025\220\300^\247?\271\200\237M;\372\267\277\337UI\210]\227{\277\016\205p\262\037\276\267\277\331\226l\253rv\261\277l\255\355u-u\265?\230$sg0$\271?k84C\326\270\234\277\200\346L``\332\245\277\211\357\266\235\227\222\220\277\316Y\016A\322\177\234\277\033R\2671\271\217\224\277\231\010\361\347\263\375\207?\241\r\263%\273U}\277\017*\370\355\237g\234\277\2251r\3755\000\275?\252\303\354\241\301\350\244\277Q\322\013\227\255m\265?-2\325\030\275\362\261?rq\260\354o\200\256\277\316E\rbnL\247\277(K\374\2726\t\211\277\353\360\006\335\363\221\260\277\367Yz\254\215\241\252?9\207\r<\034\356f\277\255\016\352\202\'\005\240\277O2\375\215w\254\270?\365\267\352-\217M\237\277J\206\017Dw\343\273?\r\364 \327\300\000\274\277D^\271\347\344c\261?\262\020e\275\266]\246?r3\017\366\234\360\225\277\"\004c3;\214\277\277\323D\202\342=*\266\277_j\353\203\013\307\235\277\234n\006O\026\017\222\277\331cX\223\334\364\202\2774\233R\253\240\300\234?\200\200\365E\202\177\261\277\27701P>/\254\277\013\257\tL-\363\220\277\266akD\324>\243?\021\310$\307\243a\264?r\022\326\337ox\202\277yD\207\236\255\341\276?0\230\212\260\232\254\245\277\341\242\306g\316_\263?\231\'\006\274\025\273\273?\031\273`\264\253\033\217?cJ\321]\317n\233?\243^\366NU\350\225?\345\2026O\320t\216\277Gn#r\n@\260?{\251\240\252:\236\254?\216\354O\346\216:\247\277,\027\356\\Dk\227\277\345;\314dL\321l\277Hy\246\314I\2372\277\362+\212\364p\210\266\277\260\247\245:y\004\244\277\204@co\023\222\260?\273\243\2317\3653\220?\253\240\0348;\332\301?=\266\225\000\002\n\266\27707\356XB\037\243\277\337\0351\323\214X\236\277\312\3006\332\235{\271?\014\027\201.\353\210\260?\262fu\327e\220\220\277\370d\206\272\274\023\256?\310\305_A\0064\252\277d)U\257\307\262\256?/\277\321\021\255V\243?\320\363Y\313\312\177\262?\213QR\320\001(\265\277\347\304\200\265\020\205\205?\251p0\333[+\260\277\r\255\004w\312\237\252?P\236\304U,\276\261\277]:\230h9\025\261\277\005 \2607\223|\246\277o\032\324\'ce\211?R\232\022\002\240v\204?,\207\236\336\357\323\244?b\260\311\225\3672\227\277\003v7v\344Z\243?\276Y\266\332\341#\222?A_\330_\362\262\203?+\236\274\322M\330\201?\354\352\272\271\206A\255\277\215\305R\342\276\026\223?\341\004\376[k\261\216?\253\370q?C\331\224\277\213\353@9\020\211\224?\014\021\342\3629\254\265?\235\322\321\345@\374\263?\245_{\023\307\020\204?V\027t\311h)\276\277\223\372\020+\356\320u?:A\345,\007&s?a\025x\313\217]\274?F\"I\275i}\275\277\0225\030h\013\322\264?w,\203\000BM\242\277\305,Hm\014 \201\277\222M\023\244\210\206\210?X;\327\037\200k\241?\\\327\225\243o\377\253\277&\307\336\344\301\350\233?\210\227\364(\203\323\251\277O\267\265v\225\025\256?\327\346\352\302\342\024~\277\214E\333r\004\211\263\277]\275R\333r?\300\277\346O\332f\325a\277?\335\233\347\357(f\243?\341T%I\270\326<\2770\265.\n\351\206\264?\300\037p\033\'+\247\277\270\267$\'\336\344\232?\371\217\346\000\360\366y\277.r!\345\302F\261\277\016{\226\206\2153\235\277\357}\304\214I\252\254?N.\232GAB\262?F\016\277\361\275\271\260?\003\000\206\332(\240\227\277U\217\264YCL\254\2774\000Z\310AR\267?\301\364\246\010\025H`?g\225\375\250\370N\177\277_f\354\343\353U{\277z\206EP\376}\234?=\321\371/\324\272\250\277\213\006d\224\264\264\237\277\313K\210\000\311\232\220\277\345\3515\277\334\211\243\277\016\324(zy$q\277&\253Z\353\233\257\271\277\373\215\032\377R\335\200\277\365g89\217/\220?\314\334n\317pg\225?\203\304\275e\253\230\243?+\224\234\323\337\"\250?\025\222R|\327\000\261\277\332\313\265\245\007\224\263?T\332X\344K\275\236?U>\261\257\205M\245\277Rx3\212D\212\224?oj\367\376\207\025\260?\340\250\246\334\214\347\242?\367\002\021\327\275\024\220?\374\005r\242\004x\255?\327\337\357\227\264K\267?[\333\261\246\211z\242\277R#\035\301\332\037\245\277\270\3709$B*\242\277\240\\\253\251\200Z\266?`\345v\252\342\333\240\277]F\226N\302H\227?W\333\373]\261\276\245?\320\276\364\010<F\256\277$-\323\220,\327\267?h\326\211S.\002\227\277\030\256\264\014je\220?\n\330\006|\261\r\235\277TE\n\242\277w\261?\304~\224\377<\301\233?9S\356\230\247G\251\277\357e\373(\370\202w?}\365\245*\2174\264\277\331\234\207\360\r?\210?8p\001g4%\223\277\205\334\323\240\233a\207\277\313\2758\200\356\010\216?\214\222\244\216\321?\225?.\023\213\375\325\325\217?\300\354\004\346\301\316\264\277G\335\351\005\376\260\236?%\376\t\177=$\252\277fB\211\310\310h\215\277C;z\312,0\263?NP\246\250\233L\275\277\014}j5\272Y\267?V\311\373);\323\264\277\206/\306sW\376\236?\'Q\273\322\032\006\223\277Y\235\362\247n\211\264\277\037\271U\227\006\343\264?,\331\255]\354>\252?TC5\275\022\234\235?\207K\236\030\177\361\252?u\223\355\253\303r\231?\210\330s\326\026\005\231?\004\017\241\370\257\002\237\277y\266O\352\000\214\245?\035\0219\235[\275\227?\033\265\2727\347\263\226?8dE:\262E\244\277\327Tp\345.\341x\277G\205-\321GZ\247\277A\221\002E\307\t\241\277w\220\213h\377q\302\277<&\210<v\324\252?\317\330t\326A\217\243?n\367\231\301\203\236\260\277\034\344\373y\027\212\272\277K\355\221\256\3721\211\277\230\253\300\177\035\373\255?\275\351T\244\006\t\263\277T\234\276\246\367\337\206\277\367\005\024\212\273o\202?\200\377K\305+q\250?9\223\037\322\366\351x?_\003\006\324\231R\260?\271O\035\243\277\327\263\277Ufu^\200\343\231\2777\236@k]~c?\374\"}3Q\013\247\277JV\250\373\246\332\227?\247:\307}\210\032\245\277O9\375xV3\220\277\017\340\033\006Z\374\247?\271\351o\302L4\205?,\020R-I\204l?\343Z\307\204Z\274u?\337\374\343%\364\220<?LZ\'\243\312\330\232?6\034\2157\200\273\270?\321\341\037Wc\227\247?\\\005B\324\267\342\212\277\\\024f\274w.\245\277\204v\007\235\321\230\261\277T\256\371\306w\311r\277\337[c\300\226e\266\277\001\214H\351\350i\223?\271\r\\\346\026\201\300\277-\'\245\345\220\234\271\277\037\267\346\231\001\026\251\277\351\343\203oSp\227?\301\257 Bo\220\244?\357\016\251y\177\016\263?=\376zHg:\301?\260\010\3300\254M\244\277t\202UM\312\026\276?\340\314\r\365\255\232\205?\265\340\331e\254\217\227\277\244\010\272H\336\334\226?\006\026\"\3447\337\245\277\005\343,0\3102\221?\035\340^~\274\242~\277\232\372\355\300\247\322\263?\027\237\326\023Q\031\263\277%J:\232\200\326\245\2777\224\357\240\204\034\270\277\245\360%c\037\247\264?\342\277\277\246\tD\271?\203\317E\235\307~\240\277$\030i\275\033\007\243?\334\222\\P\027a\202\277=\003\013Cv\376\255?\030\327\2255\000\257\207?\242\305\304T\022z\247\277\221 wC\315q\200\277\270\267\307\265:J\232?\276\014mz^\235e\277{\224sdV\300\254?\334\345n\321\'\207\270\277(\2074\347\213\252\212\277h;\247\340\346^\212\277&\276\327\n\262\364\266\277_[!~W\355\236\277\224M\372\360\251\001}?\347\341\005E\214\206\221\277.\264N\354nB\227\277\365\0069l\333u\235?6l\361O\002\302\263?wy\315/\277\362\220?\324\274\231\244Su\302?Y~=\272M\303\255\277\035A\261\3378\024\253\277G\363\355\352\277\341a\277z\204\r\257,<\260?m\347U\256\275{\230?\303\321f\'qD\265?\337\002+>\277HX?\006\013\306\3043\316\271\277sBiT\034\026\234?\267\335\202G\020\207\246?\230\376}j\313>\215\277\232yj;\305\023\301?\303~\314\023\225\267\251?\003\364\037\215=\337\203?w\267\276\262]\022\250?\305\236\322\223\211c\215?\031X\215\347\354\020\207?+\315\245M\341\t\223?^~\311d>Z\266?\345zz\0272\332\243?Bi\235\027\375\225\233\277\" Z/\221N\262\277\247\010\330A\365i\266?\323\354\252wjn\243?\037\226\373\246\335V\253\277\370\002\025g\244)\255?\324H#\227\221\004\215\277\310.\2509\202\235\243\277u\200\230\177\300\320\231\277\273Q\221\263\270\273\261?\214A\214\353\221q\262\277\332\373m\3674\255\254?.R\177O\376\234\257?\263\030l\345d\323\246?Dw\r\315\313\221\255?\203b\014\314\035U\233\277=h\230F\332\030\231?i/\365\245\207Y\207\277\352K\275`A\t\240\277!\300\320\035\250O\247\277\303,mx\364X\243\277\373\344\374\rW\305\265\277#\244\347\304\365\035R?\210\222\345e\007\374\251\277\211\232\'\310\261\346\246\277\3334g0\205\026\253\2770k\201\345\370\236\240?N\211d\277rj\242?\225\0106R\214,\251?\223\252\251\031>\033\253\277\307\241!\t\003\271\225?\323\207\267\312/|k\277\321\\\301\313m\356\262?\251LEK\231\261}\277e6X\005\177\306\267\277\351\346\036\206\265q\220\277\022\244\'\211}\025\226\277\2708}\356\331\331\266\277\327\222\357\314\224\316\255?4Z6;\214<\231?\236\346\233\373\334\314\264?\022\t{]x\251\207?\033\017+\262\351G\237\277iM3\371 \340\243?x\024\306,6ag?Y\300\031\332\001Z\263?R\026.\371\024\365\203?E\013\274rr\204\200\27718<,U\351\275\277\r)O5)L\177?\003e\331\203\333\323\270\277f\341\243\006\322\'\260?\336W|\353\254\354F?\277\202\327\215\320\354\264?\300L\225\037\343\312\266\277Yh\247\257\216\237\253?\264\354\213\323\356\212\223?(\3041\227U\320\177?\317\273\251 \3268\257?\377\265Y\213|\305\231?\366\002\177\255\321\037\244?N\364\227\177\203\333\234?;\307\246\212\201M\243?A\014\314\377g\'\231\277\227-k\250\223}\223?\007\350\364r\005\301\254?\"z\236e\036\330\204?\274[\360\354\177\360\251?W\t\217\330\\\260\240\277\220\001\233x\214\013\257\277\013f[\r\252\333\254?\264\022\314\335\264\204\275?\313B\025\242\021$\222\277\251\007\222X4\302\212\277\335>d\247u\332\245\277\025$\252\241\211}\242?\304\033L\233\031f\224\277\337W?A\304\225\261?\033\267k\261\0373\251\277Z\314\344f\274!\233?\214\232FB\315\320\251?\216\254\027s\345\377\253?\210\005\341\024L\223\202\277t\345Z\223\033\240\255\277d\277\036\032kx\243?\016\027\247 ,\'c\277\301\030\257\244\326C\260\277!)\320\010\370rp?\303\377X\255/,\247\277\027k\344\227\222\001\270\277\224\3457o1\363\302\277\316\367@\234\212\205\265?\255\270\241\365\204\313v?\2222\3049\226\217\256\277,\'\226\376\337\272}?\027\037\'\252\030T\267\277\243\006\211\336\306!\260?@\010\236\214\234`\225?\026\352G&\341\372\246\277\352n,gs\266\200\277\322\n\332P\374\264\261\277\354\230\220M\335\243\217?a\235\024\020\227\260\221?\376@\376\344\032\373\234\277\255\0310\363#s\264\277C8\377\007\233(\245?\001\231\314\335\303\331\240\277q\"\243\254\315\014\275?G\205\0149\034\370x?\200\344d\212\334\364\210\277\337\207\023\220\237\353\237?g\214\260s\t\326\303?\222\017\2164k\254\240?\256o&\371\306\002\253\277\226\334\027\232\024\360\214\277\234f\355\260\025\262\204?\341\224\215\336W\251\266?\360\"\022U\013\365\226?\240\330\226Y\314\316\225\277d%2\234Y\253\256\277\220m\267\361\305\231~\277M\336\325tW\225\236\277\371\rJ\320\271\274\254?L%\337\002Pm\210?\034_\201\301;!\202?\006\327--(F\200\277\266\267.K\316\010\243\277\202\363sA>\305\261\277\376\357\320{\251\331\234?\304uT\013\273\254\243?\365%\034\350\030\033\263?*%\220I\304\355_\277\202\200\275\260\037\354\264\277\360_(\254\203\363\245\277\232\016\372d(\177\177\277V\304\320\031\273!\252?\306c|\\\020\302\213?\273\036\2411\315\350\236\277\217`\210\272\005\316\263\277\013\003\025\'\246w\256?#\302\234\031x\311x\277\010}?\212\223\257\241?v\345\351\272W\245\253\277hcd`\260\026\261?\017\331 0\250\270\265?\303\222\363%\023\324\243?m:\265\263\177\255\270\277\304\301\371X\335\234r\277\t-o\\\032t\225?\311\031\200H\265\270\263?\221aV\035\226\216\231?\273\363\201\016\261\306\252?\344\221B\013K\316\265\277\244\250Ed{\241\274\277\347\017\322\211\240S\252?\211\034\022\\7D\243?\363\206\260\014PH\222?4\2541M\256$\205?4),i`\031b\277A\362~X\315]\216\277\347CH\362\376\3501?\271\022>qe\"\221\277\323\313;VGh\241?\357\301\\s\010\231\203?\351\253\335\373\374\013\204?y)og\214\006\233?j\227\363 \311S\235?K:\025%|\262\242\277bqG\302\212\nx\277cN\334.\010f\260\277\261\265{\022\272u\260?\014\354\271\202r\010\276?\nh\256\006S\260\260\2773\367\250\263h\020\243?tBC@5\027\243\277O\361\305@\345T\221?\017j\344\006;G\246\277~BtT=\334|?\326,\376\001\215=\265?\324\030]\363\207M\242\277|J\000\223o\244\253?\323\352\340\331\224)\210?\277\201\253w\211\263\267\27718\333\314\374%\242?b\373\031WO\035i\277\334\3763\277\254m\263?:\2352\036\025\222\250?F/\203>\246\272\256?\334Sv&3\232\262\277\373\276\273\247\237Pz?\235\332\016\363\366\343\233\277\214\347\0107#Mi?\200\017\034\373~\310\240\277\236\030K#I\220\260\277^\025\320u\303j\243\277\036z]~\271p\262?HV\361\207R\010\256?\r\367\211\201\235\234\211\277\256\336\023\2051\334\241?\213\354\271\240y\344\241\277\222\372\022\336\234\177\242?\377\203\036\256\246\013\230?\356\357\336\331/\177\217\277&\231\256\203y.T\277[\321\203\330\245v\261\277^xNJ\301\340\252?\214\304\332\363)\333\225\2776\\\343\010:s\230?@\265P\367\356$\216?\325\030\226\r\000-\217?\355\'\035\352c\010o?\021\316-B\210\307\250\277\3618\270\0343\200\265?\213c[h\021L\223?\271\000\')\177\247\224?\322\354\374\357b\251\264?\320e\274\312Gg\244\277L)tO\306\na\277\202b\323\330\177\331\273?\177e\226\355)_\261?\343Qj\236C\217\213?\177Wa3,t\235\277\nki@\220r\205\277\352\317\207\230\010\326\226\277u\2644\024<s\223\277#\257\337JH\024\260?\363\000\220\236\036\223\212?\"\256B@o\253\245?\221\244\216\341m\222\227?\267\005^\230\\\234\033?\034\367\266\357\325\220\223?KY\036\305!3S?\255\t\006\276\031U\276\277\3228\307G\230:h\277>7\263\200)\331r?\240\237\266\312<\017\274\277p\r\344\250H\370\271?7\345\215\320/\245\241\277\014m\372\234?\031\262\277\2262\335p\354\252\223?\324r,\031\217\354\200\277\001\313\317\tct\300\277M\236o\177\215ho\277\311\342@\275K\316\205?)\002\032\333\347\317\241\2778\227\013\022\366\364\215\277nRXk\366U\270?_\201\343\205\'j\260?\302\272\n\020^b\262\277\004\022]\341O\364\205\277S3\265\223\334;\203\277\035\274\317\313V\020\251\277X\323\327\035\1771\251\277\316\320\366  \262\235?\374Y)\272(\303\240\277}B\361\371\240\354\272\277ZD\316\003\214\365z\277\366\362\270\347\035\242\243\277\232#\364%Z\320\243?\266rI`\022\313\275?\355\231\231\177\317\004\227?w\255h\t\2272\206?FQ\031O\305 \273?8\211\321\214\227Gi?\277\204*\325\306\352\276?q-\026>\035l\263\277G\232\246\3775\353\260?\n\331\372L\372\277n?\2117\226\365\254\267\260\277=\034Z\312\"\225|\277ZU\024\014*\344x\277\232\312\034\233K9\261?I\254\327\366\332,\224?\2623\254&\247\320\232\277\2210\027\224\317\310\246?\036\311:L\253\316M\277\257\344\264F\003-\264\277<\363 \010\245q\265?\354F\353d\022x\232\277\363\006\201\321\n\346\243?g\325\347\215\223~\256?\262%\r\036\241Q\272\277z\241\333Y\271O\277?\334\374m\005|\212\227\277\220BY;\231,\207?gK\202\303\232\320\210?\374\244\323\274~\345\242?\014\207q,\035?\260\277M\205\266\266\377\037\251?\203\247\262J/[\245?\003O\314he\333\261?K\304|n\3412\247?\024\335\323\274\311\002\271?\003\352`\354q\336\260?E\332MG\t\230\222\277>\237?(\306\014\226?\026\t\314h\306\333\241?3z%M\322\336\222?\033\267QT\014y\240\277t%\341?\222#\236?\306\264oD\320\360\263\277|w2\372L\032\240\277\177\324\304~R\212\267?\266\221\220\351\327\r\224?/#\177\021I\245\271\277\250\2756\024\014}\206\277:\254r\237\321>\205?\004\223\217\217\234<\205\277t\213<@\233-\270\277\247\306;%\314\363\257?\304\316d\027\263\347\233?\214\'\247\310\2629\246?9\303\301Aj\347\207\277q\323\377\232\010\265\255?z(\232\316\272#\200\277\256.\010\212\013\256\220\277\'\306\022\2774l\202\2778\303\331\303%\371\262\277\272A\333\331y\207\263\277\005\267%N\242\337{\277B\027\031\214/\343\215\277\363\207!\205\034;\254?Y\376\227\373o\nV\277\307&\215\300O\312\222?Xs\307\264@U\253??\377h\264X|\211?\306Y\330\246u\244\306?~<\320E\311@\233?\367L\206\261\n{\251?T\227{\200\334\232\214?r\232Fu%\007\227?_I\376\314I%\254\277R\253\317F\322W\236?\010j\005\206\364\236\234?\\Z\345\276\371\216\252\277\335\225HI\352\370\236\277\273\2156\203t\216\263\277\304\370?\201\340\377\264?\300\246\231\347\221\021\243\277RNu\240\333k\254\277\304\221G\023\1778\241\277\222{\322\3462+\241\277\242<\344\300\202\363\253?H\217\302Z\233\227\234?\246!Mx\372\260\206?\022R\232I8\261\247?\313\334t\206\246r\262\277\253\253m$\034\220x\277V_z/\014\336\247\277\305\275\375\276\245A\246\277\330+\372p\320\007\266?\2772$\223\014,\272?J\010@\nW\221\241?\337\234\034[\376V\226?O\255\377\2775@\273\277\033\256\277 \216{\236?\016\356\346K;\210\243?\277N/\260\243\232\201?\304\203\3233I}\227\277\020\023\306\253E&\252\277\014F\356\316\016\264\241?\344\325r\215EV\224?&\251\241\255\365Q\235\277\245\374`%\315\342\225\277\356?T\252\315\236\267\2779\2254\302;J\233\277\005>V\037z\266\236?\355\017\337\rB?\235?$\244\205\343\245\300\242\277=a\003n\312\302m\277\373\027e!dg\243\277\263\224p\314\002N\220\277\014\371d\253\000\031\273\277\255\300\346LH<\265?\037\216\033\352>J\261?\357\252e#\333\234\264\277\306%\017R\334\224\265\277T\002\3538\316\323\244\277\367\361\030\003\010\330\244?5<\347R1\324\253?\314d\352\272\355\200\217\277\202\316.\3566\241J?\0057$\010F\332\257?U\370Q\250\333\031\231\277\002 \362|e:\202\277\342\265YX7\276\300?\326\252;\210\000\220\270?\276=\025\005\023?\272\277SgD\207\013\023\261\277AC\377\2133\032\214?reTqNI\265?\361Q\020\2715i\265\277\321Z*\263\220\033\257\277\222\266|\347{\300\250\277\320\021Gw\212e\226?a\247\033\211x\355\240?\361<\220\247X\355\270\277\017\343\257]M\004\265\277|\327\322\262C\201\261?k@\r$)Z\262?\265G\232\364J>\220?\212\333)\261\317\276\266\277\030\375}\333\2054\270\277\227\340\332\314\364\365\253?a\275\233\022z\017\242?\301\226\355\223\200~\253\277\367\210Hd\036\t\262\277la\211l>Zh?&w\377l\2114\254?\346\3331\335o_\243?uX\361\2756~\212?g\314{5\222\014\304?i\002\375\n\2612\267\277\274\230\302\347\2540\237?\007)\361\324\'\232\265?\230\213SrCK\204\277\221\020\261\204P\016\260\277r\\#\356\225\271\263?\213\200\304\354\3343\207?\273\330\207\220\222\364\240\277sb\307)\002\375\240?#\003F\010\252\177\250?\222\275x\301\207\373\246?\006\354\304\345\363\221a\277\275\241\265\255\346\212\203?\031\273\365=\2108l?\343\373\353D\344\264\232?$\r(!\036\203\265\277x\211 \234QY\244?e\274}\346\261d\267?>(\262\\\353\031\244\277\304-\307\006\035\013\231\277x.\267\365\314B\261\277\017*\006c\332\266\253?R\243j\274\343\216\243\277\254\022J3\'\241\204?z,\213\013\031\240\234?p\204\352B\212\205y?\261\375\235\353\353b\215\277X\236@\333!\343p?5\037\317wJ\274\254\277\342\211\375\245\001\302\264?D\357\300\273!+u\277\014\312\336\335\r\303\261?\333\225\017\034\246\341\200?@\323\227\035\370\267\247?\342\001\007\216l\224\250?lfs\373\026lv\277b%\033\241w\n\262?\256qJ\362HZ\270?\357\257\2219\371\350\277?\361\206\344\000\330L\203?\244\306e\204\'\261\225?^\020\364W:\323q?\007\306Q\273\032b\215?\336\226~z\210\031\245\277r\377\270Z/\210\246\277\325\351[\353y\205\240\277(@\370\323\231\201\251?;\177\277\352:t\215?}\006\023*\325*\252\277\270\311Q\003A[\244?\235[D)\352\276\221?\263\235N\231\361\037x\277\375\006\316?\321\353\260?\250[\202OZ!\263\277\222\037+\302T\354\265?g\254\223S\006\301\300\277\014\266g\230{O\253\277\203\312\347\263\0352\260\2771\2753\031\201\373\253?\016\321\234\3739\327u\2770^~\232\013\215\254\2778\200B \037\306\223?P\263\365\375+i\234\277\360\223a\372\375\370\241\277\231\356:\321\036\205\235?\025\322\322\031\2441\236?\2607C`\204\234\270?\306\334?\210\206\025%?[\325\300\225@\303\240\277\332\243K\236\272n\262\277\245\3734\332\323\350b\277\370\260\244\231I\377\233?\230\216\223\335\326\236c?X\250&4\001\374c?\022&\253\267K+\274?h#{d\201L\211\277ta2\217K\312\245?\216.\304b\324K\227\277\234\224\240\014\2033\236?\232\345w\022X7\223?\277\316hx\017o\265\2772*\303A\013\006\361\276\261\224\2446:\\\253?\302\244\0271\314\030\225?\006N\350inp\252?\226\214\250\342\2565\236?\202 )\033\373w\263?\003B\035\210\272p\255?\335\343\265Db(\223\277\001\375U\273\001\274Z\277\271\225\242\224\025U\252\277H\352\213\231\2403\271?\3747\357\244S\362\230?\376zrb\023\2578\277\003\027\372wi\317\250\277\222\212/\351\340\343\265\277Y%\035\266\035\302\201\277\317\250\010\324\241\204\204\277Y\362fd\326!\210\277\212\211\005\335:\223\264\277\316\363X\301Q\"\230\277\217\305\305L9F\242\277D\324\206\351\"H\234?\264\207\232r\221\365\241?\234\\\376\221\237\010\267?\366\365\0337\227\022\213\277\202\006-\017\341ra\277~\353}\350\'s\224?\317k\3449\177q\272?\221]<\023\360\236\233?^b\016`\033\021\265?\360x\207c\024\305k\277\242i\342\023\n\373\253?\363\220\372[\017\264\275?\232\265+I5\361\240\277\321s\004\250z\003\240\277H\370\013\003\240\003\252\277L\243y@\240i\225?0K\004\030\017\307\254?oW\310\254d%\267\277\023\314\323P\365\033\203?\352M\004\227\202\324\256\277\341l\340\242\357\3374\2773\314B\206Q\206T?Wo\220\3551\332\266\277*\260%M^\376x\2771\227\205+S\343\220\277\3736\231\231Q\271\217?t\"\264\204\r\237\232?t\232\022\034\244\261\253?\035\234E\305\207G\271\277\334\237\206\010aX\225\277J\\`\020&\330\227?\270\255\334\376\203\226\234\277p\217\236Lk\316\224\277\304?\234\207\256\237\247\277\206(&\325A\210\277\277\374S\325r\320\367\205\277\312\235$\243\326\375\272\277L\272?\223\014\032\260\277cR\321\224Wlh?\r9\252\203\\,\204?\377\242x\200P\257\255\277B\366\r\302G\312\245?B\254q^\037\221\240?\001\341\360\201^\211\252\277\273L\036\243\364\370\243\277\330\306\225\237\377\300\207\277\223\024\227w{\314\233?\247/&\302\322\247o?\nJe\224\274m\255\277D\324G=()|?\335Ai\251\277W\215\277\031[&\325\216\212\261\277/w\231\022\004p\263?\325\341\273\336\006!\200\2779\220\030\037\203\302\222\277\235\330$>\034\236\242?\314z,\207\203X\257\277\260hk\203\003M\277\277\032\2420\337L\274\206\277\223A\226[\027>\277\277\033\017\315\t\030\233\251\277\222,\001-l\016e?\254\007\302}\037\034u\277>\352\006\263\327\270\233\2777o\323\213\005\302q?0\\\263l\304\377\250?\005\323\207\351\2614}?\372s\037nO\325\222\277a\003s\253F\246\236?yMOw`\361\207\277\035\266f\335\205\026\210?\337\313j\233\275\342\227?\206\370\013,|d\232\277\327@\317S\372\037\201?\317\022o\264o\214f?\235\220\\\010\370!\260\277a)V\210]%\241?\232\225A\300d\016\250\277oGAi- \276\277E\312\213\254\241u\242?C^eP\356g\272?\350\202\203\224S\355\245\277\372\007\277\333u\264\264\277@\252\370e`\315\246\277/\30166/\355{\277\031\0101$c\351\234?N\216\253\356j\266\240?}+}g\347\355\224?\301}K\241;\272\245\277\005\361\326)\367\251\246\277\347\023\003\215t\034r\277\263(c\220ya}\277\007\017\026\212n\021\262\277\34786\300\256Q\226\277\n\365\313L\001T~\277\243s\037L\203\336\265\277\314\004\242\224\350\276\222?*\317\014\232\3161\262\2773s\201\353S\202\247?x\304b\271\344\343\264\277h\002OP\262-\204\2770`t\363$\273\256?\235\336q\370J\260[?\313\205\217B\262\373\240?\234\353\200\304\327O\212?1\326\270\031\230\261\234?1v\021\006\264q\254?\222\340\262\210.\256\252\277\270\243S=U\313\222\277\'\206\302\377\362\266\220\2779\303\253<\372(\262\277\002\351\267P\273\275\233?\306\316\030\337s\276|?\021\030\225K\325_\266\277\341\375f\274t\220\233\277=\226\334S\024\033\252\277\364R\262v\275/\226?QB\210\270\267\242\254\277E\337\357sK\206\264?\365\330c\275A\205\247\277\330\345\333\354\177$\231\277\326\373\224\242\360]\227?t\347\271\211\213\326\262\277\216\233\r%\360\327\264\277v^\335\'(\237\253\277\265\347\337$\351@\224\277&\006t\222\037\215\246\277D\374\370w\351\177\226?\304\374\237\345k\270c?a\363\362YJ\346\230\277#\006>\267\t\351\252\277t\361\206\303\\=\202\277\376z+0\303\272\242\277p\035L1\236\345\232?x\305\316~Ah\253?R\231\022\207\263\365\243\277\233\177}Pq\365\222\277X\205\317\262\014[\240\277\234<\320`8\035\261\277\240\341\350\307\2752\300\277\262\377T\212\263\347\221\277o\353\315\230=\320\244?\247\332\021\246$\373\252\277\'G+H\037\'\271?\370\245Gg8\214\303\277|\342\202\n1\305\244?\204n\247i\277;\270?c\241YR\022\222\223\277\004w\216\353\374\022\257?\tp\312\030\020\007\216\277\314I\014\266\002=\224?\031M)\005\246L\211?\376w\247\334\"~\244\277yX\272\033\017)\227?d_yWK^\253?}H\260X3\237\251\277\307\371\204\006Q\253\252?\275\347\377\224gJ\261\277\t\304\216\351\337\202\255\277\231\035\217\223\316\203\251?\343\310N-\005\357\254?o\001\242Sn\026\214\277\346\330\016n\304\262\243\277\334\"6\033k\266\272\277\365\223{\307i\253\262?\217E\200\321\272\335\215\277\342G\025.\231\230\233\277\261FJ5\203\324\230\277R\214\205\265\204\255\241?\246!T\354\362\010s?\315\0171\025\206\362\222?!\317\262\244\nt\251\277\nw\321\202\376~\242\277\367bv\273\006\036\262\277q\200rx\272 \277\277Z\n\256\272\241\nd\277d\223<\031\232f\302?\367U\252\375o\257\260?:L\353\225\342w\267\277\362\217\325c\223\277\260\277\0306)\032zD\242\277D\177\264\300\235,\245?\342\032A\262\217\343\246\277\364\351\000M\223\334\245?\325\334\332\0227\232\204?\230\317\200\353\264\335\230?\n\207X#\022\000\267\277\361\022\212\211\311I\243\277\237\264b?;g\250\277\nW\032*U9\270\277w~\277\350\271\366\242\277\350\010\305\311c\242j\277\311\002\027\026\276i\223\277\232dhwRz\231\277\035\375\203\357\201\'\234?\267\r\r&\263\373\220?\272\0308\306/\337\221?E\312\304\243\327*\261\277\277\335q\212\322\224\225\277\266\210\233`]\363\275\277\220\226\262\235f\227\233\277\213C\322\203\236\244S?\304^\335\3213bl?\364\321z/\006U\246?\267g,\307\225\301}\277\013y\'\311\032q\217?I\300\363\213\221F\257?\225@\313\227}\300\251\277\340\371V\250\326\277\260\277R\010H\201\255<o\277K\022\031\371\354\220\236?\245E\252\342\036\033\251\277,\241\212\035V\010\265?\0161\001\212\353\331\255\277\262t\204`c\252c\277%H\365\245\023P\267?\214hZ\210\271\311\260?\253\010\306\345\326d\226?\364F\314\201\335\347\235\277\347Y\253\006w\265\247\277\347\266\224z\300A\231?e!d\365\263\247\250\277\273\323y\014\216\234\246?\334\023\355\177\317\033\243\277\030\326:\342\215\005\263\277\260\t\320\25766\245?\212C\"\253\236\"\275?v\307\345\242\374d\265\277\310\305N\017\n)\211?r\224\223\213\335\325\211?\251(3j\365@\252?\357Y\322+^\313\264\277\257\247\224\t\220\204\244\277B#\0340\352\354\272?\312\233\221\252\330\310\251\277G\210\367,\371\323\210\277\004I\022\322\006\265\257\277\240\327\352\205\331\372\256\277\\\261Y,\333U\267\277\027\215\213E\373\242\262\277$\261\315\254\312\244p\277\217@Q\020\320p\245?\357\353\227\203\310\022\213\277\"\335\325y-D\222?\363\2420\345\3010\207? \026\361\321\021z\260\277\235\237\271\305d\230\300\277\335\247\320z\342\327\240\277\270\263P-^\315\202\277\034\317\245&[wo\277\230\016)\257Qk\255\277\032\201T\360\361Sz?\2368\013(\216\323\254?@\225z\245*0\225\277I\264>7O\013\232?\231\266\347O\342\322e\277\337\307\274\245\253%\240\277\255\232\301R\371F\230\277\325\233\320\342q\317\202\277\267\235\256^\003-\200\277\325\212uA^\355z\277\370k\327\257\232\246\300\277\323?\355\350\306g\207?\377*=\250N\251\247?\337\371\017\r\023\360\233\277\322\262SL!Lt?\035\020\025\375\362\013u?\220g\202\240\216\221\263?\321x\374\362\305\013\225\277#\222\311\365\262\363k\277\364kXu/\217\300?\376m\033\214\033U\264?\346\232*Q@#\204?\013I\257\374\375?\217\277\276\234>\307\021!\245?x\241\222P\016\277\210?!\244\264I\234\340m?4\345H\030\251\215\226\277\353\212\026\326]0l?B\034\251\333\216 \240?\224x\375\007\312\232\246?\201\037\212\326\030\205\221\277\032\027\340\022\252Y|?\204\232\034&\341\267\236\277\035\243\024>T\007\231?\204\235\257\331\237\312\246?E\347\351L\366>\232\277\300a\231E\357\370\242\277\230\247\370\243~\000\201?R\001\010rP\241\234?\272\036E\n\302\017\203?\346\343U\241Rw\242?0O>\316w\224r?\264Z\277\353T\230\250\277n\221\300\036\306\244\224\277\211\355\2577f/\273\277\223|\364\212\347&\232?*`\214\361-d\221?\212g\212\005Z\365\261?\356\325\002{Jy`?\316hz\310\311x\257\277\243\301\006[\231\215\206?\006\370\345\003\201\366\260\277 \031\203z\t\211\271\277U\356Q\244e\022\265?sPD\227S\355\244\277A\252\2307.\013\265\277\250\204a\355\210U\305\277i\327\260-\030d\237?\336\356\361\341-X\242\277z\232{F\315\270\243?\027]\027\343\313\253\225?\353\304\307.\177\306\223\277\335\376.\353\332\250\271?\253W|j\003\244\252\277\310\235\315\356P6t\277\260V{\200\256Iz?\317\303\241\010\033\366\213?U\370\346\t\355k\221\277pa\313\331\254b\264\277\321}\266K`\'q?\300\371\257\270\264!\257?LOy\305|\302\262\277\263\035\263^\255J\242\277d\324W@\216y\206\2778\205\325\250\016\302\256?\343Xd\357\016?\204?\372\235\235\233\240\252\242?2I\035\233c;\207\277\2710\201G\326\365k\277\rt!\313\273\007\300?\303\021\00527\335\230?q\367r~\331\342\224?\272\242Y\321\326L\267\277\223\372\003\215yx\237?\237\021W\306\320+\260?\266\025\266\264\264Q\221?\357\331|L\211V}?\005\267 c\033\212\262\277\013eC\2356\203\210\2770g\242\311j\272\203?y\361\002\225\'\007\257\277+\242\375\033\357\214\267\277K\227\370:Z\271\232?\231\277\323A$\021\230\277:\211\"\2075\'\234?U\367w-\344\204}\277\016{\025\364\261$\254\277\200\226\204\321;V\245?\373OA>|\242\267\2773\030[\313N\231\253?\263\276(p\013\014\232\2772\221zqQW\267?\334\366\241*H<\261\277>X\252T\037Q\223?)\357jg\305\323q?\222\275\353\376QB\213\277C\262y\247\n#\240\277\021|\223\341\r\315\244\277\022\013[\207.\030\220?9\216\004\017\323-\251?\023\3142\021\004\301\260?t\2475\366\270\316e?\374\354\261\240\302\"c\277<\230\234p\030\253r\277\021[\333\201\232\tp\277M\003\242u\013Q\260\277\346e\005\334Oph\277\317\276k\376\204\377\246\277\277\277w\366\227\223\240?\350\207\002\255\2517\254\277Q\352\315yq[\250?\325A\266\023\312\206y?\245\245\245\277&\350\217?i\321\'#k\377\246?\323\n\246\204Wr\243\277\252\354\334\312\003i\223?`\006\214w\333\215\255??\352\226\365\236\200\240?\003\3021^A\016\246\277d\tD\214\372\242\303\277s\030l\230\222W\260\2776\210C\306i\352\277?\221\251\354c<\215\262?0\312b\213.M\213?\311\003\n\324|P\262\277\342\222\377\010\267P\266\277,\301$\325J\010\212\277M\267hX\236\314\247?\274 \261M\336\242N\277b{ \237\261z\305\277\025\204\312o\232v\021?7\310\312\362\262!\261?\037Ti\220\270\231\270\277d\335\252\364\320\007~\277f\341\202I\013<\256?\n8\323BI\323\252\277\212\303\252\272]\332\261?\300y2k\370\271\256\277nn<P\242<\270?\263\223\032\343U=\266?y\333\340\027\252x\245\277\017\277\206\216\221\026\242?\303qr\271\356<\266?\253\"1h\360\272\264?\351\276\1772\203_\240\277\007\221\322\"7\305H\277\311\355?`SL\266?\337\332\013\230\262\224\241?T\244.\367\006f\257?\316(/\324/\304\266\277\000\356\267i\364W\301?a\321\205\255\231i\207?0Y \257\2121\230\277x\370&*\261\273\217?\370j\002\031\210\355\242\277\272\220{\022\350\344\222\277\026f;SY^v\277\230\356n\225\3143\245?\3458\223\037\371b\222?\321\026\001\307\032u\260?H\233\347B\005,K\277\237\313 \r,\013\243\277\250ZNFE\316\226\277\010\307\353\357\023\033\262?\336\213\305\336#7\222?\322\343\203\240\317L\252?q\265ZP\302N\260?\313\321*\346cY\271\277\306\027q\006O\007\253\277aE\021?\000\203\264\277\267\322\333\336\234\364\211?p\233\327\314f\030c?}\005\005o\321n\255\277\342\203\002\273H\325\262?W\354\331\360<\247\206?\013S\r\033\247\206\201\277`\266\314[1\277\253\277_\300~\037\252\202\222\277c\rH\321\260\361\266?\034\343(\262[\000\251\277Q\227\275\277\326\r\241?,\250\2568\310\346\260?\335\013\351*\361\\\234?\361\021\242R\213E\226\277\362_3\027\245\207\250?\225\333\337\314\376\220\253\277\241\231\367\007\375O\240?\003V(\312\203Tm\277\3560Y\"\366b\257?H]w\232\321\272\276\277\025\332\245MS\023\266?\267\331i\263\355h\247?\352\333#\360\302~\210\277\037\273\010<\036\317\224\277\370}e\357\265\'\253?\220\351\261D\360\264\264?}K{y\'\304\270\277\203\267\364a\236Rg\277\013m\251H1\330\254\277\267w\004\300\227\214\224\277\024\212yg\270\257\230\277\274\001\217\226\305\331\222\277\tc}|L\310\254\277\336\225_\276\034\267\260\277\335\367\314\016\340\332\252?\215\231\273\027\343P\214\277\316\200s\350gj\246?g\246\2434).\262?|2\227\204\333\260{\277\214\007Q\323\211\237\376>\034\257H\230S\312\260?g\007\004w\374z\245\277\367\222\327\317k\256\300\277\201\357*\373V\371\271?\256\025=r\t>t?\226vA\023i`t\277\220OI\006s\332\252\277\236\363-\375\250\333\301\277\023\345\376\226\365\310\242?Q \036\342\363~\264\277\037\"O\214\270\316\265\277\252\000O\366U\374\220\277\271j\224\227U\240l\277\355W\252\267\246kd\277Hd1\365P\254\223?fg{n\240\006\250\277m\342i\353[\225\225?\205\2739\275SM\267?\364i\370\377|\264\210?\01328K7=\205?\365\224\007g\207$\265?e\371,?0\257o\277w\3135\001\271\343\243\277;)\"\354\327\021\252\277\235\242\215\362\000\354\263?\334\256\317f\243\324\262?\347\031\232d\035\344\247\277T\247.J\210c\242\277_\200\237\'?\226o?J\323D:$\033\231?\242m\315:\274\033\202\277\260\335\2616W[\241\277~l=\3120\270\245?\255\251\306\004;\355f\277\270\335u\345\362\204\222\277\030\273\245\037\233:\223\277\025B\250\177\237\323X?\234\300\335\356\325\343\270?\244\r\326\177\366M\255\277\r\325\013\t\006\343\257?F\241\316\260\221\r\277\277\276\251DSr3\251\277\206ZcC%\275\225\277\372)\210\317\251\272\247?A\005\203\017\360\246\300\277\232\333z\000\263\026\236?\034\014\212\223\223\274\256\277\233\017\360J\301$\300\277\263&C\246\217n\274?;\231\301\306\352[\235?\341\003\2573\300&\262?J\305H\352~[\233\277\322\366Y&>[\225?~\252\247\357H\322\213?rO\2516\3441\264?\\\212\243\006!0\224?\356$x<\n\374\265?SI{\353qX\266?\351\377\247\215U\303o?\333E\2146\326yf\277\362\206a\"\020z\263\277\352\267\307eXY\243\277\003;\274 !\007\231\277\354\371b\353\316<\255?\310\340\364\305\253a\261\277\026\267\342K\231\024\217?\260l\030, v\266?\313\027\2357\026\030x?P\277\277\236\326\026\230\277\025J\257X\303\036\245\277\343\313P\332\342\035\221\277\236\362\220P\277\323\260\277\032\2335D\374\365\276\277\250W\220(?;\265\277EZ\202\340g\252\247\277]A\342\241}\030\244\277\300\204\202qnW\253\277\354}\026\341J\206\260\277L\2625\225ZU\250\277\257\326\3352\256\326\202?1\035\214>e\024\225\277\351\330\350;\027\301\264?\275\363\226\200[\352\222?\356\036\233lt\014\253?\350\317\251\356\331\034s?>\331\232\315%\\\261\277y\343k*U\336\271?\344\304\020\307\301s\255\277ZL4\305\365\n:\277\340JC[\026\334\203\277\206=\271,z\036\300\277\312\227\013I~\177\242\277K_C<\024\224\226\277\360\316z\245\310\000\274\277\206\220\317\242\303\216x?\"S~)dU\301?\312\330\322U\334-\223\277P\336\001\363v\232\233\277\2560\001T\361\361\265?\322o\3662\312\210\263?\t\311\250f\242\227\201\277\375f\023\021Q\244\263?\363\327s\217\014`\260?Xs\262BYj\203\277\343\363\327R8\200\247\277\023>5y+E\237\277NVZ\337e\205\300\277\312\006_\322iJ\207?|\327\357da>\241?>\351\354[kB\260?\277B\360\030g[\246?\007\243\375\356\362W\260\277UM \225\263\032\201?\014\232\264\322\361\240\261\277\231sj\003@\371\244\277j\264\311\330\"D\223?\322h\373m\261\314\274?g=\260i*\032\264?\014\314\313\311x\212>\277\t\235\352]WV\253?,i\3759,\344\274\277\216,1\243\007\270@\277\305t\323d\271\333\255\277x0\371\005\213\262\241?a\005\230\362\314\203\273\277\375\307@\325\374Z\273\277Pyn|\371\227\251\277\370%\314@]\236\272?\315$\255EfM\203?\266\365\356~\n)\231?\271,6RX\227\240?y\rbM\300_\231\277\341\321\227-\255\342\270?*\241Y\360\273\032\252\277\270\007\3200\256eb\277\t\360j\242Se\247\277sU\032\357c\333\225?\324\346\260v\241\372\256\277\353\005\350L\203\021\247?\315M\271\224k\304\240\277\200\207\036\014\377\234\244?\236g\206{\325\362\207?M\317\034\317[=\242?\250R\261\301&\341s\277\236\2509\364 J\253\277\007 2\336gw\256?2\226\335(\255\344\261\277IJ\371\270\007>\250?\372\277\221\203\372\036{?\205@\303\036\026\343T\277z\323\260B\003\003\244\277\3679!#Y\336k\277\'~\371\252\273F\260?\370\362\237R\315\205\273?\310\006/\217\355\005}?e\026P\200\371\356u\277\005T\325\333\322\355\261?\177\370r\033\025\233e?\304\301Yr\005B\234\277\234\316\207\222K\n\222?7\337\202Q\306\307\262?-\177\024`7\260\263?!\366\031GE\006\226\277q\303\364e\255\257\255?Xy\26029\010\210?O\362\010\324qp\221?\000H\030\234\030&\215\277\300\216GC\275\264\271?\243\rR\364\272\331\207?L\223\37499?\244?\267o\301a\330\010\243?\255\006>\261K\362\275?\333\245\313\317\322v\266\277\354m\271\254\305\233\246\277\210\231-NS\213\265?.\003\216\303\257\315\222?\025\320\343M\276\000\256?\312+\364\314\241\221\302\277\t\331\376\334<k\255?\205\312\310;\327\tp?\"\020\336\202\363\346D?\327\2560Go\272\255?\255\"\302z\3107\243\277j;6\2027\210\232\277\307W\005[\313\215\257?\214\005\324\366\034\336\277?\370\354Q\023\231\346\260\277\373V\324\201Z\361\235?u4\3703\264C\242\277Y\370!Zm\276\257\277\262iu\221\036\305\250\277\346\360\262\n\244\344x?\335\034]\371\346;\260\277zK\025\343\362\206\232?\326D/D<\023\243\277$\333\024\214\214\362\231?4\346\236\026\304\237\262?\n\016|\371uN\243?\316\357\350\024\000\212\215?\261\240\357\211\343\022\214?s\242R\305\331\206\244?\303\333\366\206*V\240?\261\232\252N\315\224\255\277c\177\266k\315Y\260?4\223a\303\212D\253?7G <d$\252?|\236\026\346q\237\204\277v\0327\232\013\216\222\277\325-q\3123\215\243\277\363\031_\nc\364\202\277\035\234\315l\324\277\241\277M`\341\231\001\005\200\277\242\005\2764\200\206\266\277\353hz\377\3547y\277\302\220<k\222\334\263\277a\203\222\002Z3\240\277o\234yt\335\304v\277\301/\347\377d\312\265?\242*\2603,%\243?\002\371\331$\302\037\266?\345\032V\2710\234\255\277q7\037\3615\211\242?\326\305\211\231\247X\252\277f\321w\023\236\315\223\277K\325\016G\345T\260?\030\375XK\317\014\237?\032\231\265\267Gsp?\240o\005\342\243!m?\325n\275,\361\003\271\277\363\320\314\234Yy\240?\032zY\004\001\034\260\277fYK0\005\221\236\277+\361Z\321\374\356\214\277\247P\3250gU\240?`\263}\013\263\033\304\277\250\312;\307\254\333\222\277\234\352\335m\370~\242\277\244S.\244\030\021\244\277n\365\363+P\202\220\277E\233&\230\2340\245?\274HneJ\341\226\2776\223o\276+>\241?\024\216\243\366\203]\262\277&\306\272u\303\203\221\277\256\006\016ij\004\241?Y\241\306t\364\367\260\277\233\236\224B\000\235\205?\265\026_K8j\216\277\3467\374\t\235}\272\277j\211\327\n.E\255\277\251\264\333\ta\005\201\277Tm\006M\255i\222\277\0319;/J\222\241\277\277\310\265\222\302\242\262?\320\021\273\263\276\315\206?]\225\205\265\t\363\242\277\307\347\363\0147\315\262\277X\351\275d\350X\227\277\350c.\345\225\362\242\277\276\204\033\\\030\376h?\035q4\301\342\363\257\277\320\235\250\360\202\361\223\2778\357r\251R\201\226\277\242&\311\212Zh\252\277t\200@\253{\357\252\277xm\335Ms\032\227\277\377%D\213~\344\252?\301\206\215\032MGi?\r]\332eo\274y?\306\302\234\031\256\315\225\277\366\220\r\007I\t\224?aX\272v\3053b\2776jo\375#\240\251\2777\r\225=\344J\246\277\260l\370\007\262!\232?\256\327\033:\346\376g\277\210\376\217W]\345\222\277v[\357,\345Wl?\320\242\241\366\377\026\210?/\010hQ\310(\270?B\203\204\337\240\261w\277,\325Y\317\207\332\204?]\213\226f+\356\203\277\340\241\013\315\225\264\260?\373\004\210\377\346\177\252\277i\364\301T\216\267\245\277\344|\243\242O\320\240\277*$\2460+}\226\277G\020\0162/b\231?\2262\316%\212\024\242?\364\177\322\'\034i\200?\t\336aM\351\323\245?\327\266\317`\241y\276?m\300\233\003]yr\277\372J\003\371\337\255\302?d\230l\034t\270\201?\355\315@-\314\010\230\277\207:\370\326\240hm\277\242\254{\'\240\264\222\277;^C\226S8w?\034I\344\336$\314\214\277Qv\347\326\260E\256?\247r\252\'t\275\236\277\037\244\277\246\226\361\234\277\276\225\220\035\200\212\261\277\334 \250V*\372\246?6\022\221R\373A\233\277y\031AX\001\214\240?9\205D{\204\225\224\2772\033\207\250\376\236\216?\347\344T\201\321\017v?\023\017,\310\204l\303\277s\347\271\336\266\013\263\277\305\333\262\251+\303\306?\313\001\231\340[\231\242\277t\264\253\345\020\341\242\277%}\356\205\200j\252\277\031\222\257\030]0\243\277V\347k\317\236\017\241\277\030\203g\246\206\250\204??\373?C\316\031\220\277\002\367 J\243D\245?\304#\004\262\"\002\211\277(\350\240F\200\326\256?\316\"u\366\031]\264\277\226\032\232>?\262\241?\360\255\241[\377\217\245?[Y8*Xg\251\277\312,\024\000 q\222?F\317\033\200\244\345\262\277\021\310\264\236\355=\241?\033\367\243\372\257.\264\277k\304\010\033\\\221\230\277\003i\326\341\255J\217\277\336\016T^\022\010\237?6\264\t\347\300\342\206?>\236s6t|\252?\326,1\263t\254\234?r\265\334\201\216q\266?\036\204\240\316\202\342\206\277\010&\035~\341w\226?\321J\370)\215\344N?\227\272Jz\243`\213?_y_\253^\222\241? sp\033)\367\266\277o\232\036\2623|\252?v`z#UI\254?Yn\353\tz=\242\277\t2\362/\341\234\240?\t\310\311d\317\353\245?w\271\226$(\271\263?\325\262:\324:\202\300?D\022\317\365\361\360o\277IGsSey\235\277\231\301\377\350\033<\227?\237\260)\246\026\242\202?\250\223(\"D\n\206?\023K\333\214\237P\277\277\210r\301\273\371D\253\277\257\275\242hy\265\253\277\177\r\030P\363_\245\277\016.w\371T\320\213\277\367\256,\217\260\235\301\277\334\270\326\204\246=\236?\003R\210\037Bk\260\277\014\327\247\005\371\242<\277\025\366,P\365\271\244\277J\344W1\234\204\242?\215\333\306\217\233C\253\277\352\365\212\270\321;\244?J\225\211\347^V\246\277\274^X\355\021\034\224\277\026&\363T\306<\360\276\007\217\241\246\346=\246?/\204\2437\376%\257\277\214\321Rj\262\275\252\277(\343\205\2124\204\262\277X.\303OOM\233\277\000\335\252\'\016k\230?1\265B\364\001Y\254?\243,\263;\2634`?H\014\212\363\227k\243\277m~FK*\315\243?T\375\261\214\217,\257?N\376\002\343f\243\237\277\324`mQJ\222\246\277S0:@\322w\244\277\257\261\202\361\341\217\253?\240\373\361\350h\210\260\277\361w\271\202o\001\220\277\341@\257\027\343\'\255\2778\252\261\326\324\261\264\277I\346\031z\274\204\252\277x\356\226\261\2452\272\277q\024\264\263$\324c?`/\275:~\t\254\2778\244\270\010\356~\243\277\314\343]H\233\315\263\277\035\212\347\310&\336\270?$\007\307\220J\251\252?7\025L\031\256-\216?\021\300\034\032X~\240?9\304~\220\221\237\226\277\3207Y\263\335\013\200?\037\323J*\254\022\241\277jf\333^V\350\274\277\006b\376O\361\266\252\277\312\326n\301t\241\260?\024\201\335\345%S\251\277u\001\245\242o\032\256?\354\344\352\262&S\241?\367JL\214\377\010\244\277f\267\214\014Q?\232?\272\336\025\024om\261?\177\022\311\272\226]w\277T/=\036\360\346G\277\243\024Z\257\303\210\253\277h[c\027\331 \227?la\210~\334\236\241?-\206\355h;\316\220\277F3\254g\275\376\245\277I\203\345\'\210\000\246\277\270\333\235f}M\257\277\005N\026\377\222y\206?\025\311\204r\362\355\250?\325X\006\221T\307\224\277\365\233\177\215\303\305\243\277j\372\340F\226\224\263\277\265\230p^\021\034\221\277\342\202S\204W\304\223\277\370\326Q\311\305\037\245?2\240h\255\376\003\234?\014\351\316\375r\007\233\277\306s\264e\254\324\236\277j\365T\007CR\212\277\023\306_\302\177\266\266?}\327]\231\267y\262\277\037\326\337\025\351\265\241\277t\234l\177\006[\230\277QO\272\347\006\004\263?#\265\346[\035tr?\306\007\226\222\223\252\251?\206\255F\306\332\305z?l\251\307\311\2003\272?\333W\014\213\217\023\233\277L\333\"\313\255\374\235\277\020\207\303\352\310\254\217\277%\353OU1\373\265\277Nb\234\240\032$\274?w\004_\201\255Y\263\277\305\301\032\323\254\335\246\277l\264O\2235\253\217\277\203\023\3144\317\037\262\277\245\266\244L:\245\273\277\322\317\037\004\373V\273?\277\016\264\266\262f\202\277\352\2364\001\276@\243\277,\264\336j\247>\247\277W\301\222\215$\372W\277T\0373\001\276I\243\277.\005\371\3545\352\251?\341\003*)\220X\264\277\322\371\023\'\352`\240\277\360\022G\"\377\022\261\277\240\216\211\204{\nM?\023\324\014\326{\365\270\277t%\364/\216\373\235\277\251y\354\343\317\271\246?\310U\r{G\365\246\277\244\331\257\373\215G\200?\347\337\365\2107S\261?\033l\347\376\304\300o\277\025D=\247\365\202\216\277M\325\272s\031\206s?\000\222t\034\276\334\246\277`=\034\236\277~\261\277\341Y\036\304\353Y\227?\365\210\007\273\037\021\254\277\333\360\365\013?`\262\277\260\021\262\3408\330\246\277\032~BIP\213\246\277\342\254\227\231(d\234?\021\025\022~\302g_\277Q\337E\203`[\264?\275:\307\204\311-\224?\217^N\\\236=w\277,?z\200{\377\242?\240\255\373>\242Q\220?\205\021V\201b%\225?$\325\'\213\272C\252\277\245.}\253\305\025\240\277\334\2004\022\313\033\223?=f\250\2702\010\217\277\362UZ\321\213\274\237\277.\270\306\305K\326\243\277\000\211\300\356B\037\236?u\342u\200.%\245?\214[O?)H\277\277\333\017)\246RJ\214?\350\326\232\330-\010\301?\355\r\016\316m\204\267\277f=\306R\331)\244?B\343GU\241t\252?\320\"\010\033\357\377\263?^\035\335J\351\201\264?\037`r5\"\231\260?\237;\275\205\243m\236?\364U\345\230\364\205\211?\261\026nV\207\303\225?\247\267>\244\266X\265\277\003|\360\223\341\363\204?\022qQ:\365\002A?\023^\224\017v\207\231?\034aY\332\301\366\302\277Lc=N\246\316\214?\332\302)\031\006\000\230?w+\020\035\245\352\244?_2\240\355q\350\257\277\017\010\203\210\030\344n\277+U\322\371\253\216\270\277\313\335\3255+\005\276?\263J\324|h\243j\277#[/\311<\013\207\277\273\251\273\202e\246\261?\272\3012\343\377\225\201?c|]X\213\342\260\277WN6\253\035\"\275?\017\260W \3379\246\277\354o\344R\226\305\200\277\350G:}(\234\260\277<r\010h\374\035\253\277O\024G\017\361\303\225\277Ttg\330wz\232\277\325f\345\374\241\013\242\277\332\364\001L\177]\232\277\021K\363\2271k\251?6\341\225_\365\264\221?<\320\2555lI\226?\341`\201\237\273\357\272\2779+\373\305X\002\211?4\314D)\370\225\243\277V\365\273\221[\226\232\277O\016}\332\353\213\245?\022G\371\021\002d\246?\246G\202HK\354\263\277\325\036\010\023V\363x?}d\312\\\235\031\277\277\364,\200\277\'\035\273?\351\010\357\231\014\236\245?\270\230\014\227\004\224\252\277\014\256\021\237&\361e\277jc0\355\341\323\221?[\314\365\376\237\341\204\277\350\334\006\332}\322\226\277\340u\376\231w\220\234?\334\3408\336 \253\243?\026P=\367\213\325\200?Y:c\271\2176w?\023J0\235\3049\265?\031b\275A\233\322\234\277A|\370K\362(\267\277\001\033\247F\206%\254?\325\302Wc`\256t?dF\033{\034]\247?\024\026\277\240\375l\275?!u\375.\367w\265\277\337\026\254\264\341\266\241?_i\321\233\000^\240?\271,\316\314\014\207\252?5\342\312\301\217\216\202\277\020\325B\201\316\335\270?\343b\006Q{f\227?\003B\305t\255&\271?\262\357\255\361Rf\255\277\212DS;\362\263\242?b\013W[us\265\277\322\177OZ\263\276m\277\261\013\324\017>\200X?v~\235\303B\317\240\277hjf\260&\337\254??T\"\274\256\302\302?_\374\342\354$N\225\277\255j`6\362f\227?\272,\211\032\276\321\252?\2675\326\374\351K\242?5\034\016\376\343\035g?\225\340\261\321W}\223?\004\324\231\354\377\265\263\277\373:\317V\370\231\263\277\204\224\nT\247\320\222\277\261}\004\017\211\225q?\'\374\3240\006\333+?sM8@t\314\250\277+\316\276\342\'\224c?\316\313\357Ht\202\240\277r?\342\263*a\275\277:\207\022\n\201\237\265?\247C\254\223\221\346\275?+\241\2128B\252\233?\272T\230M\325\250\277?1\006/u\300l\243\277V\033\232\\\230\017]\277?@{:Z\267\273\277\231O\023\244\352\004\263\277|]\240\235\351\372\250?\322\344\230mMF\303?\361\3139\354t+\272\277\275$,R\305\017\212\277\204EjnV\003\216?N\226\373k\243\330\256\277\211\314\004\002\002\335\244?\306i\027\\\177h\227\277o\025\tT\006L\240?s\237\277\351+\357\216?\304^\251D\201q\264?qS.\000\002\005\213?\221\035\361\367\tP\261?\365GH\033,;\234\277\357\304\310\003\252\210\200\277y\000\237\374\006\237\263\277|F\016l\201\246\247?;\264c\350\344\231\236?\370\224\317\332\225A\266\277/\350\352b\241\214\246\2774\240\317}\364\270\226\277\022\022\267\233\003\024\245\2776\324<\207}A\241\277jM2\013\215d\220\277\310^\272\251J\357\233?\231\233;0\273\316\243\277\2550{\316\242\'\253\277:C_d\301k\260\277\222\364K\260c\035\261?\021:\276G\354\200\251?\353\372\3103\234\024\270\277\352\273Hjk\335\252?\271\214*\266\007\316\270?\261A\237\202)\357\261\277x=\312\302um\304?\263\343\322\262>P\256\27792\273\016\356a\226\277$\037d\n\r\345\224?#\270\260\364y@\263?=7\313\337\207\327\235\2778d\006\177W\177\224?F\003\234\003C\n\236\277\202\032\016\250\330o\235?\305\315\273~$@\260\277\375\212\210\233PR\270?a\013Z\240\352\322\244\277\207\016\300\227\304`\240?sb\0142\304\305\227\277\263\2232\247\252\356\240\277)v\200\245O\366\220?\230\203Q\334\354\275\257?\306\333\370\223]\204\231\277swf\271\203\035\240\277L {\373xX\261?\030\324unx\270\262?Q\032\375{u\233\262\277\013\007\263l`\340\226\277k<\004\203\'\355M?4Y[\301\0173\265?)\010\303)\006E\267?p\376\372\343|W\244\277\256F\217\204kP\204?)\345\345c\327n\231\277\315PIz\323/\214?\227s\252\035\366P\265\277\\\037\360\rW\316\255?\3626\221\005Q\367\226?\302\\\344@\033\034\275?\363\275\033\306\354\310\263\277\370!\246\325E\377P? \341u\361\337\301\262?\350\231\370\205\220\366\207\277^\272\364u1\036\260\277\270O\357\342s\342\232\277\213\300\217\265w\n\260?\222\026\r\376YT\224?\201T\235R\351\247v?m\022sQCf\257?\374\366\\\346\377\004\247?\001\362T4\361\227w\2778fL0\247\177\242?\271\364\320Yc\316\271?;\233\0054\2603\212?\310\233G\216\313\315\226\277b_\316\327\t_\256\277\240\240\222X\237\344\222?\007\0353\256w\036\272?\371\013b6Bn\245\277\322\344\221\033\000=`?\332\r\373v\201y\273?\271\005$\373*v\261\277C\347\'\000\336\326\246\277\252b\3601\333-\241?\346\275t\002\342\324\232\277a@\016Q\356\241\244?\325\302\264\372\3242v\277vNV\266\203\301\233?\025\321#\337z7\250?\020\026\275v\021|\260?0\024\251\376U\363\261\277\232\350\356\3327\330\245\277\277\351jvb\377\253\277\346\252B\217\3624\241\277\255\307\227\001\265\026\223\277i\256\371\306@w\250\277%\341\035(\020\273\234\277|\340k\257tk\244?]b\016\345$\325\257?~\026\247\320e4\254\277\315\007\273[\345\230\220\277\341\256\233\330(\320\231\2778\210\341Rda\266? \250\307\021a\317\264?\233\334L\334\355\232\212?\335C\220\266\030\002\246\277\237\024\216\343H\360\262?+\373\200Au\007\252?\tVN\243\375aL\277\336\3410\325\003\264\262\277\2100Q\362x\010\245\277w<C\316\010\236\272?\312\037\226\264 \036\264\277\211\002\255\002\207\017\240\277\345\207\250\326\332\266z\277\202\370\007\027\367J\251?a\212\010\205\236\264\262?\316]\354\2006_\223\277@(\204\332\305\315\253\277\032\220\263p\274\010\217\277\214I^\343l\006\224\277\267\246\013N*\203\200?\305\"\265>\274\005\242\277\021\3401\260(\302R\277\236q-\3116\242\222\277\206\006*&g\313\262?\255\272|\343\370\226\244?\211\250\217\214)\371\226?\230\370\376\t\202py\277#!\"<P\242\234?\331\003\335-\311k\224?*\250Y\255\205\317\276?\356\314;T\361\301\250\277\372\234\236\324\214\017w\277r\r%x6\005\265\277(\227\255\3175\316\242?R\266\2129\204\356\257\277H=\356#G\234\222?\320&QK.\366\222\277\222a\367|\034M\261\277\274[A\344\331r\263?\225;\314\320C)\254\277\261\316\365\241g\224\255\277\356\262\364\177a\247\232\277\365\333\307\276x\010\250\277\272\370i\251\237\005\207\277Lb\222\371\242C\221?\210\264\224\243\312\002\262\277\326\230\357\317\220\210\260?\205|\0312\342\274\232?\255i\'E|[\225?\256Q\3578\357\370\236\277#\276tT_\020\244?\277a\265T\317\372\264?S\242\200\033*d\265?J\031\351\3447Dq?\222\027\325?\270\234\243?] \366\03280\261\277:\330\230I\203N\223?\250\317\262V\007\255\254\277\267E)\'N\300\235?\262\366N\243Y\020\271?ZM\244\216\303\250u?\352\037u\336\347\244\226\277\214K\243\017\2040\273\277\031\300\255\317\320O\301\277`%\370\253Cz\245\277\331\370\300h\211\357k\277u\220\216\233\235\256\230?\231\001\333o\007\373\232\277\230\243\336\371\350\345\226?\245~H\214\r\354\263\277\334\260\223\231\372\010\237?E@p\372\243\031n?A\335&\024\366P\256\277\243\340\2143\362g\266\277k\326\364\212\250E\255?jT\355\340\352G\233?\266\221\253\311\014\311\225\277\214\234\311\201\233d\225?\017\232\350$\233\014\251?W\037\007\001o\327E?\021\237\275\203L\322\301\277\273\2015\332\\\215\205\277\271?C3\241\032\233?\010\\\267\262m\320\203\277!\020\373\205\315\355\240?\224\263\360e\213\220\265?\225\224}U\262\376\246?D\032\364\3302{\266\277=}\234\217\203I\232\277\343;<\277s\342\213\277\353\203Xvq\261x?#\354\036\323-1\222?\236\037\371\000(\310\236\277\332g\265\211\256\022\205?T\320\300\215?\241\247\277Q\205\372\277\354\262\257?\371\365V-a\245\263\277\240\204\316\223k,\220\277q\250\254\243x\n\212\2775\205\215\310k\336\256?F\366\023\177\t\273\255?\263\270\034\232:e\243?\242]\314\004Ef\261?\327\223\022\362=\351\237?\202\211\343cm\217\243?V\264\265Q\023D\224\277L\t\016\376\333L\234\277\363)\353OsH\222?\352ho\030w\356\262?\233^E~\227f\261?\253(R#W\357\205?%Gef]\367\261?\357b^\023\236!\227\277\227*\253\325\'\275\243?\026?V\274\212\036\272?\371\313\241\020\377\246\243\277\2667\323;\251\373\214\277ej\224c\013\375\270?\010=\335\254\261\033~?k\360\213\020QO\271\277\r\204?\nb\000r\277B\027\211\375\001?\246\277\260]\362Dv\324\253\277\023\320\200\0010\027l?[\246t\314\345\010\201?\314\\S\262\340d\243?\350\250\022\377\217y\215?&a1\242:\307\242?\221\205O\213\030r\222\2770\333\346\255\234\036s\277\352]\270y\372\031\251?c\000\234U\034\331\261\277\241\000\3435T$\263\277\000(t\303\224s\255?\200}\"\362\027\230\262?\347\267L\320K\2526?\344\027/\347a\037\207?)\266~\322G\251\246?\235\300J^\322D\223\277A&\365\257+\304\261?\360[z\360\375M\177\277\327\341\371\351sL\274?j\035\362\246\264\341z?\026\337\216\2557I\231\277\027\014V1\024l\247?\355\335,\220\220\333\245\277\257\253\246!L\304\241?\013\034\264\2767\212\224?\365(m\225_\334\225\277~?J\336\2539\304\277\276\2608\2542(\210\277\327\nz\323x/\241\277y\363u\263\003\027z?\264\005\225t\364\214\240?\245\033\236\316X\373\236?\326\017\245G\250\201\260?\344D\246\023\034\223\221\277u\314a\326=\361\252\277\033a\241\304\030\212z\277\362\2346\345\274\332\233?\026*\235\355\033Q\244?\t\333\2517]\370t\277\034\250\203fv\001\221\277\366ox\321\3258\245?\224Hv\031;\311\226?\245\004_\326\021\214\256\277\341\007\313\006\010\221\251\277._Z\342\217a\223\277\355\351\211\245,\203\246?\350>X\034\370\356|?\331\365/\316\024\344\240\277\016\270\304x\337hu\277\301\223\311T\003x\244\277\337\300\001\342\263w\252\277[\314|\'\206\245\241?\362\376\263\212\271\'\201\277\361\204\216\265\367\023\230\277F\236+\233\363\203\217\277\342r\204u!\007\255?o;\240\225\017\373\212?\224g*\370\271\330\236?\356\222\331\266k*\242?\331U *I6\236\277\\\222\001\027q\202\246?\021\260Z\372]\203\255\277?,\207*J\202\227\277\260a@\341yY\223?\362V\250\334P\237\221?\322\032\313\325\016\364\256?%\305\311\352\025\006\225\277\241X\313y\220\203\250?\233\000\375[e\327x? =.k;\311\264?f\364\332\262\2022m\277\035\031\215\320\345\363\265\277\275W\3173\003\003\256?U\274\347\333\301\254\255?\232\037i\372\0064\t?*\023 csg\211?u\336\354H <\237?\3111\r\203R\203b?\266\307:\007\260Q\257?\225\266C~\332K\243?\\\276\347\0174\253c\277dfmO\007\323\277\277\351\237Q-_l\251?\"\275Z\221\r\030\302\277\303]\376\r\375\346\222?\267T\215.\277\013\263\277\273\013fc\027\004\261?\022 \233cf\316\232\277e\372Y\371\263\351\272?DA\2779T\276\240?l\247\205\312\232\372\260?\302\247^\264\215\363\226?(>\276\034\220]\261?\001\330\204\311X\351\232\277\245~7\300z\250\262\277\333\001\350\206K;|\277\362\265\365\324\213J\261\277\323\200\371\007\320A\250\277\2446g8n\215\214?\312%\311\202\027\351\263\2771\000\276Uzj\233?>`\225\366\312D\222\277q\230\353\243\271\037\201\277i\322\305Zub\257?\374;Fy\221\312\204\277\355\227\016)\023\324\006\277\222{Z\2443\302p\277h\255\276!\247\311\256?\333\204v\325^\300\270\277\005\2634\022\n\216\221\277\005\373\3111v\263\231?\214\372ch\377t\243?*\254;4\335T\260?\000\211\'\252k\320\261\277\367\355j\035@\363\257\277\003\2778%\301}\260\277X4\226\250\227\000[?\373\302\027\307\241\322\210\277e\'\240J\001\014\244?a\314\223\315\301<\304?<\332\223\236\225Wx?\013\257}\373\253\014\201\277\265R9c\372\262\254\277\336\333;\036f\226\223\277\337\362S\362z\272z\277\277\367|&17\213?R~C\323u\020\227?\3235\341\204\020Q\177\277\374IE6uT\224\277\271\033`\310Y\016\242?X7q\363]\020J\277\220\004\251f\206a\253?\362v0&\323\201\244?\215m\033\205\307\315\300?\310E5\215\346\323\254?\205\363bj(,\272?\215\375]\317\271\260\262?\270\201\03751\266\274\277\037\363\351\020\350\004\252?\216e\376W\251\010\231?\232\225w\372\276\226\254\277\'\237\006@D\245\260\277\264>\201\327\335y\254\277\352\207RU\'\334\252\277\330\212\241\030\211+\264?5fW\005$$\260?\272\0362\317]\212\212?\215]H\200\331\347\203\277\334\311\263\360\243\307\246\277\202\177\263\301\270\274\257\277\207\003[\010I}\225\277\205\274\215\302\203E\220?\247\352\362\333\023>\260?9\232M\313\010\302\250?\341\251T\310+\226\250?)\250\362\322\004R\271\277\2439\036+\023c\243?\303\342\344\016\375\014\250\277\334\253\335\220\026\246\237\277\t\004\275LW\023\254\277\004\344-\323Es\266?\305\"\363\021\332\252\212\277\241\253\257.f\244\243?\241\360i\373\255Q\304?\177%\237\037\367\342\213\2779\364\363\303\n\013\260\277\332\331\333\337\264\231\224\277=8\247U\340\343\267?\272d\030\237p\216\250?\335w:\212k\330\224?}\232\252\342\341\032\203?\036\254\3222I\032\251\277\300\333\343\216\310\233\253\277\230\230\316\030\036\r\222?b\223J\\\222$\242\277\006\246\252\315<T\252\277\360\014\231\220R~\255?\335(>b`-\216\277\024\253+\211\312L\201\2777\372\202i\024\345\262\277\344\362\\\271\004\354\265\277\343A\361\331:\241\217\277\253\203\305\222\260\300d?\261\365[\024\306\360\230\277B\3410\021\002\226\242?A7\316\323\027c\177\277\017Doe\313\362\205\277\305\0227\260\314B\255?(\302\332\311\276\374\261\277\245Tq\310\375l\253?\004\352\345\t\356c\301?\3524l\255\316\274\252?\372]s\214\313 \267\277\251\336\035\356@\372\220?F>\234\260?\255\263\277\250\377\035\255\374\254\240\277\207\271\007M\342\215\200\277,o\024J\321!|\277\003*\204\204)\250\213?\251\006<\203\212\216\227\277\372\347!\222O\347\215?d\262\343\374\321V\263?\005\242/\0344\217\251?\201\340_w\004\026\217?\377M+\224\237\217\260?\361\323\365p\266\236\251?\303\210\001J\325@\247?\301\241\312\035\337t\301\277A\246\365\362g\244\245\277\013\250\033\356\030\236\270?x\243\373\230\341;\260?O\021\337\010\322E\226?\276\231^\366_\260x?\002\374\262\321@f\254?\374\032\000\265\020\372\204?\302g\216\323#\'\236?\253\320\316\242V\002&?n\365A:\215\224\250?KK-\r9\301\237\277\225\366YVpf\202?\035>\254\177\0356\252?\306qJ\336\302H\243\277\312s\010-\244\274u?\345\302\262Q\242\322\242\277\314~\236j\\\237\266\277\226d84\227\332\222\277Jo\207)\221\277\300?\031\370c\td)\253?25 \222\242Y\245?:\037\265\373\334\275g?\270\367\nOh\244\263\277)\307\277\277-\207\257\277\357]q\370@\340\273\277\257\rv\261s\216\236?\336\270\260\222\354\201\263\277\237\362\017\014\006\032\232?\3229Q\001\225Z\231\277C\345$\272\312B\241\277\336\275\022\343\215}\257\277\337\005\264\262\036\201\260?a}ODA\037\220\277@\3054\\\007\322\217?\027GFG\2369\254\277\3068`\321\231\034\222\277_\004\210RGw\234?\\%V\340\213\216\271\277\364\232\026.n\337\271\277\\\236\233\021fW~\277`\024\205\2413\032\251\277\246\370\344\010\027\007\247?\213\354g\353\275\223\210?>U\306\272\257\340b?\320\340\024\036\340p\250?\331R*\252v\034\215? \266\270\244\345\370^?!\314/\241\225E\222\277\227\007.\253\206}\272\277\342\310\264\240M+\243?/\307\004\262h\263\262?\312\005x\360P\010\200\277\254\030D\326XK\255?B\023\250S,G\251?\320G\"\252\333\224\235?\277\t\207y^\267\247\277\034n\"Z\207\376\270?^\243W\250\232\037\272?\203\371<C\251\000\272?\337\301d=Rqc?\010\340i2\265`\207?\235\252`p\207\204\220\277\267\231\375e\002\362\276\277..\205\310U\317\225\277\002.\022N\236j_?\251\234\266\376\265\343\245\277e\0356\234\220\203\247\277;Y\216\223\212\224\202?\364\233\371\254\002\312\244\277\020\236\037\004\343\236\240?\301\370&[\266[\275\277i\227\2022S@\216?\027\264\330\nu\264\236?\005\016\343ak\022\267\277\322\005\277\014\337Md\277t]\324b_X\256?\"\274\002\272\221 \241?\235\311G\223\263Gm\277\312\"\255\260\330\233\233?\0342\240\264\r\310\254?\000\035O\367\266_\226\277%W0N\217\023\262?\371\2019wt\233\236?\202m\364KQ\016Z?\330\260\030\244\271\300u\277\005\022I\316\233\331\270\277*ax\254\257\020\263?\007\375v\223;\031\260?3\346t\226\274\322\254?X\032\353\221r\002\252\277H\372G\325\330\020\263?7X\332\264\306o\222?KV\205\351\332\211\260?\244c1\302\267\350\225\277\345h+Y-\211\235\277\013>u\000\273\204\241?\361z\302\207\177f\245?\317\374\224\t7T\244?\n\t41?\214\227\277C\351;:\240\211\210\277\222\036}Y~\215\272\277\260H\336\035\361\023\214?o\374)5\213\030\267\277\241\352\314\206\343\373\276\277\326\246\337\326\244\306\247\277\2620\245\221\022\013}?\020\255\205\376\230\352\226?Sm\375\006\242\325\230?@\177\223 |\331\264\277\203\214\363\260\206a\305??\227\341\004n\026\223?\354\210\000\232D\212\270?\200\214\271\372\255w\302\277\213\2123\247\224\326\260?\224\177\304\006\275*\235\2775R\003\244=\346\200?g\240\223\202|\325\265\277\244\251m\031\243;\251\277\365\020\265,YQ\265\277\265B$[\2213x?5\370\336\233\231\325\264?\031$\322\320\235\313\253?\231\356y\023RN\251\277R\r]\330,\302k\277o\233\344\327\336\320\250\277\n\313\372\'\355\224\247?d\205\"\252\035e\255?G\205\026\030\010x\262\277Tv\221?V\224\273\277DXpd\010a\270?\264r\261\316\337!\303?\001`$\006\022\360\255?w\242\302\247\036\227o?\261\354\203#\351\031\235?\320\325\306\265\244\274\242\277\342\372\222\217\215M\257\277\016Z\347\306#\262\230\277>\347\301\331PV\247\277J\362\312~F\024\215\277\326\r\"T\344[\252?9\3277\030\301\260\265\277\"E\001\n \310\232?\335,\334\004K\244\224\277\356\317?\037\222\207\226?\t\3560\257(\356\267\277U\"\354\354\203\357\270\277\240\241w\336\234A\273\2779\327<G\300\263\267?\321\241\327%\372k\262?z\230\321G\376\206\224?\212V\315_5\272\255?\027\321\214\215==v?,\3677L\210\200\237\277\336\031S]\272\030\271\277z-\002\320\357\027e?\265\341tzN\027\266\277\270s\334C\024\036\225?\0051\0146\332\211\236?\007\267\341\023 \t\272\277\371\3127G\255\306\217\277T\023\330\365\337\246\255?\334tp\357y\340\263?\030\021\261\307\272\233|\277\305\357\244GF\205\252\277\377\334\344l\205K\266?\223\305\273\247\036_\233\277\302\243Ag\3508\245\277B\326\310?U\261\225?\276\021\366S2\274x\277A\224\310\247\226\364\242\27761c\024)\350\244\277bv\3041\370\375\242?\222\205\350\246w\347\202\277zl\344\256\317\312\266?G\354\361 \0025\220?\262\"\301\001\002vr\277R[M/\n%\250?\024\002\200\323\005\365\267\277\022\215\027\201\255\001\241\277\201\203\241\274\020w\250\277\t\246\333\261\243\005\232?Z\250~wp\t\264?|[\310\027l\234\\\277\203%lf\327\220\261\277\320-\037\361s\226\240?\034\277\340=\374,\240?7\\m\351\270\201\276\277\216\355\331=i\211\264?\013\220\367\361\341\255\240\2778\203\001ns\006\222\277F\346\267\265\016\n\250\277cu\233\re\326\252?\202p\315\375\307\270\232\277I\214\013\nLR\245?\265\323\036]\361\264\232?\021:D%\261\223\263?Y\222bS\013\031\201?\275\210\326\334\300\372\247?\250\323\2751\346\263\257?K\306 \316\315\240\267\277\212\210\272\262\014\262W?\237wF\323\257\230\236?\360\240\321_\3329\242\277\2070\262\264{|\245?\224EB\333\220\233:?\0307j\317\310\272y??\307)e\262V\250?\313\013\246x\035V\237?\242\2659\377>\266V\277\342\364_f\206X\244\277\200v-/g\205\244?7\2767m7\213*?\260\345\032\177\232\372\243?`\017\346\332O\310\300?\216\253\\\336~\204p?\006 R\035-Z\251?\333q\334\225\357\216J?D\303*t\032\311\247?F0\275$\001\375|?\356\352\216!\226@\212\277Z\'\022%t5\245\277\370s\307\341\375\201\242\277;\3422\306%*\236?\361\363\314<\220d\237?X$po\\\252\251?\255\304\306,\312d\225?l\305M{=\244\247\277hu/\240\024X\220?\306V\254\300\240\336\235\277@G\221f\217\346\301\277\023\335\205G6\302\243\277D2\301\003\345\031\236?d`\344u\021I\276\277\001\251\307\236\317\263\221\277\306\255\035b\0005{\277\316\242\303b\373\274\227\277\2036\242\264\234\'\275\277\177e\374\231(E\253?\254\366G\264>\271\230\277<e\325\201\337\205\244?\252\275\242\301\023 \233?\026q\371\366\n\034\235\277\343\205\004\232\"\014\235?\322:V\316W\ru\277J+\307A\221\351\240\277la\350d\376\006\301?L\"\343I52\247?\320\254x\321_v\242?\036\244\205\232rH\206\2771\314\2524\036\263\260?\241rh\210\021\377\240?o\\\212\022\2141\202\277r&\250\366\355\332\271\277-\245M\016\t\247\225?\003\021\304\302\200\002\201?%\241{H\007=p?\211.\303\244\264\320j?nR\344E\336\242\244\277E!\311\3264oz\277l\221\342\2507\250\277?\242cKP\005\016\225?\001;\177\036\032\325\252?e\306\207\355\242\325u\277\251R_\323\303\251\244\277}Q{\244EX\225\277\361u\317\300:\334\254?o)9O\251\356\231\277:Q\021\214\354v\227\277gJ\027\002\205\t\227?\251d\247[\330\323\244\277y\271\336\366\335I\227\277\013\213&I\312\246\223\277_\210\215TY]\262\277\362\001Y\2512\247\232\277\353\320\262\241T\007\261?\251\351\363^\036{\270?X(\223\276\362\255\245\277\235\302EW\313\331\255?\274Z/\353<:\253?A\314n\371\000\014\274?\330|A\361\0106P?\214\373\343\206=zy\277\226\004*{}\354\217\277\235\037\025\343\307\300\242?\264\231#%C,a?\347o\253\362\315\225\246\277\370\344\037\275\331b\260?\3070\361\3105\211\230?<\360\266OF\216\207?\303.\220\r_\347\210?\234\361\027\00700\262\277@H\034\251)|\267\277\373\276g\274\027\303\242\277+\366\2115U\231\240\277\t\201rTK8\261\277\240\276\345\220F\034\235\277\363\025s\246\312\320\224\277\034\001:{v\033\212\277\0103\254I\374~t\277)\254\242C\364^\300?R\373\221\305\316\303\242\277=n]\322d\021\207?D\030\310\313\026\331+\277\325)\006\364\350\337\254\277F@\352\001\352\270\245\277\376K\260\201\353\371\256?r\334Uy\035!\265\277\250\266mDzp\220\277\266&\312\213\037\377\246?q\t$s2)\223?i\305\203\330x\313p?`\016ce A\205\277c\264\023\254\027R\225\277\342\2339fIK\231\277\326\271vI\347\367\300\2779\327\213\232-?\237\277e\273\256\r\225j\263\277\244\344\365\022\010Q\257\277\344Gv\324\220R\262\277\3303k\'`\321\267\277G\267\364\344\264\004\246\277x,\020x\036K\232\277\312\200\246\242\253\245\240?J\231^r\373\353\246\277&\347>z\324\256\254\277\264\241\237RV\263\272?D\025\230(\177i\206?\2678,\214\005\022\226?\245/i\177\035\207\233\277|\223\020\007\324\332\243?\007\211D\364%\005\250\277\206\213\314\343]p\240\277\334\201Y\003\224\250z?s\321+\347[\263\230\277R\311\344K\253\306\255\277\031\313\343\324\340\246\204?pF)\253Q\215\302?\221R\257\273\rx\177?\005\272r\373\227 \260\277\344i\210\340\037\214~??p\321G-\271l?\177\313<x\2200\226?u\254\033\253\002\210\233?+\231RW\330\010\241?\334\220P\346\275\367\254?5\273q\254Q\203\263\277\344\364 \016z\266\223?\025i\331\371.f\255?\276\025\203\226}\201J\277k\262\360\002\035[\260\277\344\035\306\343\223L\251\277\002\264\261\230\246E\254?\005OG\247\346_\265?$\364w\247K\r\261\277S\000\340\025\204m\223\277\336\366\206\025\325\327u?\032\021\361j\261[\246?\374\277X\004\367h\261?\221\336\330\032\325\027\250\277u\355\"\202\006G\263\277D\252\263\332\330\025\224\277\373\235Q\005\177g\260\277\223\302\216\270\231(\274?,\335A\221w\361\243\277\221Y\276EA\255\264\277\261\242|oOU\225\277\233\'\361\317\223\351\245\277\177t>\035x\352\223?o\206=z[\315\243?\301o\231\\q\344\240\277\276\246\273Je\213\232?s\272\250Y\024m\262\277\256\305\375\314@\360\271\277\"%\010\355\355\020\260?A&\221[B\320\222?M\tM4j\264\301\277\337;\3327(\001\245? \343H\227\316\013\215?$+\367\367\202\217\250?^P\300\225\215\246\250?qh\267\023\216\257\242\277\000\271\336Fu@\230?-\370\200\242?\006\260?\205\310H\037\254\031\244\277\251;\243\025\271\004\270?\334\337|!\373\330\260\277K\035\265j/\255\252\277c:\235\340\202-z\277\217\002\347LUe\261\277\306P$\026V\307~\277\301\320,\t>x\250\277@z|\035\326q\255\277{\257\2641\367\215\210\277\036\226\214\316\000\250~\277=g\247\362\323\037\242\277\332\325\020\030\205F\203?\2321%\216Wk\275?A\326\271\033\214$\272?\n\303\313b\024(z\277!\344E\"S+\232?ny^\r\337W\262?\003~\374\331\205\377\220?es\324\206\377h\226\277\323\325,j\017\302\240\277\020\026\262\352\215\230\226?\217M\366\344\362\261\230?\031\204\301\255w\343\277?g\240Y?\331/\237\277\323\2132g\266T\247?Y\354\205f\352\257\244?\340\372\033I\'N\210\277~\336\304q\275\266\220\277\327\016\234|\320\241\246\277\377\224\233\203\203\333\260\277V\336\217\264\253\247\207\277\013\244\366i\034\246\243?\023\025\375\310\215Q\240?\261\214\377\006\317\265\265?"
      }
    }
  }
}
node {
  name: "layer_0_type_1/matrix/read"
  op: "Identity"
  input: "layer_0_type_1/matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@layer_0_type_1/matrix"
      }
    }
  }
}
node {
  name: "layer_0_type_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "K,\357\235K\360\367?\247\001z\226\326\222\374?`U\203\241\250\\\356\277=d.\323\021n\340\2779\217\224\303Y&\360\277ym\215MV\007\360?1m\000\230\005G\337?\370\361\007\034|\031\300?5\320\206\354\233\352\311\277\250d\222+\363\352\362\277=\242az\255\343\327?\203\001\253\017Ur\355?\356\262\374\277:;\357?\212$\266N\255q\306?D\2435\003\255\267\374\277\210\224**\307\342\252?2b\266\201\004\203\356?\2317V\250)b\237\277\377\374H\214\227\370\345\277\234\311\334\345\257T\337\277"
      }
    }
  }
}
node {
  name: "layer_0_type_1/bias/read"
  op: "Identity"
  input: "layer_0_type_1/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@layer_0_type_1/bias"
      }
    }
  }
}
node {
  name: "layer_0_type_1/MatMul"
  op: "MatMul"
  input: "Reshape_20"
  input: "layer_0_type_1/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "layer_0_type_1/BiasAdd"
  op: "BiasAdd"
  input: "layer_0_type_1/MatMul"
  input: "layer_0_type_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "layer_0_type_1/Tanh"
  op: "Tanh"
  input: "layer_0_type_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "layer_0_type_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "layer_0_type_1/Reshape"
  op: "Reshape"
  input: "layer_0_type_1/Tanh"
  input: "layer_0_type_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "final_layer_type_1/matrix"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\322 [g\237\312\327?)R\313\'8\355\224?\253\274\220//\\\321\277B\257\363@\372\n\306\277\240$\252\345\321\335\245?\366\372\366\215\300v\304?\253\010\277\257W\235_\277L\"\026s\267\322\235?N\010@\\@\276\313\277\254\364O\245\307n\306\277\344:4\307p\203\315?\301\221\213$|r\312\277Gc\375\314\177#\330\277\243^|\2658\301\242\277h\331\215\230\210l\250\277\026\r.\256H\345\300?\n{\005\313\204\037p?\032\276\230.\000s\250?\307\225\267\033\304\262\313\277\320\371\345T\264\'\247\277"
      }
    }
  }
}
node {
  name: "final_layer_type_1/matrix/read"
  op: "Identity"
  input: "final_layer_type_1/matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@final_layer_type_1/matrix"
      }
    }
  }
}
node {
  name: "final_layer_type_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
        }
        double_val: -0.06734894508541613
      }
    }
  }
}
node {
  name: "final_layer_type_1/bias/read"
  op: "Identity"
  input: "final_layer_type_1/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@final_layer_type_1/bias"
      }
    }
  }
}
node {
  name: "final_layer_type_1/MatMul"
  op: "MatMul"
  input: "layer_0_type_1/Reshape"
  input: "final_layer_type_1/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "final_layer_type_1/BiasAdd"
  op: "BiasAdd"
  input: "final_layer_type_1/MatMul"
  input: "final_layer_type_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Shape_5"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_22/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_22/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_22/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_22"
  op: "StridedSlice"
  input: "Shape_5"
  input: "strided_slice_22/stack"
  input: "strided_slice_22/stack_1"
  input: "strided_slice_22/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_23/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_23/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_23/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_23"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_23/stack"
  input: "strided_slice_23/stack_1"
  input: "strided_slice_23/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_21/shape"
  op: "Pack"
  input: "strided_slice_22"
  input: "strided_slice_23"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_21"
  op: "Reshape"
  input: "final_layer_type_1/BiasAdd"
  input: "Reshape_21/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat_3"
  op: "ConcatV2"
  input: "Reshape_19"
  input: "Reshape_21"
  input: "concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "embedding_lookup_1/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fitting_attr/t_bias_atom_e"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embedding_lookup_1"
  op: "GatherV2"
  input: "fitting_attr/t_bias_atom_e/read"
  input: "Reshape_17"
  input: "embedding_lookup_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fitting_attr/t_bias_atom_e"
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "embedding_lookup_1/Identity"
  op: "Identity"
  input: "embedding_lookup_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Shape_6"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_25/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_25/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_25/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_25"
  op: "StridedSlice"
  input: "Shape_6"
  input: "strided_slice_25/stack"
  input: "strided_slice_25/stack_1"
  input: "strided_slice_25/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_26/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_26/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_26/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_26"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_26/stack"
  input: "strided_slice_26/stack_1"
  input: "strided_slice_26/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "strided_slice_26"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Reshape_22/shape"
  op: "Pack"
  input: "strided_slice_25"
  input: "Sum_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_22"
  op: "Reshape"
  input: "embedding_lookup_1/Identity"
  input: "Reshape_22/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "add_3"
  op: "AddV2"
  input: "concat_3"
  input: "Reshape_22"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "mul_3"
  op: "Mul"
  input: "add_3"
  input: "Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Reshape_23/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_23"
  op: "Reshape"
  input: "mul_3"
  input: "Reshape_23/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_27/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_27/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_27/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_27"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_27/stack"
  input: "strided_slice_27/stack_1"
  input: "strided_slice_27/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_2"
  op: "Sum"
  input: "strided_slice_27"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "o_atom_energy/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "o_atom_energy/shape"
  op: "Pack"
  input: "o_atom_energy/shape/0"
  input: "Sum_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "o_atom_energy"
  op: "Reshape"
  input: "Reshape_23"
  input: "o_atom_energy/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_energy/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "o_energy"
  op: "Sum"
  input: "o_atom_energy"
  input: "o_energy/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "Reshape_23"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_23_grad/Shape"
  op: "Shape"
  input: "mul_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_23_grad/Reshape"
  op: "Reshape"
  input: "gradients/grad_ys_0"
  input: "gradients/Reshape_23_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_3_grad/Mul"
  op: "Mul"
  input: "gradients/Reshape_23_grad/Reshape"
  input: "Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/mul_3_grad/Shape"
  op: "Shape"
  input: "add_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/Shape_1"
  op: "Shape"
  input: "Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_3_grad/Shape"
  input: "gradients/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_3_grad/Sum"
  op: "Sum"
  input: "gradients/mul_3_grad/Mul"
  input: "gradients/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_3_grad/Sum"
  input: "gradients/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_3_grad/Shape"
  op: "Shape"
  input: "concat_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/Shape_1"
  op: "Shape"
  input: "Reshape_22"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_3_grad/Shape"
  input: "gradients/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/mul_3_grad/Reshape"
  input: "gradients/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_3_grad/Sum"
  input: "gradients/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_3_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/concat_3_grad/mod"
  op: "FloorMod"
  input: "concat_3/axis"
  input: "gradients/concat_3_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_3_grad/ShapeN"
  op: "ShapeN"
  input: "Reshape_19"
  input: "Reshape_21"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_3_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/concat_3_grad/mod"
  input: "gradients/concat_3_grad/ShapeN"
  input: "gradients/concat_3_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_3_grad/Slice"
  op: "Slice"
  input: "gradients/add_3_grad/Reshape"
  input: "gradients/concat_3_grad/ConcatOffset"
  input: "gradients/concat_3_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/concat_3_grad/Slice_1"
  op: "Slice"
  input: "gradients/add_3_grad/Reshape"
  input: "gradients/concat_3_grad/ConcatOffset:1"
  input: "gradients/concat_3_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/Reshape_19_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_19_grad/Reshape"
  op: "Reshape"
  input: "gradients/concat_3_grad/Slice"
  input: "gradients/Reshape_19_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_21_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_21_grad/Reshape"
  op: "Reshape"
  input: "gradients/concat_3_grad/Slice_1"
  input: "gradients/Reshape_21_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/final_layer_type_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/Reshape_19_grad/Reshape"
  input: "final_layer_type_0/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/final_layer_type_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/Reshape_21_grad/Reshape"
  input: "final_layer_type_1/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/layer_0_type_0/Reshape_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/layer_0_type_0/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/final_layer_type_0/MatMul_grad/MatMul"
  input: "gradients/layer_0_type_0/Reshape_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/layer_0_type_1/Reshape_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/layer_0_type_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/final_layer_type_1/MatMul_grad/MatMul"
  input: "gradients/layer_0_type_1/Reshape_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/layer_0_type_0/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "layer_0_type_0/Tanh"
  input: "gradients/layer_0_type_0/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/layer_0_type_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "layer_0_type_1/Tanh"
  input: "gradients/layer_0_type_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/layer_0_type_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/layer_0_type_0/Tanh_grad/TanhGrad"
  input: "layer_0_type_0/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/layer_0_type_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/layer_0_type_1/Tanh_grad/TanhGrad"
  input: "layer_0_type_1/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Reshape_18_grad/Shape"
  op: "Shape"
  input: "Slice_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_18_grad/Reshape"
  op: "Reshape"
  input: "gradients/layer_0_type_0/MatMul_grad/MatMul"
  input: "gradients/Reshape_18_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_20_grad/Shape"
  op: "Shape"
  input: "Slice_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_20_grad/Reshape"
  op: "Reshape"
  input: "gradients/layer_0_type_1/MatMul_grad/MatMul"
  input: "gradients/Reshape_20_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Shape"
  op: "Shape"
  input: "Slice_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/stack"
  op: "Pack"
  input: "gradients/Slice_3_grad/Rank"
  input: "gradients/Slice_3_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Reshape"
  op: "Reshape"
  input: "Slice_3/begin"
  input: "gradients/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Shape_1"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/sub"
  op: "Sub"
  input: "gradients/Slice_3_grad/Shape_1"
  input: "gradients/Slice_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/sub_1"
  op: "Sub"
  input: "gradients/Slice_3_grad/sub"
  input: "Slice_3/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Slice_3_grad/sub_1"
  input: "gradients/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/concat"
  op: "ConcatV2"
  input: "gradients/Slice_3_grad/Reshape"
  input: "gradients/Slice_3_grad/Reshape_1"
  input: "gradients/Slice_3_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Pad"
  op: "Pad"
  input: "gradients/Reshape_18_grad/Reshape"
  input: "gradients/Slice_3_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Shape"
  op: "Shape"
  input: "Slice_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/stack"
  op: "Pack"
  input: "gradients/Slice_4_grad/Rank"
  input: "gradients/Slice_4_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Reshape"
  op: "Reshape"
  input: "Slice_4/begin"
  input: "gradients/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Shape_1"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/sub"
  op: "Sub"
  input: "gradients/Slice_4_grad/Shape_1"
  input: "gradients/Slice_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/sub_1"
  op: "Sub"
  input: "gradients/Slice_4_grad/sub"
  input: "Slice_4/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Slice_4_grad/sub_1"
  input: "gradients/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/concat"
  op: "ConcatV2"
  input: "gradients/Slice_4_grad/Reshape"
  input: "gradients/Slice_4_grad/Reshape_1"
  input: "gradients/Slice_4_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Pad"
  op: "Pad"
  input: "gradients/Reshape_20_grad/Reshape"
  input: "gradients/Slice_4_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/Slice_3_grad/Pad"
  input: "gradients/Slice_4_grad/Pad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Slice_3_grad/Pad"
      }
    }
  }
}
node {
  name: "gradients/Reshape_14_grad/Shape"
  op: "Shape"
  input: "o_descriptor"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_14_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN"
  input: "gradients/Reshape_14_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_12_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_12_grad/Reshape"
  op: "Reshape"
  input: "gradients/Reshape_14_grad/Reshape"
  input: "gradients/Reshape_12_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_15_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_15_grad/Reshape"
  op: "Reshape"
  input: "gradients/Reshape_12_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_15_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/MatMul"
  op: "BatchMatMulV2"
  input: "filter_type_all/Slice_6"
  input: "gradients/filter_type_all/Reshape_15_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
  attr {
    key: "grad_x"
    value {
      b: true
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/truediv"
  input: "gradients/filter_type_all/Reshape_15_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Shape"
  op: "Shape"
  input: "filter_type_all/truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Slice_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_6_grad/Shape"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack_1"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_6_grad/Shape_1"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack_1"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Sum"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_6_grad/MatMul"
  input: "gradients/filter_type_all/MatMul_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_6_grad/Sum"
  input: "gradients/filter_type_all/MatMul_6_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Sum_1"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_6_grad/MatMul_1"
  input: "gradients/filter_type_all/MatMul_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_6_grad/Sum_1"
  input: "gradients/filter_type_all/MatMul_6_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_6_grad/Rank"
  input: "gradients/filter_type_all/Slice_6_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_6/begin"
  input: "gradients/filter_type_all/Slice_6_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_6_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_6_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_6_grad/sub"
  input: "filter_type_all/Slice_6/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_6_grad/sub_1"
  input: "gradients/filter_type_all/Slice_6_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_6_grad/Reshape"
  input: "gradients/filter_type_all/Slice_6_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_6_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Pad"
  op: "Pad"
  input: "gradients/filter_type_all/MatMul_6_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_6_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/filter_type_all/MatMul_6_grad/Reshape"
  input: "gradients/filter_type_all/Slice_6_grad/Pad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/MatMul_6_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/AddN_1"
  input: "filter_type_all/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/MatMul"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_3"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
  attr {
    key: "grad_x"
    value {
      b: true
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_4"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_1_grad/Shape"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack_1"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_1_grad/Shape_1"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack_1"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Sum"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_1_grad/MatMul"
  input: "gradients/filter_type_all/MatMul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_1_grad/Sum"
  input: "gradients/filter_type_all/MatMul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_1_grad/MatMul_1"
  input: "gradients/filter_type_all/MatMul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_1_grad/Sum_1"
  input: "gradients/filter_type_all/MatMul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/MatMul"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_8"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
  attr {
    key: "grad_x"
    value {
      b: true
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_9"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_3_grad/Shape"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack_1"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_3_grad/Shape_1"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack_1"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Sum"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_3_grad/MatMul"
  input: "gradients/filter_type_all/MatMul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_3_grad/Sum"
  input: "gradients/filter_type_all/MatMul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_3_grad/MatMul_1"
  input: "gradients/filter_type_all/MatMul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_3_grad/Sum_1"
  input: "gradients/filter_type_all/MatMul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/MatMul"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_13"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
  attr {
    key: "grad_x"
    value {
      b: true
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_14"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_13"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_5_grad/Shape"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack_1"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_5_grad/Shape_1"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack_1"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Sum"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_5_grad/MatMul"
  input: "gradients/filter_type_all/MatMul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_5_grad/Sum"
  input: "gradients/filter_type_all/MatMul_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_5_grad/MatMul_1"
  input: "gradients/filter_type_all/MatMul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_5_grad/Sum_1"
  input: "gradients/filter_type_all/MatMul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_4_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_1_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_4_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_1_grad/Reshape_1"
  input: "gradients/filter_type_all/Reshape_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_9_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_9_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_3_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_9_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_8_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_8_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_3_grad/Reshape_1"
  input: "gradients/filter_type_all/Reshape_8_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_14_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_14_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_5_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_14_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_13_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_13_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_5_grad/Reshape_1"
  input: "gradients/filter_type_all/Reshape_13_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Reshape_3_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_7_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_7_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Reshape_8_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_7_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_12_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_12_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Reshape_13_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_12_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "filter_type_all/Tanh"
  input: "gradients/filter_type_all/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/filter_type_all/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "filter_type_all/Tanh_1"
  input: "gradients/filter_type_all/Reshape_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/filter_type_all/Tanh_2_grad/TanhGrad"
  op: "TanhGrad"
  input: "filter_type_all/Tanh_2"
  input: "gradients/filter_type_all/Reshape_12_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/filter_type_all/Tanh_grad/TanhGrad"
  input: "filter_type_all/matrix_1_0/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients/filter_type_all/Tanh_1_grad/TanhGrad"
  input: "filter_type_all/matrix_1_1/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "gradients/filter_type_all/Tanh_2_grad/TanhGrad"
  input: "filter_type_all/matrix_1_2/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_grad/MatMul"
  input: "gradients/filter_type_all/Reshape_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_6_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_2_grad/MatMul"
  input: "gradients/filter_type_all/Reshape_6_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_11_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_11_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_4_grad/MatMul"
  input: "gradients/filter_type_all/Reshape_11_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_1_grad/Rank"
  input: "gradients/filter_type_all/Slice_1_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_1/begin"
  input: "gradients/filter_type_all/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_1_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_1_grad/sub"
  input: "filter_type_all/Slice_1/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_1_grad/sub_1"
  input: "gradients/filter_type_all/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_1_grad/Reshape"
  input: "gradients/filter_type_all/Slice_1_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Pad"
  op: "Pad"
  input: "gradients/filter_type_all/Reshape_1_grad/Reshape"
  input: "gradients/filter_type_all/Slice_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_3_grad/Rank"
  input: "gradients/filter_type_all/Slice_3_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_3/begin"
  input: "gradients/filter_type_all/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_3_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_3_grad/sub"
  input: "filter_type_all/Slice_3/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_3_grad/sub_1"
  input: "gradients/filter_type_all/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_3_grad/Reshape"
  input: "gradients/filter_type_all/Slice_3_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_3_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Pad"
  op: "Pad"
  input: "gradients/filter_type_all/Reshape_6_grad/Reshape"
  input: "gradients/filter_type_all/Slice_3_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_5_grad/Rank"
  input: "gradients/filter_type_all/Slice_5_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_5/begin"
  input: "gradients/filter_type_all/Slice_5_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_10"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_5_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_5_grad/sub"
  input: "filter_type_all/Slice_5/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_5_grad/sub_1"
  input: "gradients/filter_type_all/Slice_5_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_5_grad/Reshape"
  input: "gradients/filter_type_all/Slice_5_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_5_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Pad"
  op: "Pad"
  input: "gradients/filter_type_all/Reshape_11_grad/Reshape"
  input: "gradients/filter_type_all/Slice_5_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_1_grad/Pad"
  input: "gradients/filter_type_all/Reshape_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_5_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_3_grad/Pad"
  input: "gradients/filter_type_all/Reshape_5_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_10_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_10_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_5_grad/Pad"
  input: "gradients/filter_type_all/Reshape_10_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/filter_type_all/Reshape_4_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/Reshape_4_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_grad/Rank"
  input: "gradients/filter_type_all/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice/begin"
  input: "gradients/filter_type_all/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Shape_1"
  op: "Shape"
  input: "Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_grad/sub"
  input: "filter_type_all/Slice/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_grad/sub_1"
  input: "gradients/filter_type_all/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_grad/Reshape"
  input: "gradients/filter_type_all/Slice_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Pad"
  op: "Pad"
  input: "gradients/AddN_2"
  input: "gradients/filter_type_all/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/filter_type_all/Reshape_9_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_5_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/Reshape_9_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_2_grad/Rank"
  input: "gradients/filter_type_all/Slice_2_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_2/begin"
  input: "gradients/filter_type_all/Slice_2_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Shape_1"
  op: "Shape"
  input: "Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_2_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_2_grad/sub"
  input: "filter_type_all/Slice_2/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_2_grad/sub_1"
  input: "gradients/filter_type_all/Slice_2_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_2_grad/Reshape"
  input: "gradients/filter_type_all/Slice_2_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Pad"
  op: "Pad"
  input: "gradients/AddN_3"
  input: "gradients/filter_type_all/Slice_2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/filter_type_all/Reshape_14_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_10_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/Reshape_14_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_4_grad/Rank"
  input: "gradients/filter_type_all/Slice_4_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_4/begin"
  input: "gradients/filter_type_all/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Shape_1"
  op: "Shape"
  input: "Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_4_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_4_grad/sub"
  input: "filter_type_all/Slice_4/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_4_grad/sub_1"
  input: "gradients/filter_type_all/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_4_grad/Reshape"
  input: "gradients/filter_type_all/Slice_4_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_4_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Pad"
  op: "Pad"
  input: "gradients/AddN_4"
  input: "gradients/filter_type_all/Slice_4_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/filter_type_all/Slice_grad/Pad"
  input: "gradients/filter_type_all/Slice_2_grad/Pad"
  input: "gradients/filter_type_all/Slice_4_grad/Pad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/Slice_grad/Pad"
      }
    }
  }
}
node {
  name: "gradients/Reshape_9_grad/Shape"
  op: "Shape"
  input: "Reshape_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_9_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_5"
  input: "gradients/Reshape_9_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_8_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\320\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_8_grad/Reshape"
  op: "Reshape"
  input: "gradients/Reshape_9_grad/Reshape"
  input: "gradients/Reshape_8_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_7"
  op: "Shape"
  input: "o_nlist"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_28/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_28/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_28/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_28"
  op: "StridedSlice"
  input: "Shape_7"
  input: "strided_slice_28/stack"
  input: "strided_slice_28/stack_1"
  input: "strided_slice_28/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_29/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_29/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_29/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_29"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_29/stack"
  input: "strided_slice_29/stack_1"
  input: "strided_slice_29/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 720
      }
    }
  }
}
node {
  name: "mul_5"
  op: "Mul"
  input: "strided_slice_29"
  input: "mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_24/shape"
  op: "Pack"
  input: "strided_slice_28"
  input: "mul_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_24"
  op: "Reshape"
  input: "gradients/Reshape_8_grad/Reshape"
  input: "Reshape_24/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ProdForceSeA"
  op: "ProdForceSeA"
  input: "Reshape_24"
  input: "o_rmat_deriv"
  input: "o_nlist"
  input: "t_natoms"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "n_a_sel"
    value {
      i: 180
    }
  }
  attr {
    key: "n_r_sel"
    value {
      i: 0
    }
  }
}
node {
  name: "ProdVirialSeA"
  op: "ProdVirialSeA"
  input: "Reshape_24"
  input: "o_rmat_deriv"
  input: "o_rij"
  input: "o_nlist"
  input: "t_natoms"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "n_a_sel"
    value {
      i: 180
    }
  }
  attr {
    key: "n_r_sel"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_30/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_30/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_30/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_30"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_30/stack"
  input: "strided_slice_30/stack_1"
  input: "strided_slice_30/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "mul_6"
  op: "Mul"
  input: "mul_6/x"
  input: "strided_slice_30"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_25/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_25/shape"
  op: "Pack"
  input: "Reshape_25/shape/0"
  input: "mul_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_25"
  op: "Reshape"
  input: "ProdForceSeA"
  input: "Reshape_25/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_31/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_31/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_31/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_31"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_31/stack"
  input: "strided_slice_31/stack_1"
  input: "strided_slice_31/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_32/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_32/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_32/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_32"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_32/stack"
  input: "strided_slice_32/stack_1"
  input: "strided_slice_32/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "strided_slice_31"
  input: "strided_slice_32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice/Switch"
  op: "Switch"
  input: "t_natoms"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@t_natoms"
      }
    }
  }
}
node {
  name: "cond/strided_slice"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice/stack"
  input: "cond/strided_slice/stack_1"
  input: "cond/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Cumsum/axis"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Cumsum"
  op: "Cumsum"
  input: "cond/strided_slice"
  input: "cond/Cumsum/axis"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "exclusive"
    value {
      b: false
    }
  }
  attr {
    key: "reverse"
    value {
      b: false
    }
  }
}
node {
  name: "cond/concat/values_0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat/axis"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat"
  op: "ConcatV2"
  input: "cond/concat/values_0"
  input: "cond/Cumsum"
  input: "cond/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_1/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_1"
  op: "StridedSlice"
  input: "cond/concat"
  input: "cond/strided_slice_1/stack"
  input: "cond/strided_slice_1/stack_1"
  input: "cond/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul"
  op: "Mul"
  input: "cond/strided_slice_1"
  input: "cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_2/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_2"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice_2/stack"
  input: "cond/strided_slice_2/stack_1"
  input: "cond/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_1/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_1"
  op: "Mul"
  input: "cond/strided_slice_2"
  input: "cond/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice/begin/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice/begin"
  op: "Pack"
  input: "cond/Slice/begin/0"
  input: "cond/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice/size/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice/size"
  op: "Pack"
  input: "cond/Slice/size/0"
  input: "cond/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice/Switch"
  op: "Switch"
  input: "Reshape_25"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_25"
      }
    }
  }
}
node {
  name: "cond/Slice"
  op: "Slice"
  input: "cond/Slice/Switch:1"
  input: "cond/Slice/begin"
  input: "cond/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_3/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_3/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_3/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_3"
  op: "StridedSlice"
  input: "cond/concat"
  input: "cond/strided_slice_3/stack"
  input: "cond/strided_slice_3/stack_1"
  input: "cond/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_2/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_2"
  op: "Mul"
  input: "cond/strided_slice_3"
  input: "cond/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_4/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_4/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "cond/strided_slice_4/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_4"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice_4/stack"
  input: "cond/strided_slice_4/stack_1"
  input: "cond/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_3/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_3"
  op: "Mul"
  input: "cond/strided_slice_4"
  input: "cond/mul_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_1/begin/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_1/begin"
  op: "Pack"
  input: "cond/Slice_1/begin/0"
  input: "cond/mul_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_1/size/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_1/size"
  op: "Pack"
  input: "cond/Slice_1/size/0"
  input: "cond/mul_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_1"
  op: "Slice"
  input: "cond/Slice/Switch:1"
  input: "cond/Slice_1/begin"
  input: "cond/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/add"
  op: "AddV2"
  input: "cond/Slice"
  input: "cond/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_5/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_5/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_5/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_5"
  op: "StridedSlice"
  input: "cond/concat"
  input: "cond/strided_slice_5/stack"
  input: "cond/strided_slice_5/stack_1"
  input: "cond/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_4/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_4"
  op: "Mul"
  input: "cond/strided_slice_5"
  input: "cond/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_6/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_6/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_6/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_6"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice_6/stack"
  input: "cond/strided_slice_6/stack_1"
  input: "cond/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_5/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_5"
  op: "Mul"
  input: "cond/strided_slice_6"
  input: "cond/mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_2/begin/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_2/begin"
  op: "Pack"
  input: "cond/Slice_2/begin/0"
  input: "cond/mul_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_2/size/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_2/size"
  op: "Pack"
  input: "cond/Slice_2/size/0"
  input: "cond/mul_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_2"
  op: "Slice"
  input: "cond/Slice/Switch:1"
  input: "cond/Slice_2/begin"
  input: "cond/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_7/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_7/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_7/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_7"
  op: "StridedSlice"
  input: "cond/concat"
  input: "cond/strided_slice_7/stack"
  input: "cond/strided_slice_7/stack_1"
  input: "cond/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_6/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_6"
  op: "Mul"
  input: "cond/strided_slice_7"
  input: "cond/mul_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_8/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_8/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "cond/strided_slice_8/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_8"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice_8/stack"
  input: "cond/strided_slice_8/stack_1"
  input: "cond/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_7/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_7"
  op: "Mul"
  input: "cond/strided_slice_8"
  input: "cond/mul_7/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_3/begin/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_3/begin"
  op: "Pack"
  input: "cond/Slice_3/begin/0"
  input: "cond/mul_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_3/size/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_3/size"
  op: "Pack"
  input: "cond/Slice_3/size/0"
  input: "cond/mul_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_3"
  op: "Slice"
  input: "cond/Slice/Switch:1"
  input: "cond/Slice_3/begin"
  input: "cond/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/mul_8/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3140456936484258
      }
    }
  }
}
node {
  name: "cond/mul_8"
  op: "Mul"
  input: "cond/Slice_3"
  input: "cond/mul_8/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_1/axis"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_1"
  op: "ConcatV2"
  input: "cond/add"
  input: "cond/Slice_2"
  input: "cond/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/concat_2/concat"
  op: "Identity"
  input: "cond/mul_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_3/axis"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_3"
  op: "ConcatV2"
  input: "cond/concat_1"
  input: "cond/concat_2/concat"
  input: "cond/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_9/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_9/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_9/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_9/Switch"
  op: "Switch"
  input: "t_natoms"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@t_natoms"
      }
    }
  }
}
node {
  name: "cond/strided_slice_9"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_9/stack"
  input: "cond/strided_slice_9/stack_1"
  input: "cond/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Cumsum_1/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Cumsum_1"
  op: "Cumsum"
  input: "cond/strided_slice_9"
  input: "cond/Cumsum_1/axis"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "exclusive"
    value {
      b: false
    }
  }
  attr {
    key: "reverse"
    value {
      b: false
    }
  }
}
node {
  name: "cond/concat_4/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat_4/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat_4"
  op: "ConcatV2"
  input: "cond/concat_4/values_0"
  input: "cond/Cumsum_1"
  input: "cond/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_10/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_10/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_10/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_10"
  op: "StridedSlice"
  input: "cond/concat_4"
  input: "cond/strided_slice_10/stack"
  input: "cond/strided_slice_10/stack_1"
  input: "cond/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_9/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_9"
  op: "Mul"
  input: "cond/strided_slice_10"
  input: "cond/mul_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_11/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_11/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_11/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_11"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_11/stack"
  input: "cond/strided_slice_11/stack_1"
  input: "cond/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_10/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_10"
  op: "Mul"
  input: "cond/strided_slice_11"
  input: "cond/mul_10/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_4/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_4/begin"
  op: "Pack"
  input: "cond/Slice_4/begin/0"
  input: "cond/mul_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_4/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_4/size"
  op: "Pack"
  input: "cond/Slice_4/size/0"
  input: "cond/mul_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_4/Switch"
  op: "Switch"
  input: "Reshape_25"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_25"
      }
    }
  }
}
node {
  name: "cond/Slice_4"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_4/begin"
  input: "cond/Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_12/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_12/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_12/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_12"
  op: "StridedSlice"
  input: "cond/concat_4"
  input: "cond/strided_slice_12/stack"
  input: "cond/strided_slice_12/stack_1"
  input: "cond/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_11/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_11"
  op: "Mul"
  input: "cond/strided_slice_12"
  input: "cond/mul_11/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_13/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_13/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "cond/strided_slice_13/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_13"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_13/stack"
  input: "cond/strided_slice_13/stack_1"
  input: "cond/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_12/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_12"
  op: "Mul"
  input: "cond/strided_slice_13"
  input: "cond/mul_12/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_5/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_5/begin"
  op: "Pack"
  input: "cond/Slice_5/begin/0"
  input: "cond/mul_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_5/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_5/size"
  op: "Pack"
  input: "cond/Slice_5/size/0"
  input: "cond/mul_12"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_5"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_5/begin"
  input: "cond/Slice_5/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/add_1"
  op: "AddV2"
  input: "cond/Slice_4"
  input: "cond/Slice_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_14/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_14/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_14/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_14"
  op: "StridedSlice"
  input: "cond/concat_4"
  input: "cond/strided_slice_14/stack"
  input: "cond/strided_slice_14/stack_1"
  input: "cond/strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_13/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_13"
  op: "Mul"
  input: "cond/strided_slice_14"
  input: "cond/mul_13/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_15/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_15/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_15/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_15"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_15/stack"
  input: "cond/strided_slice_15/stack_1"
  input: "cond/strided_slice_15/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_14/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_14"
  op: "Mul"
  input: "cond/strided_slice_15"
  input: "cond/mul_14/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_6/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_6/begin"
  op: "Pack"
  input: "cond/Slice_6/begin/0"
  input: "cond/mul_13"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_6/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_6/size"
  op: "Pack"
  input: "cond/Slice_6/size/0"
  input: "cond/mul_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_6"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_6/begin"
  input: "cond/Slice_6/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_16/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_16/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_16/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_16"
  op: "StridedSlice"
  input: "cond/concat_4"
  input: "cond/strided_slice_16/stack"
  input: "cond/strided_slice_16/stack_1"
  input: "cond/strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_15/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_15"
  op: "Mul"
  input: "cond/strided_slice_16"
  input: "cond/mul_15/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_17/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_17/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "cond/strided_slice_17/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_17"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_17/stack"
  input: "cond/strided_slice_17/stack_1"
  input: "cond/strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_16/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_16"
  op: "Mul"
  input: "cond/strided_slice_17"
  input: "cond/mul_16/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_7/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_7/begin"
  op: "Pack"
  input: "cond/Slice_7/begin/0"
  input: "cond/mul_15"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_7/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_7/size"
  op: "Pack"
  input: "cond/Slice_7/size/0"
  input: "cond/mul_16"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_7"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_7/begin"
  input: "cond/Slice_7/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/mul_17/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3140456936484258
      }
    }
  }
}
node {
  name: "cond/mul_17"
  op: "Mul"
  input: "cond/Slice_7"
  input: "cond/mul_17/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_5/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_5"
  op: "ConcatV2"
  input: "cond/add_1"
  input: "cond/Slice_6"
  input: "cond/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/concat_6/concat"
  op: "Identity"
  input: "cond/mul_17"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_7/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_7"
  op: "ConcatV2"
  input: "cond/concat_5"
  input: "cond/concat_6/concat"
  input: "cond/concat_7/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_18/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/strided_slice_18/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/strided_slice_18/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cond/strided_slice_18/Switch"
  op: "Switch"
  input: "Reshape_1"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_1"
      }
    }
  }
}
node {
  name: "cond/strided_slice_18"
  op: "StridedSlice"
  input: "cond/strided_slice_18/Switch"
  input: "cond/strided_slice_18/stack"
  input: "cond/strided_slice_18/stack_1"
  input: "cond/strided_slice_18/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/strided_slice_19/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_19/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_19/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_19"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_19/stack"
  input: "cond/strided_slice_19/stack_1"
  input: "cond/strided_slice_19/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_20/stack"
  op: "Pack"
  input: "cond/strided_slice_19"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/strided_slice_20/stack_1"
  op: "Pack"
  input: "cond/Const"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/strided_slice_20/stack_2"
  op: "Pack"
  input: "cond/Const_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/strided_slice_20"
  op: "StridedSlice"
  input: "cond/strided_slice_18"
  input: "cond/strided_slice_20/stack"
  input: "cond/strided_slice_20/stack_1"
  input: "cond/strided_slice_20/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/UniqueWithCounts"
  op: "UniqueWithCounts"
  input: "cond/strided_slice_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Cumsum_2/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Cumsum_2"
  op: "Cumsum"
  input: "cond/UniqueWithCounts:2"
  input: "cond/Cumsum_2/axis"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "exclusive"
    value {
      b: false
    }
  }
  attr {
    key: "reverse"
    value {
      b: false
    }
  }
}
node {
  name: "cond/concat_8/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat_8/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat_8"
  op: "ConcatV2"
  input: "cond/concat_8/values_0"
  input: "cond/Cumsum_2"
  input: "cond/concat_8/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_21/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_21/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_21/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_21"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_21/stack"
  input: "cond/strided_slice_21/stack_1"
  input: "cond/strided_slice_21/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/add_2"
  op: "AddV2"
  input: "cond/concat_8"
  input: "cond/strided_slice_21"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_22/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_22/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_22/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_22"
  op: "StridedSlice"
  input: "cond/add_2"
  input: "cond/strided_slice_22/stack"
  input: "cond/strided_slice_22/stack_1"
  input: "cond/strided_slice_22/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_18/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_18"
  op: "Mul"
  input: "cond/strided_slice_22"
  input: "cond/mul_18/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_23/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_23/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_23/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_23"
  op: "StridedSlice"
  input: "cond/UniqueWithCounts:2"
  input: "cond/strided_slice_23/stack"
  input: "cond/strided_slice_23/stack_1"
  input: "cond/strided_slice_23/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_19/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_19"
  op: "Mul"
  input: "cond/strided_slice_23"
  input: "cond/mul_19/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_8/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_8/begin"
  op: "Pack"
  input: "cond/Slice_8/begin/0"
  input: "cond/mul_18"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_8/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_8/size"
  op: "Pack"
  input: "cond/Slice_8/size/0"
  input: "cond/mul_19"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_8"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_8/begin"
  input: "cond/Slice_8/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_24/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_24/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_24/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_24"
  op: "StridedSlice"
  input: "cond/add_2"
  input: "cond/strided_slice_24/stack"
  input: "cond/strided_slice_24/stack_1"
  input: "cond/strided_slice_24/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_20/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_20"
  op: "Mul"
  input: "cond/strided_slice_24"
  input: "cond/mul_20/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_25/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_25/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_25/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_25"
  op: "StridedSlice"
  input: "cond/UniqueWithCounts:2"
  input: "cond/strided_slice_25/stack"
  input: "cond/strided_slice_25/stack_1"
  input: "cond/strided_slice_25/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_21/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_21"
  op: "Mul"
  input: "cond/strided_slice_25"
  input: "cond/mul_21/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_9/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_9/begin"
  op: "Pack"
  input: "cond/Slice_9/begin/0"
  input: "cond/mul_20"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_9/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_9/size"
  op: "Pack"
  input: "cond/Slice_9/size/0"
  input: "cond/mul_21"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_9"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_9/begin"
  input: "cond/Slice_9/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/add_3"
  op: "AddV2"
  input: "cond/Slice_8"
  input: "cond/Slice_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_26/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_26/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_26/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_26"
  op: "StridedSlice"
  input: "cond/add_2"
  input: "cond/strided_slice_26/stack"
  input: "cond/strided_slice_26/stack_1"
  input: "cond/strided_slice_26/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_22/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_22"
  op: "Mul"
  input: "cond/strided_slice_26"
  input: "cond/mul_22/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_27/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_27/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_27/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_27"
  op: "StridedSlice"
  input: "cond/UniqueWithCounts:2"
  input: "cond/strided_slice_27/stack"
  input: "cond/strided_slice_27/stack_1"
  input: "cond/strided_slice_27/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_23/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_23"
  op: "Mul"
  input: "cond/strided_slice_27"
  input: "cond/mul_23/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_10/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_10/begin"
  op: "Pack"
  input: "cond/Slice_10/begin/0"
  input: "cond/mul_22"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_10/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_10/size"
  op: "Pack"
  input: "cond/Slice_10/size/0"
  input: "cond/mul_23"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_10"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_10/begin"
  input: "cond/Slice_10/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_28/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_28/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_28/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_28"
  op: "StridedSlice"
  input: "cond/add_2"
  input: "cond/strided_slice_28/stack"
  input: "cond/strided_slice_28/stack_1"
  input: "cond/strided_slice_28/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_24/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_24"
  op: "Mul"
  input: "cond/strided_slice_28"
  input: "cond/mul_24/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_29/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_29/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_29/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_29"
  op: "StridedSlice"
  input: "cond/UniqueWithCounts:2"
  input: "cond/strided_slice_29/stack"
  input: "cond/strided_slice_29/stack_1"
  input: "cond/strided_slice_29/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_25/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_25"
  op: "Mul"
  input: "cond/strided_slice_29"
  input: "cond/mul_25/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_11/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_11/begin"
  op: "Pack"
  input: "cond/Slice_11/begin/0"
  input: "cond/mul_24"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_11/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_11/size"
  op: "Pack"
  input: "cond/Slice_11/size/0"
  input: "cond/mul_25"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_11"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_11/begin"
  input: "cond/Slice_11/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/mul_26/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3140456936484258
      }
    }
  }
}
node {
  name: "cond/mul_26"
  op: "Mul"
  input: "cond/Slice_11"
  input: "cond/mul_26/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_9/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_9"
  op: "ConcatV2"
  input: "cond/add_3"
  input: "cond/Slice_10"
  input: "cond/concat_9/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/concat_10/concat"
  op: "Identity"
  input: "cond/mul_26"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_11/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_11"
  op: "ConcatV2"
  input: "cond/concat_9"
  input: "cond/concat_10/concat"
  input: "cond/concat_11/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/concat_12/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_12"
  op: "ConcatV2"
  input: "cond/concat_7"
  input: "cond/concat_11"
  input: "cond/concat_12/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/concat_12"
  input: "cond/concat_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "strided_slice_33/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_33/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_33/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_33"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_33/stack"
  input: "strided_slice_33/stack_1"
  input: "strided_slice_33/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "mul_7"
  op: "Mul"
  input: "mul_7/x"
  input: "strided_slice_33"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_force/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "o_force/shape"
  op: "Pack"
  input: "o_force/shape/0"
  input: "mul_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "o_force"
  op: "Reshape"
  input: "cond/Merge"
  input: "o_force/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_virial/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\t\000\000\000"
      }
    }
  }
}
node {
  name: "o_virial"
  op: "Reshape"
  input: "ProdVirialSeA"
  input: "o_virial/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_34/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_34/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_34/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_34"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_34/stack"
  input: "strided_slice_34/stack_1"
  input: "strided_slice_34/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "mul_8"
  op: "Mul"
  input: "mul_8/x"
  input: "strided_slice_34"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_atom_virial/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "o_atom_virial/shape"
  op: "Pack"
  input: "o_atom_virial/shape/0"
  input: "mul_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "o_atom_virial"
  op: "Reshape"
  input: "ProdVirialSeA:1"
  input: "o_atom_virial/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
library {
}
versions {
  producer: 1882
}
