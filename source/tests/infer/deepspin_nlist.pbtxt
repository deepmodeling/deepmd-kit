node {
  name: "train_attr/min_nbor_dist"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3999999935274064
      }
    }
  }
}
node {
  name: "train_attr/training_script"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "{\"model\":{\"type_map\":[\"Ni\",\"O\"],\"descriptor\":{\"type\":\"se_e2_a\",\"sel\":[60,60],\"rcut_smth\":5.4,\"rcut\":5.6,\"neuron\":[20],\"resnet_dt\":false,\"axis_neuron\":16,\"type_one_side\":true,\"precision\":\"float64\",\"seed\":1,\"activation_function\":\"tanh\",\"trainable\":true,\"exclude_types\":[],\"env_protection\":0.0,\"set_davg_zero\":false},\"fitting_net\":{\"neuron\":[20],\"resnet_dt\":true,\"precision\":\"float64\",\"seed\":1,\"type\":\"ener\",\"numb_fparam\":0,\"numb_aparam\":0,\"activation_function\":\"tanh\",\"trainable\":true,\"rcond\":null,\"atom_ener\":[],\"use_aparam_as_mask\":false},\"spin\":{\"use_spin\":[true,false],\"virtual_len\":[0.4],\"spin_norm\":[1.2737]},\"data_stat_nbatch\":10,\"data_stat_protect\":0.01,\"data_bias_nsample\":10,\"pair_exclude_types\":[],\"atom_exclude_types\":[],\"preset_out_bias\":null,\"srtab_add_bias\":true,\"type\":\"standard\"},\"learning_rate\":{\"type\":\"exp\",\"decay_steps\":10000,\"start_lr\":0.001,\"stop_lr\":5.92e-06,\"scale_by_worker\":\"linear\",\"decay_rate\":null},\"loss\":{\"type\":\"ener_spin\",\"start_pref_e\":0.02,\"limit_pref_e\":1,\"start_pref_fr\":1000,\"limit_pref_fr\":1.0,\"start_pref_fm\":10000,\"limit_pref_fm\":10.0,\"start_pref_v\":0,\"limit_pref_v\":0,\"start_pref_ae\":0.0,\"limit_pref_ae\":0.0,\"start_pref_pf\":0.0,\"limit_pref_pf\":0.0,\"enable_atom_ener_coeff\":false},\"training\":{\"training_data\":{\"systems\":[\"../data/data_0/\"],\"batch_size\":1,\"auto_prob\":\"prob_sys_size\",\"sys_probs\":null},\"validation_data\":{\"systems\":[\"../data/data_1/\"],\"batch_size\":1,\"numb_btch\":10,\"auto_prob\":\"prob_sys_size\",\"sys_probs\":null},\"numb_steps\":10,\"seed\":1,\"disp_file\":\"lcurve.out\",\"disp_freq\":5000,\"save_freq\":10000,\"save_ckpt\":\"model.ckpt\",\"max_ckpt_keep\":5,\"change_bias_after_training\":false,\"disp_training\":true,\"time_training\":true,\"profiling\":false,\"profiling_file\":\"timeline.json\",\"enable_profiler\":false,\"tensorboard\":false,\"tensorboard_log_dir\":\"log\",\"tensorboard_freq\":1,\"opt_type\":\"Adam\"}}"
      }
    }
  }
}
node {
  name: "model_type"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "original_model"
      }
    }
  }
}
node {
  name: "t_box"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "t_coord"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "t_type"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "t_natoms"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "t_mesh"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "model_attr/tmap"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Ni O"
      }
    }
  }
}
node {
  name: "model_attr/model_type"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "ener"
      }
    }
  }
}
node {
  name: "model_attr/model_version"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "1.1"
      }
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "strided_slice"
  input: "mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Pack"
  input: "Reshape/shape/0"
  input: "mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "t_coord"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_1/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Pack"
  input: "Reshape_1/shape/0"
  input: "strided_slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "t_type"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "spin_attr/ntypes_spin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "spin_attr/virtual_len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
        }
        double_val: 0.4
      }
    }
  }
}
node {
  name: "spin_attr/spin_norm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
        }
        double_val: 1.2737
      }
    }
  }
}
node {
  name: "descrpt_attr/rcut"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 5.6
      }
    }
  }
}
node {
  name: "descrpt_attr/ntypes"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "descrpt_attr/sel"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "<\000\000\000<\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "descrpt_attr/original_sel"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "<\000\000\000<\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "descrpt_attr/t_avg"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 720
          }
        }
        tensor_content: "\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{\001>MW\307?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216{
      }
    }
  }
}
node {
  name: "descrpt_attr/t_avg/read"
  op: "Identity"
  input: "descrpt_attr/t_avg"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@descrpt_attr/t_avg"
      }
    }
  }
}
node {
  name: "descrpt_attr/t_std"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 720
          }
        }
        tensor_content: "\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?\004\326\021\217{\341\313?\006\023\300fA\376\304?\006\023\300fA\376\304?\006\023\300fA\376\304?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\nV\300?{\350\361v\336\033\302?d\034V\204\nV\300?d\034V\204\nV\300?d\034V\204\n
      }
    }
  }
}
node {
  name: "descrpt_attr/t_std/read"
  op: "Identity"
  input: "descrpt_attr/t_std"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@descrpt_attr/t_std"
      }
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_1/y"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "strided_slice_3"
  input: "mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_2/shape/0"
  op: "Const"
  input: "^descrpt_attr/original_sel"
  input: "^descrpt_attr/sel"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_2/shape"
  op: "Pack"
  input: "Reshape_2/shape/0"
  input: "mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_2"
  op: "Reshape"
  input: "Reshape"
  input: "Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\t\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape_3"
  op: "Reshape"
  input: "t_box"
  input: "Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_4/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_4/shape"
  op: "Pack"
  input: "Reshape_4/shape/0"
  input: "strided_slice_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_4"
  op: "Reshape"
  input: "Reshape_1"
  input: "Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ProdEnvMatA"
  op: "ProdEnvMatA"
  input: "Reshape_2"
  input: "Reshape_4"
  input: "t_natoms"
  input: "Reshape_3"
  input: "t_mesh"
  input: "descrpt_attr/t_avg/read"
  input: "descrpt_attr/t_std/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "rcut_a"
    value {
      f: -1.0
    }
  }
  attr {
    key: "rcut_r"
    value {
      f: 5.599999904632568
    }
  }
  attr {
    key: "rcut_r_smth"
    value {
      f: 5.400000095367432
    }
  }
  attr {
    key: "sel_a"
    value {
      list {
        i: 60
        i: 60
        i: 60
      }
    }
  }
  attr {
    key: "sel_r"
    value {
      list {
        i: 0
        i: 0
        i: 0
      }
    }
  }
}
node {
  name: "Reshape_7/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\320\002\000\000"
      }
    }
  }
}
node {
  name: "Reshape_7"
  op: "Reshape"
  input: "ProdEnvMatA"
  input: "Reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_rmat"
  op: "Identity"
  input: "Reshape_7"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "o_rmat_deriv"
  op: "Identity"
  input: "ProdEnvMatA:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "o_rij"
  op: "Identity"
  input: "ProdEnvMatA:2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "o_nlist"
  op: "Identity"
  input: "ProdEnvMatA:3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_8/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_8/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 720
      }
    }
  }
}
node {
  name: "Reshape_8/shape"
  op: "Pack"
  input: "Reshape_8/shape/0"
  input: "strided_slice_5"
  input: "Reshape_8/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_8"
  op: "Reshape"
  input: "o_rmat"
  input: "Reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_9/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\320\002\000\000"
      }
    }
  }
}
node {
  name: "Reshape_9"
  op: "Reshape"
  input: "Reshape_8"
  input: "Reshape_9/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice"
  op: "Slice"
  input: "Reshape_9"
  input: "filter_type_all/Slice/begin"
  input: "filter_type_all/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Shape"
  op: "Shape"
  input: "filter_type_all/Slice"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice"
  op: "StridedSlice"
  input: "filter_type_all/Shape"
  input: "filter_type_all/strided_slice/stack"
  input: "filter_type_all/strided_slice/stack_1"
  input: "filter_type_all/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "filter_type_all/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\004\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice"
  input: "filter_type_all/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Slice_1/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_1"
  op: "Slice"
  input: "filter_type_all/Reshape"
  input: "filter_type_all/Slice_1/begin"
  input: "filter_type_all/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_1"
  op: "Reshape"
  input: "filter_type_all/Slice_1"
  input: "filter_type_all/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/matrix_1_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\357\223y\021;\222\224\277\033\371|\001\007\350\311?o\026\343\227[\251\327\277\350p\000\272\311xt?\211\321:5\274\034\313?Y\305_\375\032\032\273\277\215\270\025\360\214\254\321?o\227\253pv\201\272? CJ\353\225\304\323\277\235\r\205\354em\213?\000\026m,A\306\312?\000v\2779\252\315\265\277\233X\332\311\372\206\236\277\"\002\206\327\307>\262?m\306\025\311\352\377\224\277\231S\257\251\245!\326?\370\317\233\350\020\033\245\277\237\224\033\236\211/\320?\253\352\0334d\324\304?I\347p\017*\231\312\277"
      }
    }
  }
}
node {
  name: "filter_type_all/matrix_1_0/read"
  op: "Identity"
  input: "filter_type_all/matrix_1_0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/matrix_1_0"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\013\036da]\351\335\277\340\tY;\367\177\000\300_\242\327^\375\350\347\277\270\215\300\321r\211\327\277\311\313\310\003r\270\360\277U\225\352\210\261\205\000\300\321\371\032j\221\373\351\277\316\207\013\275\340\353\364?\'\353\221\341\270\005\324\277\240\020\244H\345&\204\277t\271y\200@\004\342\277\212\337W\254\347.\321\277\007\310\265\220}\273\341\277V?\331\3028\244\346\277x\275.\320\022\000\335?\332\232=\367\250<\001@\250M\210\031\220\303\350?\305\331\341\232A\246\362?\"\3034J=\232\366\277RAT\226\364\250\377?"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_0/read"
  op: "Identity"
  input: "filter_type_all/bias_1_0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/bias_1_0"
      }
    }
  }
}
node {
  name: "filter_type_all/MatMul"
  op: "MatMul"
  input: "filter_type_all/Reshape_1"
  input: "filter_type_all/matrix_1_0/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/BiasAdd"
  op: "BiasAdd"
  input: "filter_type_all/MatMul"
  input: "filter_type_all/bias_1_0/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "filter_type_all/Tanh"
  op: "Tanh"
  input: "filter_type_all/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_2"
  op: "Reshape"
  input: "filter_type_all/Tanh"
  input: "filter_type_all/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377<\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_3"
  op: "Reshape"
  input: "filter_type_all/Reshape_2"
  input: "filter_type_all/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_4/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_4/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_4/shape"
  op: "Pack"
  input: "filter_type_all/strided_slice"
  input: "filter_type_all/Reshape_4/shape/1"
  input: "filter_type_all/Reshape_4/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "filter_type_all/Reshape_4"
  op: "Reshape"
  input: "filter_type_all/Slice"
  input: "filter_type_all/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_4"
  input: "filter_type_all/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\360\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_2/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_2"
  op: "Slice"
  input: "Reshape_9"
  input: "filter_type_all/Slice_2/begin"
  input: "filter_type_all/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Shape_1"
  op: "Shape"
  input: "filter_type_all/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_1"
  op: "StridedSlice"
  input: "filter_type_all/Shape_1"
  input: "filter_type_all/strided_slice_1/stack"
  input: "filter_type_all/strided_slice_1/stack_1"
  input: "filter_type_all/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "filter_type_all/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\004\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_5"
  op: "Reshape"
  input: "filter_type_all/Slice_2"
  input: "filter_type_all/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_3/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_3"
  op: "Slice"
  input: "filter_type_all/Reshape_5"
  input: "filter_type_all/Slice_3/begin"
  input: "filter_type_all/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_6/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_6"
  op: "Reshape"
  input: "filter_type_all/Slice_3"
  input: "filter_type_all/Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/matrix_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\2242\263Q\210i\326?\317\363SPrm\257\277mp\315Go\207\300?*6\331\3717o\333?\376\037E \356\300\256?+<\375\345\262\346\305?\032\271\037S\270\200\334??6a\036\340\253\310\277\360\301\260\r8T\304\277\304\3474*H\006\316\277\331\244\200V\003e\321?\035\\Be\234\320\307?\363\006\274W\367+\267\277\203\254\177)\310\322\335\277W\326\365\331,W\312?\244Pk\211\365\226\251\277UF\232\242)\215\334?\030\366\023\001\023C\264\277\004<\376p\007\257\320?\237\354sF\2418\255?"
      }
    }
  }
}
node {
  name: "filter_type_all/matrix_1_1/read"
  op: "Identity"
  input: "filter_type_all/matrix_1_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/matrix_1_1"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\244\273\223S\332F\310?0T;\363\325X\351?\300~\276\326\026+\367?7$\013\006.:\331?\343\375_Oq\032\374\277=Q\304\243A=\363?~\210 \204\211\331\370?\306/\364\177\216{\342\277I\260\"B\227,\324\277\255#\273\313\345\261\321\277k\3569V\022\234\274\277\035\276p\2004\225\347\277\355,/l\340\330\376?\200X7+=\311\246\277\017\250\225E\243\243\326\277\243\231\277e\300(\320?\271\3239j3\310\341?\340\257\351c\265\224\363\277\231\0056\003\036Z\360?1V\0246aJ\364?"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_1/read"
  op: "Identity"
  input: "filter_type_all/bias_1_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/bias_1_1"
      }
    }
  }
}
node {
  name: "filter_type_all/MatMul_2"
  op: "MatMul"
  input: "filter_type_all/Reshape_6"
  input: "filter_type_all/matrix_1_1/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/BiasAdd_1"
  op: "BiasAdd"
  input: "filter_type_all/MatMul_2"
  input: "filter_type_all/bias_1_1/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "filter_type_all/Tanh_1"
  op: "Tanh"
  input: "filter_type_all/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_7/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_7"
  op: "Reshape"
  input: "filter_type_all/Tanh_1"
  input: "filter_type_all/Reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_8/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377<\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_8"
  op: "Reshape"
  input: "filter_type_all/Reshape_7"
  input: "filter_type_all/Reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_9/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_9/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_9/shape"
  op: "Pack"
  input: "filter_type_all/strided_slice_1"
  input: "filter_type_all/Reshape_9/shape/1"
  input: "filter_type_all/Reshape_9/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "filter_type_all/Reshape_9"
  op: "Reshape"
  input: "filter_type_all/Slice_2"
  input: "filter_type_all/Reshape_9/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/MatMul_3"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_9"
  input: "filter_type_all/Reshape_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/Slice_4/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\340\001\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_4/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_4"
  op: "Slice"
  input: "Reshape_9"
  input: "filter_type_all/Slice_4/begin"
  input: "filter_type_all/Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Shape_2"
  op: "Shape"
  input: "filter_type_all/Slice_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "filter_type_all/strided_slice_2"
  op: "StridedSlice"
  input: "filter_type_all/Shape_2"
  input: "filter_type_all/strided_slice_2/stack"
  input: "filter_type_all/strided_slice_2/stack_1"
  input: "filter_type_all/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "filter_type_all/Reshape_10/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\004\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_10"
  op: "Reshape"
  input: "filter_type_all/Slice_4"
  input: "filter_type_all/Reshape_10/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Slice_5/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_5/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_5"
  op: "Slice"
  input: "filter_type_all/Reshape_10"
  input: "filter_type_all/Slice_5/begin"
  input: "filter_type_all/Slice_5/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_11/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_11"
  op: "Reshape"
  input: "filter_type_all/Slice_5"
  input: "filter_type_all/Reshape_11/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/matrix_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        tensor_content: "-\363\345\213\274\250\316?\\\355g*t\037\316\277,\0321SE@\314?\346\331\026\326m \336?3\370\026\213\275\276\241?:\366\332\246\301\316\267?\223Y\031\250\341w\316?vs\224R\355\010\303\277\311j\021|\245\343\321?\332\343\274)\375\321\266?x\306Y\213?\177\343?\376\\\374|\002(\331\277\362\205\366~\341R\341\277c\030_ \274K\241\277\017\227\216\267g#\330?\241\2769J\356\n\327?+0\206\202\377\035\307\277M\356\223U\310\003\301\277e>\325X\017\243\272\277\341\254v6\327?\323?"
      }
    }
  }
}
node {
  name: "filter_type_all/matrix_1_2/read"
  op: "Identity"
  input: "filter_type_all/matrix_1_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/matrix_1_2"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\n\232\245$\245\302\351\277\210\307-;:\316\311\277\266\237P[\3235\274?\327\001O\022<\201\374\277AW\203\246b\017\272?7\232#\262\370\262\362?\264\356\253\202#\320\333\277\001R\'\224\020\003\367\277{\275\321m\302\377\360?Y\005\216\311\250\227\353\277m\374/\026\276j\370?<\374\020\273\336\376\370\277\350\001\2226\265\205\351\277\217\024kO.L\340?\216\324\275\367\201X\325?\377\235\010E\324\325\351\277\257Q\300\360\302\177\351?6\rj)\224\363\357\277~\n\240\307\255\025\354\277_{\2079\022S`\277"
      }
    }
  }
}
node {
  name: "filter_type_all/bias_1_2/read"
  op: "Identity"
  input: "filter_type_all/bias_1_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@filter_type_all/bias_1_2"
      }
    }
  }
}
node {
  name: "filter_type_all/MatMul_4"
  op: "MatMul"
  input: "filter_type_all/Reshape_11"
  input: "filter_type_all/matrix_1_2/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/BiasAdd_2"
  op: "BiasAdd"
  input: "filter_type_all/MatMul_4"
  input: "filter_type_all/bias_1_2/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "filter_type_all/Tanh_2"
  op: "Tanh"
  input: "filter_type_all/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Reshape_12/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_12"
  op: "Reshape"
  input: "filter_type_all/Tanh_2"
  input: "filter_type_all/Reshape_12/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_13/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377<\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_13"
  op: "Reshape"
  input: "filter_type_all/Reshape_12"
  input: "filter_type_all/Reshape_13/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/Reshape_14/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_14/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_14/shape"
  op: "Pack"
  input: "filter_type_all/strided_slice_2"
  input: "filter_type_all/Reshape_14/shape/1"
  input: "filter_type_all/Reshape_14/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "filter_type_all/Reshape_14"
  op: "Reshape"
  input: "filter_type_all/Slice_4"
  input: "filter_type_all/Reshape_14/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "filter_type_all/MatMul_5"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_14"
  input: "filter_type_all/Reshape_13"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/AddN"
  op: "AddN"
  input: "filter_type_all/MatMul_1"
  input: "filter_type_all/MatMul_3"
  input: "filter_type_all/MatMul_5"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 180.0
      }
    }
  }
}
node {
  name: "filter_type_all/truediv"
  op: "RealDiv"
  input: "filter_type_all/AddN"
  input: "filter_type_all/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/Slice_6/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_6/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\020\000\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Slice_6"
  op: "Slice"
  input: "filter_type_all/truediv"
  input: "filter_type_all/Slice_6/begin"
  input: "filter_type_all/Slice_6/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "filter_type_all/MatMul_6"
  op: "BatchMatMulV2"
  input: "filter_type_all/truediv"
  input: "filter_type_all/Slice_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "filter_type_all/Reshape_15/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\001\000\000"
      }
    }
  }
}
node {
  name: "filter_type_all/Reshape_15"
  op: "Reshape"
  input: "filter_type_all/MatMul_6"
  input: "filter_type_all/Reshape_15/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "Reshape_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_9"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice_9/stack"
  input: "strided_slice_9/stack_1"
  input: "strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_10/stack"
  input: "strided_slice_10/stack_1"
  input: "strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_12/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 320
      }
    }
  }
}
node {
  name: "Reshape_12/shape"
  op: "Pack"
  input: "strided_slice_9"
  input: "strided_slice_10"
  input: "Reshape_12/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_12"
  op: "Reshape"
  input: "filter_type_all/Reshape_15"
  input: "Reshape_12/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_1/concat"
  op: "Identity"
  input: "Reshape_12"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "o_descriptor"
  op: "Identity"
  input: "concat_1/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "fitting_attr/dfparam"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "fitting_attr/daparam"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "fitting_attr/t_bias_atom_e"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d[\236\207\317\263\033\300d[\236\207\317\263\013\300"
      }
    }
  }
}
node {
  name: "fitting_attr/t_bias_atom_e/read"
  op: "Identity"
  input: "fitting_attr/t_bias_atom_e"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fitting_attr/t_bias_atom_e"
      }
    }
  }
}
node {
  name: "strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_13"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_13/stack"
  input: "strided_slice_13/stack_1"
  input: "strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_14/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_14/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 320
      }
    }
  }
}
node {
  name: "Reshape_14/shape"
  op: "Pack"
  input: "Reshape_14/shape/0"
  input: "strided_slice_13"
  input: "Reshape_14/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_14"
  op: "Reshape"
  input: "o_descriptor"
  input: "Reshape_14/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_14/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_14/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_14/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_14"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_14/stack"
  input: "strided_slice_14/stack_1"
  input: "strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_15/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_15/shape"
  op: "Pack"
  input: "Reshape_15/shape/0"
  input: "strided_slice_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_15"
  op: "Reshape"
  input: "t_type"
  input: "Reshape_15/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_16/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_16/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_16/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_16"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_16/stack"
  input: "strided_slice_16/stack_1"
  input: "strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "strided_slice_16"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_2/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_2/size"
  op: "Pack"
  input: "Slice_2/size/0"
  input: "Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_2"
  op: "Slice"
  input: "Reshape_15"
  input: "Slice_2/begin"
  input: "Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "GreaterEqual_1"
  op: "GreaterEqual"
  input: "Slice_2"
  input: "GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "GreaterEqual_1"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Reshape_17/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_17"
  op: "Reshape"
  input: "Slice_2"
  input: "Reshape_17/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_17/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_17/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_17/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_17"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_17/stack"
  input: "strided_slice_17/stack_1"
  input: "strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_3/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_3/size/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_3/size"
  op: "Pack"
  input: "Slice_3/size/0"
  input: "strided_slice_17"
  input: "Slice_3/size/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_3"
  op: "Slice"
  input: "Reshape_14"
  input: "Slice_3/begin"
  input: "Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Reshape_18/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\001\000\000"
      }
    }
  }
}
node {
  name: "Reshape_18"
  op: "Reshape"
  input: "Slice_3"
  input: "Reshape_18/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "layer_0_type_0/matrix"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 320
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\233n^\240c\344\206?+\261\344\023\331\221\221\277\357\031BVM>\250\277\003\255_3q\360\206\277\271\365\3501\332\006\273?\272:\232d\344\212\226\277hd\335\014<\010\226?\200v\016\357\260Q\267\277\271&\2074\223)\241?Z\345\216\367\300\347\243\277\350P\007\3506\\\206?\223\340`\250-\034\255\277y\354J:N\307a?%\306;\311\333\232\265?s\330\3218\226\036\244?I\0253dhK\226\277\344\010\006l\363&\256\277\300\301%\365u.\301?S6Yr\210\r\221\277\005\371\035-\037G\232?\234\372\274\221\"\024\244?5\355\2266\\$\237?N\314\033\005\354\334\213?\013\211s\260\177\027\226\277R\2236M\216N\231\277$\275\233h^\340\211?;\341\262\307\272_\365>f/\001\017\033\263\275\277\315?\211\231\322\020\255\277\305%v|\177j\236\277p\221\250\027\010\267\247\277\257+\221\223T\240\232\277$\241z\360\317M{\277\321\000\345u\276|\256\277.`\352\225 a\245\277\204y-\310\217\245\222\277\340(K\347 _\256?\326\330\275\360\311T\210?u25\210\014\224|\277\275\025\177\177\365L\245\277\334n^;8*\243\277\355\t\210j\246\253\272?\355\317\352\326\031\327\261\277\256x\320\367\236\241\220\277R\330\307\020\027\243\244?\311g\005x\0310\241\277\320\236x\330\377t\262\277\310\330\313\266\253\332R\277\326-\234Y\224h\177?|\240\341\002\214q\260?\001r\300O\363\027\221\277\234\3616\376\203\264\226\277Hc\212\'\243E\270?%\370\251\005V\014\202\277<\273\320\251\214\371\300\277\"\035\362\306gi\237?k\022\020L\244\236y?\356\232\247:\263p\223\277.D/$\204K`?\370Ysr\363T?\277\222\261\206?\000\332\254?\310\262JC\305\032z?\303C\375\033\234\255\262\277\345\033w\234\345\220\221?\264\353\371UZ$\237\277.\316JT\233p/?\263;\177\257\307w\234\277\330/\027\224\373\231\264?\246\320\007\334<\200\202?\252\237\nP\300\346\274?N\024)(\227:q\277B\014\217go|s?\364\266d(\212\016\231\277\370\254T\034\215\261\236\277\3433X\260d\312\252?&\020aA\273\266\204?\205s\300\302\252\311\265\277r\377\331\236\323\272\261\277\267\273\357\245\312Y\263?;\020-i\375z\250?\nR\007~\377\321\250?\007^H5w\037v?\300d\235\177\205\026\240\277H\357\226$\347\242\243\277\236\303N\216\242\345\251\277\227\027\264\345\014\227\277?\263]/s\026\002\242?F1N\310\211\231\213?R\3211\260\266\364\272?\312\245pj\024f\265?\226~R\236+\347\246\2778\030\034-/J\251\277\241\207.\360F\217\224\277\371\334\205\245 $\202?\203_\313\372N;\214\277\305\277E\310V\000\252\277\377\267\351&\331\025s\277\034\355-\247\266\177\254?\n\371\321\337j*\262?\036\333\2407\221\031\256\277\017\347=N\224\375\237\277[%\2714\240Q\256\277\260\n\332.\r\322\235?\225\246\321\036g>\217?3\376/\230\267:\\?\274\227>\016\331\366\245\277E\027\221(=\'\252?\177\362Cl\303\300\262\277\036Qv\031\244\351\241\277\3754E\355\350\253\266?b\006\266>\314\200\256?\352\341\205\023\004^i?\250\367\273O\327\352\225?IR\272\000\374\375\246?\026\251\242\315\276\010\261\277aPZ\375\0057\272\277\022\256\211\2626D\221\277\3479 d\306l\206\277\3666hA\314\356\236\277\252 C9Qb\246\277F\013\006\252)N\240?\304\316[q\374\303\231\277\214\215\271\306\016\276\241?w\364\256wq\337\202\277\304\3752\034\244K\260?<\225 \3774\216\232?n\374\324\343I\003\205\2778\357\200\373\262\270\246?\326\232#\355\250^\222\277\244G\302\206\235\023\220\277\"\365!8\032\374\213\277\001n\322\261\322\037\225\277p\346\200\312\366\030\232?\217\207<\236\253\202\220\277\324La\201\344\026\242\277\317\307w#x`\222?\276\202\236`\252\352\271\277HJ\267:\273\364\234\277\257\225\340\314\327*\263\277U\335\342D\330\017\215\277n\265\377\"\222(\254?\2370\024W\035\203\260?\245[\371/\2450\264\277\226\340\216\370\301\323\262?\214\314\216O\034\2406?$RP_J\255{\277u\r>]-\001\245?g\223\346\323N\014\224\277\031\351\211\003t#a\277`>\022=d\210\243\277\364\345e\231\007*^?G\327f\275\272s\204\277Jh\213C\177)\263?\246\035\224\346\214\212\247?\027\007\340C7\022\264\277\202\310\303\237\326\217u\277\270\215{p\020\227{\277\254u\210V\316\244~\277\331\373\335\001p\241\267?\\\220Y[\306>q?\250\304\213\250\210z\265?s\361\332\242P\350\251?\226\373\303.\354\316\220?\335\2465A\377\204\261\277\036Qw\001gK\265?j\346\006\177\027\311\201?>\363\\\213M\261\267\277\213{\254\213[I\240\277\025\370&;NT\246? \202\343z\270\272\273?\025\246\317a|D\211?+\237\316\351t\356\221?\363\035\202S\347\310\267?y\271\326\340X\374\235?X\227\220\345%u\224?\325*\233\222\357W\272\277\3320\254\246\352\331^?(\262\343bW?\223?8\207\t+\352]|\2770S\261[\326\355\251\277+\305~\030\312R\246\277\233\020/\227mg\252?{2\347\375\027m\263?W|*T8\332\226?\334D\271\207\237\341^?\215$4\013\315,A\277\216\024\302>\201w\265\277\314q\264\304\255\360\260?\271\000\334h\233|\262\277[\023s\273\237\356\257?\247K\033\350\026l\234\277\310>\327N\274\357\242\277\321\204\222W\177\t\262?\316\263\216\304\036\264\212\277o.\270!\247M\271\277\037\351m\3736\245=\277\324>?\337\376\254\214\277\036\363\302\272\034\237\257\277\377Z\275JP\020\212\277\271\007#V\262\306\260?V\343\234\232\271\273\223\277\361M|\256\326\372\224?gV1\216I+\261\277 |\254\237\013\216\236?RP\307_\251E\261\2772\352\035\217\3461\251\277*\327r\322\3577\205?\317L\\\342\322w\212\277\343\301\022nl6\261?!\357\rE\2567\261\277y\001\234=o\302\252\277\310s=\355,\240\240\277\324E\227\304\305\212\260\277q\305[\225\351\263\237?S@#L\023\240k\277\323/\021\365\377N\235\277\225\262\225/\363\256\242?\313[\351\023 \377\252?\020,\220\250\345A\225?\t\321\013\030\246\245\253\277\307\027\363=\022\321\264?\035\335_X\335\036\260?\"\t\213L\023\272\252\277\301\264G\335\275\t\245?\234\325\352D\320\253\243?\222\222l\342\235\246\264?\344 U`A&\233\277\3340\261FC\014\261?\222A\272S\315\375A?\324]\206\020\t@v\277\230\234\357.pZ\243\277\231g(U\273\007\256?\273\271\363\260\022\266\240?$\2151\262\3115\221?Y\344\356\353\363\350\256\277\230\235^\360\313\025\223?^\212\366\332L\025\243\277\366\232\030\235\t\321q\277\034\206[\356!\315\240\277M\006\002%a\337\240\277\322\226\025\237\240\275\240?\343\',\334\230\247\242\277\265\241i\345x\324\234\277\270\204\275J+\211\301\277\261\303*\346l\n\241?m\37639\177\n\260?5$\361+\330\327\243?\356\312\321v/\032\246?a\251\231\022\366\016\244\277.\341\240\212#\326\261\277\224h\013\213E\264\254?*\313Q!\326s\260\277\rP\333E\206\217\267?\223\346\313\270\031\276\255\277&\207\335\374\"\246\234\277gLn\322\033n\243?\202\301t<F\254|\277\233)+\352\362\372\220?\345#\025?\nf\211\277\275\3759\375\233_\212?\3208\355jU\303\177\277\361\357m\020\345\206\242?\232<\233\017\230\351\226?\373[\373\010n,\253\277\325\357\236\311\302N\264\277\202\035\235\013\227\253\222?Dx\303\306i\244\231\277\222)\350WK>\243?\343\317w\0204\023~\277^\200{\016\247P\226?\360,-3\361\213{\277\236\350j\310\332\372\235?J\262\325\331:\344\260?x\014\352v\335\244\242\277\336S\335\334\227=\224\277\332\034&\373\267h\262\277\301\263Z\233\323\007\210\277v\000\036\264\202C\245?\340\024\317v\032\237\200\277*t\010%\313F\251?_\211\356\346!iy?\3337\253E\252=t\277@\313=J\313\360\206\277\330\226D\214Q\255p?\210\342\351\350\233\323\236?\265\030\330_\216\276\233\277\300nI`\343\273\255\277u\357:V\000\310p?G_\300\2062\325\257\277\343_\021\236\275\202\235\277\216\367[\013\302{\235\277\255,\237B8\323\203?\376\255\223n^\236\264?d=\225%[\036\263?\246\005\223\350\276&\256\277\204=W\205\007\305\262\277S\274^\362\300\375\213?af\372_\373\343\274?K,\331 l\307\227?\270c\013\260\250\n\241?\177\027pyk\002\230\277\252tt\215C\332\205\277\034\367\260BQ\355\223?\261\3306\330\262s\242\277Nh\302C\026?\246?m\026\242\006\336\t\215\277j\267\305[\366\333\251?V\341{\277\357\207\200\277\250\261\336\\\024\342\240?\261\006\020\341)\262\262\277\005\014+\207\213\303\300?G\271p\206\314\231\266?\202\226<\021\204\314\252\277\020\306\266s\236z\234?\245\317\006\n\275~\230?~V\250x!g|\2774\035\376\232\241\024\215?Q\236\325z6\307\242\277\006\r\356\320\001^\230?(\353\327\257w\334\222?\272\3126on\237\276\277<\217$l_G\222?\013D\2747+\216\264?\02204\252\"~\227\277`U\363\275x\255\240?\021S\t[$[q\277\244\206b\177\\\327\230\277\225\330\242\264\227\276|\277w\220\3716\216\324\203?\371]\315\370\364@\262\277m*IM\221{\255?\343K`\236\265\351\220?&\332w\314w\314\273\277U\325%oc}\205\277hW\177]\234\266\242\2770\264\311\221\016t\263?\336\301\365\251\304~\246?zt\202<\275E\244?\245\372Vq\363\311\273\277\013w\367\375\345}\211?\301\017\311\221\3704\231\277L1\003\337t\347\242\277\377yh\0051\344\235? LOY\265q\220\277\360\201:\204\367\250\236\277\362@\020^\270Ui\2774\213\356\253A\'\203?(\370\267\017\240\213\241?\262(k\036\352\003\303\277W\347$\272\260\343\263?\004\325\177\306\025\273\235\277\266i\255u#[\260\277\006\300\033XL\340\251\277\034\3479\333\337\204\226?kB\200\217\220;\241\277\001\303JuL\001\263\277X\020$\213\342\336\242\277\000\\\351\030m\200`\277\355\267\356\271l\206\275?\213\216\242\r\225[\227?w\344\371\0245\033\245\277\2057\334\366\216\332\225??zj\006\366\254|?\246c\270\365\245\355\245\277\233M\230n\224\263\252?x\377\227\371\267\251\246\277\220\334rN\000 \243?tG\354@e\267\265\277\2633n\263*\211\262\2777\2345}|\034\233\277\254\"\246\310\220\372\240?[\334\3753G2\262\277\337#\354T\020\303\256\277\272\236\243%\357\337\226\277\234\001\353\264\316\371\235\277\3054$\207\364(\210\277\277\275\262[i)\254?\253t\034\366v\361\244\277\364g\362\343\035\006\232\277\277x\316va&\263\277\n\375\225\331\2468\230\277n\032B[Rb\220?8\260\245\355\016m\224\277\326\233k\t:\253\266\277\224q)\324\3454\300?\333\r\225w\300#\252\277+/\237.r\033\251?\301J>m\231F\214\277\265\211\265\013T\207\225?V\245$^r\352\200\277\346{\030\275\3573\226\2777\350h3\277p\232\277\231J\301\330E\201\252\277uN\200\345\342r\255\277\366\267w\270\253=\263?\340\304\350\360\214\215t\277@\014\311\003x\320\272\277\203b\016\346>{\177\277\302\006\370\306\274[c\277\320k_\344\344\220\211\277oK\316\376@,\261?\014\310\000\365\323\377\255\277\221\212\340\r\014\364\250?\371\213>\322\250\231\251?\270\255\374S\335s\231?\252\277`\260\374\205\227?.\260,O\265\240\251\277\254G\215\321Q\207\234\277\355\343\264\355W?\267\277\355\257*\246\363\213\246\277h\3170\317q\014\214\277h@\004w\373\027\237\277\227\321\037]\"(\223\277\327\024\351Y\031\374|?\236\377\222\363\223U\206\277\020\234\224\212\211\024\224\277\2525A\260\227\307\241\277\023\244\235\027\t\362\222?Ec\025\2513\301\243?\n\266\260\334S\314\240?\261j\265-/\220\247\277\016\230\234i\344k\244?\215\344\3007\206\371\252?\270\'b\343O\037\300\277\302\345\355\2304k\233\277\353\035D\017\370\322\261?1C\030ya}\253?\200b\032\260s\202\254?\334\025\022? \035\266\277\334\271\354s\224<\252\277W|\002Q\014?\227?\243\004\263`\213\024\253\277>&\203\230\005.\266\277iP\017?\227\332\227\277\034\034\370r\350\257\212\277M\316\227\"\377S\244?\032\313T\nB\234\273?\263\216\324V\256\310\250\277_x\256G \207\227\277\213\244\362Z\n\304\270?\325\\!\200n@\252\277\270\354\024\361M\262\251\277I\356i\334\237\275\231\277\310b\277\023\023\007s?\274:\301\r\322}\243\277\324\3374\256\036K\206\277\231\226\016<~\r\217\277H\2552\300\nw\261?L\002\004\261\350\022\241\277\002\013\326\354cEy\277\010\332s\031Y\313\211?\344*#[\r\262\275\277\204\225(C\017\215\245\277\254*\177\221\354\024a?\246\031\326\301oT\224\277\306\n\363\021h8\265\2778\013\336l\263&\252?(\242g7N\220\265?m\033+\037L\304\255\277h\323\025\314l\331\254\277\336\362/c\251\313\217\277\005}\270\020V\256\220?\033\200\213\237|\330\254?o\351\345\264m\014\246\277\337\330\222\332`\r\215\277\005\344\333\244m\026\240?W\262\305\235\261\344\260\277y4\220\220\235^\302\277Q\311Td\'o\216?gC\2114\252B\260\277\355\212\005\264\301\254\243?\024\307\205\r\356\014\246\277\253\346\201\013\273\273\230\277\026T\302\312y$U\277\265\251\006\232\036s\243\277\330\2646\336\247 \265?\352\027\014\272\371+\275?\370\316\320d6j\244?\001p\244\224\256\316R\277\234\314`\323\302A\267?\230\013[[\201\304\244\277\345\247\242\271\352\335\260\277\364;\367`\0077\232\277\3712\234>`\370\230\277\240\266{\304\001y\222?\003\242h\330+\266w?\314zt=\351=\304\277%\3266\302\220\260\271\277\230kp#\"a\226??,y\3177\233\241?n\335%\212\024I\246?\037h\'[|{\202\277h.OH\271\322\243?\314\033sC.&\272\277Z\252\3242#\215\266?!(\334\377}8\246?\304e\r\010\276~\224\277a\302\313\337\255d\201\277\343\022\354\337S`\230?\021\243eA\254\023\246\277\334}V]\207i\256?X\013\236\325\305=\253\277\273\036\"\313\215\025\240\277;\271\311ci\307\223?3\014\243&\277Q\250?\\4\025\003\345\350\247\277\272\221?}\237\313\254?\315\275\366\253n\307\221\277\205\343>\301\323\203r?\254\223\230uW#\245?\341h\211}\346\270\241\277\nX\247\336\005\361\201\277Pjn\301)>V?\240$\205V\361\207\244\277\305\244p\202\351\033\242?\002\357\3762(\356\200?#\004-B50\241?9\215\243\"OmR?s\rw\3308\257\233\277\204\031\305w+\037\301?\306\310DnA\177\226?\226f\003\204\254n\245?\314+\256B=\265\253?\245\202\032^\330(\243?\235\334*\256\330\036\266?\240u\242\314\0055\240\277\235\326u\001\216R\220\277\233[]\346O\026\212\277\017\024\226\220\234\303\242\277\227<\367\260N\323\264\277\216\375\024Z\207\223\245\277\242\312\216v\264d\213\277\314\371=\273v\317\204?\332\\C\013\206\032\246\277\003k\346\233LJ\257\277(k\016@\206/\255\277$\305^\001\3620\276\277\266\351\317\3673WX?\366\312\211\020\234!\260?W\311\354\206\214Q\244\277F\022\305\233\320\355\261?8\204y\353\026U\244\277)\205\215\323\321\007\211\277\321\314n\372\325J\273?A?r|\260\322\247?s\261\203\017<K\263?\004\203\236\016\243\342\257?8\370F|\234&\235\277\226\036_\025\235:{?\274 \301.\003\014\242\277\322\316\263R\014v\247\277Tk\354\307\3567m\277@\276h.\275\177\253\277\226\2224\003\033\374\233\277\242>\372jP\217\200?\032@\"W\332$\263\277\232\370\023\252\246\317}\277\314l\212\267\034G\256?\336V\273\234\006\320\212\277;Zp\"\205\313\022\277\024\345\264\003|i\264\277x\233\214\327\035%\236?X\221,\030\323\331\263?G|X\331r\264\267\277\337\332[\223m\253\202\277\226\234]\230\010+g?\353nov\260@\255?H#+\276\355\326\255\277#\340e\312\366\006\302\277&1\022;\365\304\301\277\306\375q\323\032\262\241?\274\224\223\032\251\231\262?\355\"\302:C\203\263\277\315\2110\tI\201\222\277_\017\001\224\343\035\257\277l8\207\206\334\234\205?\033^\005\253x\"\250\277HX\005e\260\234\210\277-\201\2614\232\r\270?\343\276\300<N\035\245?\0344\020%\324\237\241?\303A\261\347\305\201`\277\"\313\270\353\013\300\264?\220\307\225\336i\215_\277|g\362\21092\223?u\341\206,Q1`?v\317Q\375\026\342\242?\261J\034\305\300f`?\357\323(]\311\\\232?\237\251g{\222O\261\277A\374;f\334K\266\277\373\341\001\262\363\0231?P\000\0315\211E\300\277\037\332\036\033\340\021\241?\010\216\010\242O#\264?\005N4\027\000\240\260\277x\t\237\216\304\242\232?\357w\240_\365^\245?5G\267\305\000\235\220\277\301\250\246\3318<\201?-\253\'|\3163\234\277\224\250\333`\255\222\225?\324S\350\244\255z\251?9\324\267\014@\324\250?\023\333\205-Pg\242?i\320B\236Cv\235\277\"\215,\034\325\343\240?\010&\274\261\370\027\214?T\222Jz\267z\225? S\177\377\2619\236?[\031\223\035\r9\262?\263\021\307\266 \220\253\277\003\2712OrD\203\277\370\035\300J\0224\266?F\340f\202(\255\257?k\261\361\217k\204\240\277^\227<\023\340\306\246?\255l\035\271\302\273\266?R\345\n\020\002\367\224?Yk\376;\3330\220\277\t\370F\347\260\311\225\277\226\325\214\237y{\264?u\367\353\017\'\363\265?pY\010\035Z)\244?f{bj\013kQ\2770X\302\302\305\217\266?\002||\307z\347\264?\361\t\346\325\251\177\246\277\314\2201n]\352\233\277\352\243H\313[V\257\277UHh\016\013{v\277#\315\347\267\362w\224?U\032\027\223n\231\240?\342\360\342(\0139\300?2rQ\021\335\374T\277%4K&nX\250\277\266\313.1\306\252\276\277\2610\332\310&\236\266\277#\351b\002X\236\206?3e\340S\266\321\270?\322\2315\235\344\014\260?\250\024\340\030tm\250\277 E\035<=\321\263?\270\361iW;\375\203?`F\036\200\340;;\277\317df\223\231}\201\277h\210nt\310\253\225\277\360\305j!M\203\265?\333\252h\375\321\330\222?\311\347\013\004\333\017j\277\210\237\025\016E\326\211\277\232\3118_\360\3435?\254\354\206:1a\252\277\004}\217\263\204\203\244\277\240\312\307\201\016\363\273?\003\007\336\375\014$P\277\021\344\350\270S\304\232?\3611\346v8i\253?\333\270wI1\254\245?\246(\366\220\300\344\266?Z\324\325\333a\246\233?\210\"<\347\037\241\210?+\322\013\376Q]\264\277\305(M\031\274R\263?\273X\017\202\340\305\247\277\220\363\364\205g\006\246\277\370\2522\2175\331\203\2779\226P\255\322\201\214\277\370j\r\002\271\021C\277\266\217M\277\014\251\230?\347\321\'\260l\034\227?\263/\235\010T\204\230?\277\300\351\227[\227\247\277\204\226U\270|\303\213?\372J|,C\236\242?Z }\361\212\354\271?\006s\3418|\302\236?>b*\275\201\024\201?)1\005\277^\230\205?\306/)\375%yx\277\373\212F\007\240\232\224?\207:\307\tF\033\267?\327\303\264\016\307\211\264?R/\254\360U\307\233?\344\235\313\220\361^\241?:Q\262\234\254\310\255\277\350\207m\217\201@\306?s=\027\300\275Z\244\277\350Gv\367x\303\245?\204\204\367\240\031~\236?\211\2760\224Z\035\233?\375>\203\030\250\034\265\277i\312\260.uW\240?KM?};\005|?\311\210y;&\212\261?\211h\373\332\025J\253\277\324a\324\026\354L\207\277\354\364\206\230\334V\212\277\304Ck\375\325\034\233\277\363\210\262\032\3224\237?\266b\202\306\035\222\226?\201J\247\246\361\333\215\277\\\342\346\266\276\377\234?\030\245\032{^\343\266\277\212F\255\2173\265\267?\233\'Y\204\024\342\203?k7g\372\240\021\217\277>\014\306*]\t\263\277\"\270_\230\231P\221\277\3616\304\021\307\241\246?#\027\001\207\332\350\223?\310\237RhCT\272?\020\311\260\232\262\256\256\277\323\353J(\243\361\223?\341\357\"6\341\320\225\277L\0276\337\0172j?j\002hN\370\240{?d\'\314\217\213\302\264\277\274\231\371nG\216\222\277\346\243k\322\200\230\224\277\371}\236\333\\t\263\277\3130-\370.\361}\277_\214\002[\243\265\207\2774\226\303\242\0270\202\277X:n\0168\312\244\277\007\211\312A\261R\243?\223\262\334\257\202y}?\227\017\2353\215\257\252\277\277D\366W\314Vr?\371\225\037\206\021B\234\277[\020r\025@\257\273?\002\264\037\271\277L\261?\356\312\222n\220\333\262\2778\356\332\343\2037\276\2778I8\343\n\334\246\277\367srW\017\241\242\277\263\341\220e\224\275\242?9\027R\357 #\237\277\223??\226\321\n\272?\344\232\266\tL1y\277R\237+\221\254\264|\277\036\211{\017\222<f?\270X\034\242\342\253\216\277\305\240\305<K\356\221?a\020\276\006f,\274?\324\366\307\356\215Qy?\003\231U\032\3563\263?9\'u\335\241\020\261\277\021\335\326\'\332n\224\277(Q\344o\033\003\275\277\004\333\332\327\274\243\252\277\274\017\370O\272\033\225\277Z\273g\257\377`\262?N\337\374\363\217\336\244?dd\241\251\262+\302\277\\\371D\224\361\305\277?,\223\256>\251\314\233\277~\363\305\372\020\211\264\277\023\035\016\206M\264\223?\261\351\210o$\363\271?\343\341\225\356\225ws\277\021\226Y\360\330\273`\277\257qo=\003\006\200?T\376\221.\215\272\236\277Y\240\251\337U\027\250?\320y\231\nhx\247\277\211\004\202z\311\210\250?\016\213\333\374\371\373\260\277\277jpgdo\255\277\r\317\313\234\320\267\224?\366J\225,\004g\250?8\261\201\236:\245\241\277\300Wo\247\227\354\263\277\270(\376R\266gv?M\014\300*\256\374x?=\016}\357\331\247\226?\371{\263m\251\242\202?\213\267\361!\252X\256?\247H\231\321\272\354\273?<\000^uJ\341\224?r\024F\017\311M\252\277o\031\215f\260K\245\277\220\034\227\312c\372\246?\020O\004\361\021\023\243?\277V\033F\333\232O\277`\325\212\372\307\257\247\277\317m\032\366$\260\230\277\007\213L\362\323\326T\277[?5\002m\n\247\277\274\225L\200\244F\236\277a\260<\206M\261\251?5\353\2042L\007\241?\007\303\034\254\237\352\257?^\277\301\0315\"\276\277\355\263<\r\366\372\264?\030\274\335(3\010\235\277oIM\271E\032\227\277\003\006\030\273\263\r\212\277\201T\235T|\371\265?9\222\036\277\217Y\250?\026\224\207\0004:\223?N.44\246\226\204?\361\017\210w\201\350k\277\260*\302\027\215s\240?\362\000\372L\363\226\220\277\021\220\033\357H\303\220?\263w\353`Gs\236\277s\001\240\375\001*\212\277\020\317\315\330&\327\213\277\030x\020\033\017-\243?\007\273\013b\306<\265?\257rt\233\332_u?6=k\2432\360\256?\231\324\247\250>\323X?\260\315Z\256\ro\302\277\033\026Y<\272\207\256?U\316|\215\352\225\214\277\270p\321\201J\324\233?\337\0037\316z\353_\277r\036\276\334\212Y\235?\250\026\334\345\305\317\252?@\212\300\246K\277\225\277\3150\222\272A\266\242?\337i\232\022\203\202\262\277\265\335\352\313i\262m?2\325\232|\364\352\246\277Y;,$\307o\223\277\031\212\005\347\234}\243\277\362\2635\307L\257\240\277\233\023\233{\315\232\202\277\034\261\317\255\010\210\300?\305\224\360\211\213\266\234\277\216^>\275\274Z\202?\344\342\212\320\231\022\256?\016\0026\002\010\021\300\277\001\262\256\257HC\241?\307\270\231\310\214\030\251\277Y\325l\216=\246\235\277\365\366b#=\303\227?g\351\366>H&\235\277jPL\330g\264\264\277\304\245\t\251\3576\261\277F$\246\274Q\376\262\277\025_-v6\372\250\277^k\226?:d_\277\203\321O=\247\247\207?> \321T\376i\234?\356\232@<,J\250?Z\264\3313\006\317\237\277*\327\304\266\006e\223?\231%zG\242J1\277\357\221\2331\"7\262?{\377\030-\244\366\241?X*\265\215\252L\243?\211\376jJ\203H\236?Lmd\251\303\211\256\277-\213y\036\214\357z\277\014\027\265\260\003t\217?\261 3\320\\\244\214\277\3025\261E\263<\264?\331\233/\037;\267\204\277\363\213\222\332\244\226\265?\354\032\210\233w\250\251?\207\371\340\310\201p\227?\337g\252\000\211\337\201\277\326C\274\223\"\351\230?G\371S\205\332\023\267\277SE\264\\\326\267\242\277o\300\265\376\365\375\204?\2625\225Q\r;\272\277tGp\213\217\276\231\277m\314FA\317W\237\277\201K\316\221U=\242?\033q\364Be\257\243\277VsF\000\360\360\270\277J\244.\302\233\243\261?\016yQe\354\345\241\277\204\230S\246\355s\264?\0261\366\215\316W\264?\257\245d\337\241\372\217\277\234\355)\223K\016\230\277\177#F%\372:\237?M\255\230\363\233}\215\277A\326#*\372z\240?\314V\216um;\232\277j\327\2343\244\356\240\277\305m\215\265{\267\200\277<\017\356#\223\006\230?r\336\313\010\317s\260?\314\336YU(\355\233?A\235Y\337\335q\231\277\346\344\245\307\221\233r?\327\027\256\027g\241\271?\223\337N\353A\030\241?\370\006\235\366\227\361\256\277_\305]\364\322/\243?>\362\207\013\232\031\235\277\021\200}\032\275\207\260\277f\'!\300\t\217|\277\243w\240\242g\010\240\277\252\322@5Q\254\216?eZ\332H\215<\271?\324 \273\232\212R\247?\023\202\231=\016F\235\277V[!\345\000\237\204\277\024x\203\344\304>\300\277\367\362\302FN\214\301\277Q\330q\3469\252\250?\027G\016\233~W\205\277\252\035,\240\346n\224?\230~\030\266\314Q\231?]\253w\353\321vh\277\311BZ\035Wy\252?\216\225\341\0043\207\227\277\224\215\2544\377\024\236\277V4\331\347V\335\222?\221\231\177\312\364\316\302\277[#y\'\316\343\213?|\2765[\344n\243\277[[:\257\213p\276?<L#\334\261k\236\277\017\307]\352\275\355\236?\267\302\327(\246\331\263\277]\361\246`^\311\261\277?_\t\233\313\330\272\277\256\371\2075\0351J\277k\235\261\264\306,\273\277mM\261\312\016\013\241?\"S\214\006\361\273\301?c\251\257\202G\372\266\277\221v\366\323c\213\237\277?\340\032zTA\253?Nv\355\366\251\244\241?jN\221\303\305H\255\277I\324\210\001\255\265\273\277\022\356KqRp\247\277j\003\005\207w\335\227?\237\342\027\337I^\260?#\222\024\032\261\002\225?0w\324\345\240\250\242?\342\332\207i\\\215\266?Gb`4\217\233\200\277\256\241S\212\332\223\261?\227e\026U\3055\266\277a\300\215\267\t\022\223?\246\017\3045\213\010\263?e\255\221\330\375\260\206\277\347\221x\325\r\226\250\277\234\277\311\3619\223\261?\375&k+\252Q\300\277\315N\223\353s\360\250?\355&\210\001E\020\227\277\234\336ZB\376\365\244?\211\212!9\320\227\267?\371\326\322\324\323\322\270?c\233\321\2323\'\251\277\267\236\324\352\304\313\255\277!/\032\036\350F\225\277\317\343\026+\237\377\220\277\202M\206\217?\254\227?x\344\330o\206z\233?\327\376\013\352\242b\213?\2215<)&\263\270?P4\237\326x+\213?!\257*r\353\266\255?\223ai*\330\230\207?+\234\305Mvy\267\277N\354\321\246-\224\275??\325\311ox\347x?~\351R8\250Z\265\277\327L\274mUb\234\277\243]\034?\241\204\232?aC\270_\301&\221\277j0F\331%x\260?\177\225\303\211\257\022\252?-g\363\314\233\352\004?nx\007\356\322^\272?+\213\342m$T\272?\257\235\266w\322\335p\277\234S\200\253\r\031\252?`\035\230\353WS\254\277\206\261\273\227d\332\200\277\005*R\332\001\332\246\277E\240\371\033\006\245\202?\275\313\020\343\205\033\255\277\324\017[\255Y\235\274\277>\255?\326\321b\240\277\216\020\207D\016\333\260\277\214I\232\377E\307r\277\223\351j\340V\211\266?\264\232\263\000\026H\237\277p\'\346\230j\016\302?\313A\022F\265K\264?\266\373\267kn\202\227\277\363\257eZ\353?\242?\361.\032b\333\370\243\277v\275V\'\na}\277Q\360\32032\323\240?cH\005\376\313\217\266\277\276\r\221\300\251{\\\277\227bD\001\2163\257\277\023\312\316\210\363\024\221?\3066L\202\2456\244\277M\232mP E\231?\0148\212\237\001t\246\277\017\376x`\335\n\247\277\333\256U\331\253\375\220?_\'\352\315\351\202\212\277e\357\227\025\227\310\224\277\357\326|\273`\335\242?\214w\240\314V\211\254\277\004\\\264\360\311\361\264?\032\365T\245\316\211\203\277\205z&\222\036r\206\277n\305\233\255Q\247\272?\3652\227\267\302\001\223?\314z\337\236\365\377\205?P\270\324\246\313\374\232\277v\"\227? \372\264\277F\237\246@\024D\265?\260\275#\207\362\267\243\277\035/\210\372\303O\215?\206\273(\022s\\\275?\315\310\273\267Y\276\250?\021\013g\232U\033t\277\326\244\3745#\017\246\277@A\234\354(\347\211\277\356\260|\003\223\217\246?\343K\242\005\234\336\223\277<\031\301\257\312\302v\277\276KBrAn\245\277#\345X\332(i\257\277\326#51\346]\243?\033^\000\030W\220\273?4\t#\342\302\037\262\277\226l!\023)\025x?\273\215\256\336\315\317\301\277\200\273o\360/\227\233?.p/fv\277\245\277\335\265\270\264\315\227\241?\270\274\2468\303i\246\277>v\321\240\037\203\265?\223\244Jp\230\205\204?_\362\251\006\275\245\226\2779\242I\332\304\352\233?\000;[+z\372\263\277\001\010<\255\207\231\220\277\201\273\222%\326\232\267\277\303\023,a\340M\262\277\017w\355D\213\335\265?\305q\016H^d\210\2777\212\247\357\213\000\243?\225\2379euK\260\277\372:\333\2653k\213?\367\322\370g\252&\213?\2510\255\246e\212\235\277\263G\035\231\276\364\242\277\341\346M\032Z\030\222\277\252\002`\207\277\036\247?\355\356\247\017d\373\237\277M\336\205qi\021\251\277\242\333\354g\346`\264\277zw\360\230K&\303\277\031\332\347.Ff\241\277\353\242\372\007\311\221\211\277\3207K\204*\302\262?Iq(kj\005\300\277\321J\237t\220Tz\277\237vz\201o\242\257?{13\301V\376\261?\324j\2354\224\206\207\277w\230\214\247H\205h\277{\235bq \r\240\277i\301\371\010\330\033w?\r\346\347\314\300\325\242?\315\343\361\2168:\204\277\332\253\352>L\235\214?=f\301\352\014\221\266\277\354N\275\np\001l\277\205\226d\352\013\351\212\277\177_,+\304\233\247\277!{\256J5k\212?\021\273\367D5\364\220\277\314{?\314e\326\204\277\365\200\333l*\221M?\006x\034\2238\272d\2778\031\372\334g\016\240\277\001/\252\"X\374\206\2776D\317\t\345X\275?\220\354O\'\376\032\255?\004\320\335!*\035U\277r\017O*\242c\262\277\212B\247\020\362\326\263?e\202\013\013\007\224\236?\331\216\325\213\004\230\234?\342@\013/\224\255\260\277\212\206%x\245\022\213\277\0326\357\014/\366\236\277`G\363\336\267\247\224?\01401\255i\253\247\277\270\206\377i\235U\226?j\'\201\357\242z\273\277\207\177\035\326\3379\243?\233H*\004\3710\216?1)\254}\305\323=\277\2452\221\364\023\213\232\277\233W\225\020\266\336a\277\"g\237y\340\244\246\277&\216V`\355\230\256?\351\314\224\233\3750\200\277\200r\033;\245\371\274?\220\242\375\":\313\266\277C1]\276\307\231\260\277e%i\237\014\371\264?`\271\315\224\310\307\244?\222p\262\013\244\355\274\277}1\026\256H\245\243\277JY\216\\*\\\251\277 {yV\330\377u\277\327\251M\016>\264\273\2775\271\360\210\336\325\212\277\232\345c:\177\031\223\277\020<\211A\247\264\241\277H~\256\207\366\320\250\277\203\345\000\332\367\337\272?,\266\231\222\277\r\250\277\323\247DI\306\325\226?\211\033\371\224g`\246\277\331\261\270\251 \233\265\277\334\337\021\343\222\211\251?\323</\324\314B\260\2772RiQQi\203\277\316Y6=\341\026z\277\026\352Z\023\003q\214?\310\223\261\314\256\347\241?\342\234/Q\270\221\233\277\324\326\017\373@\277\220?MP<\016\035\020\206\277\376\204g\342r7\241\277\246{Wb)\226\262?\314\346\337=\331\255\217?>\033\267\304\302M\206?\227\370\327\230\254\347\261\277\220\207\204\005\006|\276?\207Q}\314<\r\232?\376\325Z\022x\335\201?\250\r~\375\200\374\244?\356\364\331\226&\330\216?\316v\377/j\347\225?S;|\226\370d\225?\007\222@\374\020\224\243?\366\r*O\226E\245?DG\314\025\010\327e\277)\323b\20131\224\277\267$\032\356Q\344\242?\352 \277\013VK\261?\002ZY\022\351\247U?t\341\220\002\260L\277\277\255\211@\270\337&w\277!M\022\353\020\000\250?\250\177<\374XaM?\217LJO\211\373\177\277\244\344ww\307E\261?\020\256n\363\362u\246?\371u,c\342\307\224\277J\177\364\002\346\016\226\277?\331.\231\207R\273\277\306l\352\252\021\t\246?\036/\240\257\312\250\231?V\314\365\205\357\231\270?\006\347\325\031\203\005\255\277\230\300XS\032\304x\277\202\352o+\252R\230?\003\377\205IVT\261?\247h\031\255\365\"\240?`!\220 {\310\263?l\231\354\301\365B\260?\256[\033t\253\262\252?\025\303\331Y\240;\231\277\320\332\0337\201\354\266\277\235H\206\275l\204\234?\220\303\022\373\024yt?1\354K]\004\375\250\277\371\360\367\200\264\256\242\277H\027\r\303\3250\233?\373\273\257\353\215\215\222?xn\234\334\213\232\260?\322O\271?c\353z?\322\236/?\374\301\261\277\3116-C\214R\207?o\301x\205l\253\266\277%\336\t\212\341\376\265\277\257\336D\315\233?w\277=\271\3206~1\203\277We\351<D\332\227?q\350\363\201\215\317\263\277\274=\207\307{<d\277O\316\354\252O\351\264?s<\364\347\006\333\200?\340\346\277\004\037_\246\277V}\205\231\260\202\274\277\342\345\246~\223\006\255?G1z\027/m\264?\251\313w\215\263\354 \277\221 \356\034y{~?\251R\344\303\303Y\261?\'=\311q\357(\276\277W\271?\215\035Z\260?\010\"\254xL\226\223\277\263\261H\253\002vp\277\205h(\345\007\321\252\277Ca\353\313`\031\250?\032K\376z+\327\223?\340cy\237\274\311a\277cU\371\324\370\312\266?A\036p3\226\322\275?\212\271\025\310[\303{\277+Q\211\312\177:\230?w_\266*\"h\204?\3637\222=\016N\234\277y)zXz\032\241\277\202\033\226\272\256\010i?\266\312\036_\323\022\251?L\227\\5\033\353\225\277R\352\032P=\253\263\277\tiOj1\207\264?wS\363\235\'\014\263\277\301,\325\230V/\244\277~0\327\033\331)\252?\364W\243\265\311\255\220?\275LK\334\364\260\223?S*\022N\216\027\243?\300\306\227\245\3210\275?^,\3765\341\036\260?\221\t\370\n}B\237?k\356\212g\035\315\260?\021\265h+\323\005\227\277\276\311ND\314\303\240?\013\275\260\217\037\304\260?\356\210\'52h\254?\213DC\244\273\335\264\2778\260\027\253-L\207\277\315v\274h&\247\265\277Zs\327\202K\330\232?\312+\302-\237T\237?\026lg}kN\253\277\300Z\212Cs/\250\277.\032u\327\200\360\241\277!\024\204\366G\354\302?\000\326\023\240y\2413\277\327\357\216\341\240~\265\277\024{\221\303\005\224\274\277\204\364N\256\300]\264?f8\025ID\213\272\277R\000!\204\303;\301?\266/AN\227\200\256\277E\005q\203\242q\262?@\316dB:\202\223\277y\332\315<\323:\263\277\366\217\024H^\274[\277\r\"wi\366\323\251?\335t\0005\033a\257\277uA\362\275\'\242\201?\317\273>\264\351\020\271?\237\274}\240\311\030\220?\342\022x\263\346\227\244?\216\177[\010\200\256\177?\350\362\376M\033\037\203\277Xn#9k\350\230?\365AW\260\233\302\251??\375%\313\260\206\207?[\347\316;\260\020\232?\234\356\246\271\334n\222\277nIY\234\006\274\242\277/\320p\267S=\235?G\313\014\332r\375\204?\271\003@%\242\341\232\277\370\254\240\253\340?\235\2777\313r\352IE\222?\300\231.\010.\340\245?2\030,\000/s\250?\343\005\306{Kc\254?\323Q:\217\3315\243\277b\":k28\266?,=pB\260Y\241\277\227\226!\202(q\251\277\330\370\031\352[l\233\2779ozkF\"\220\277ND\036\240Z\205\221?\251T\321\261\323>\222\277h\004\026\021\376\031\241?\336\033\"\232\\ju\277K\363\350k\267\027\232?\327\361\217;\346\211\213?\"\360\226\205\3431\260\277i\227b\005s\236\245\277~\242\225\241\342\\\224?]\346\t\373\233%\224?\237\234\257\231\272\017c?m\312s\210\201\"\274\277\004R\316\346\210\033x\277?\271S\333+J\221?\312\013|!w\037\211\277\210Tv\252\257\370\200?\3734J^\214\t\246?;\274\021\300u\201\261\277\013\205r\267\232b\246\277\226iT\0072<\262\277\2123\237\375\021q\241?;\035\t\306\251\031\210?\204I\346%M-\202?\331G]\300\241a\206\277\324\234\277\033\357\346\231\277\347\3471\004\274x\247?\340\271\010g\362\336\236?-\215!\n\236u\255\277^\026\000\276\325\'\262?\211\356\306]\001\311[?\303\017\024\325\364L\260\2778\207\"{b\010v\277\257\024\225\265\262\316|?t\235\351\013\266\016\227?CP\020K\231\240\265?\001seX\006\322\237\277Zu\\\264s\032\254\277\027\230\205\266\024\032\225?\341\ni\027\342\245\222\277Tr\t\000\273\355\234?\240\222\261\207\314n\264?F|r\325\234G\256\277\013}O:i\261\262?\343\347\025\215\333`\247\277Z\356\330\200\334\205\217?\231\007\337+\365\250{\277\022\373(\307\242\333\301?\272We\013\021M\223\277ZL%\254\326\021\210?\021\304\320\276?\322\264?\312~\037\300\320k\253?\374\221zU\016@\257\2776\366\311\334\355\363@\277\026\016K\351\240\031\202?\332\276ke=\206m\277M\353\300h\305\037\252\277e\200\345\r\211t\251?\353\373\215D\350\247\237?\332\313&\261\260\276\217?}\361\n<J\325\250?\212\300\340na\253\233?k}BO\020\224\261\277\222\335$q`\231\265\277GCDX\263\214\215\277,\251\204\221\231\036\247\277We\2161\2400u?K+\243\037/\333\210\277\305\362\212q\330\004\253\277\307\3542\034\222l\246?f\201W*\307\366q\277\263e\331\017\221\263\240?\357\242\rV\260\002\276\277\010\r\003\272\355\300\274?\034z!\274\261q\257?b\227.F\347\014\234?\r\004\367\305\035\267\243\277\271\377<\327R\"\256\277\343\035\222,5\027\255?S\226\363\\B\336t\277l\277\322\272\335z\266?,\313\2104\353y\241?)\301\375\037\245\372\243\277\266\241\363\022\264\025\251?\221X\377;\\\025\274?t\353o\212j\001\224?pp\030\025D\324\261\277\177\016\226dF\276\233?\264\213*\027;C\244?\025\225\317i\020&\304?\201\302Y~\350m\254?.\251\253h\t\375`?\333r\354\347@\247\253?\325\014\032_\221c\227?\243kwO\344Q\237?\372o\305\212&\276\224?\203t\2678\023\216\240\277B\036\325\r\246\232c?\267b\200\000\004\262\247\277\261\343eB\223\273\260\277\177$]\304\371\010\260\277\341]!\354\364\270\241?\027\241\320e\324\356t?Z\333\273\332\032\342\272\277\014\251\342\333\362~\252?\355\000\334\202\372j\241?i\367\316/\226I\224?\347\373\367f\244\366\232\277@.H\'\010\002\266\277}$xVtG\242?![\'\2717b\214?\370\021\020x\033V\243?\344\377\361\2269\003\255\277i-\217\377\003\224\274?\315~m\016\271\n\234?z\027P\034@\037\253\277\224\375N\230\0044g\277\006\254\370$\317\302\231\277\214\227\272M\240o\267\277^\027\203\267\030\277\247\277.\232\024@\007&\241?A[\210\020V$\223\277\230\265\023\225@\256\232\277\275=\370\231\034\317\250?&}\316\261\303\026x?\234\317\214\310\327\r\301?\255\010\203e[Q\222\277\342P\031~\"\203{\277\024X\217\277\232\200\224\277\360F\317\245\251q\270\277\001\221eta\305\244?\203\274\241\347\335U\271\277\260#\366#\300T\221?\272\250\222F\335\247`\277\351\\\314\346]A\216\277\323\371\336\265\002\340\217?oY\375Y\336\022\256?7\001\234\351s\240\241\277\207\2067!#\312?\277\031H\002<\353E\244?\320\"\035!\247\240\254?\006\007:\177\310\002\245?\020\341)\253\371\272\254\277F\370\\-\206\313\235?$\206\277yb\002\261\2771\241\357\257\023Y\204\277H\r\032\210\322\304\246?\314j%22o\245\277\314\270\027\2212{\276\277\227L\374\362G\233\224\277\254\277|\201\227C\256\277,\364\177\275\353/\220?0\327\024x\004\305L?\n=m\327\367x\220?:uE\354x_\220\277\004^\237B\211\264\270\277\203\232\030\370y\326\255\277\244\001\033=\267\001\262\277\377\202\250Q\374\365\225\277\247\264\253\212\253\350\225?\335\230\262\216\224\255\225\277Y\002)\322\225\336\310?\214Y\305]1\334\250\277\233\010{\355B\365\222?\325\213\265C\274}\243\277\365N\366\236R\022\262\277\254\224\347\341\252U\257?\361\023\207X\361\007\226?r\003AK\333\276\227?\244\260T\023B\342\205\277\027\206\t\330\375On?\276\305\352\202\221\366\230?\341\246\266\342\000\007\271?z\311\036J\245H\243?M_\221>\242\277\252\277\220\271\020?R\003\257?\t\212[\210\345\210\244?\255:\253t\313\022\240?\036*#\212\206\316\246?\0210\215\350\355B\217?\253\000\341\020{p\223?\025\326\275f\306\256\273\277\251\303Qq\242\020\271\277\233:o\241\225\277\205\277\223\233TW\344j\221\277h\326P\336\004\016\224?V\025\271vR\023\273?\375\221~\010\247\273\264\277\013\275\2660[6\257\277\227\010 \224\352\377\215\277)\251\213L\302\265\203?\237&\005n\363\305\263?\201y\355\327)*\251?r\341Et\256\236\223?\303H\003\2154a\243?\0209\214\211\030\371\200\277\257\227kl\241\213\272?h\305h3\237\207\256?\202=?\374\3511\235\277\004S\201n*\367g\277\031;\365\3645\270\255?\002\331@\205s)\251\277\017\273\237\237:\364\264?\2075!5t\335\251?N\350\371\362\304|\234?\273R\003)3\345\262\277\220\265\255u\014\033\265?j\246\301RT\261\213?\375\026\261\245\265J\265\277\203&L\016\272\306\252?\240&c\301\332\360\274?/\313\203_|R\226?\322#\223\241\265\030\260\277>\223\003\256?\206\256\277 \307\257\234\3060\251?OG\003\345&\\\260\277\035\026{\247\021\007\231?Cy\330\023\331=\260?\337\366r\003\242\212a\277\372\205\252.\360\232\204\277\236\322\020\361\234\220\237?\0205T\006\212\276\264?\235K+\032\277\260q\277\235\016\332\224o\351R?Y\232\304%8\002\270\277\3508aL\354\272\223\277o\364\034R\220\241\244\277\002n_W*\225\261\277\323!\307\006\311\217\243?\017\334\346\362w\330\237\277)\255%\272N\003\243\277\220D/\342Y\205\231?\204\217h\360=\344\271?xn\220\262\203\217\223?t\260\225\0104\304\244\277l\371>\277\315o\245?N>\206\223\000D\253\277I\276\322\241r\250\221\277\303RP>\314\237\021\277\003\341\225>1\354\276\277\261\353\313\3355V\241\277\227\337\237,=\242\231?\224\374\253\177\350\032\225\277Z\317\223\210z\006\260\277HRk\241 .\231?L\337-C\226j\261?)\241\203\252w\021\273?X\213R[M\353\245?l\316(\025\006S\235\277\263\353\2541/h\232?n\302c?\234S\234\277\377\357\365\2439 \223\277R\334\274\031\010\004\246?\207t\231\013\"\213\220\277\315\331\027\256\260\r\242?M\256*!:\367\217?\036.\351\270:\302\245\277\314\353\260\246\007\374\226?yEqE)H\255?\205*2Y\007\363i\277b\210\364Q\316\217\260?\\\032y,X;\267\277\214h\034Wx\230\251\2777c\325\266\307\310o?P\312\212\341\0014\204?\327\204\02617cy?x\244\316l\232\237\247?\350A\220s\332D\272\277\027[$\374B\345\243?h\330\320\261\212+\254\277\334\322\004\217P\007\252\2770g\306\215^\217\234\277\037\004\3372\354t\252\277\340a\231\206\215\372\255\277\007\014\353#\231D\255?\025\245\036\321\253\214\223?\357H\262\341\216\005\236\277\356E\006\276\222\360\226\277s^\233\333JJ\244?\212\366\232\270\241(\253?\033t\264\354\265\342\203?\366\313u\260J$\263\277\330>~\307_\\\240?\261\221\016\202\rP\254\277\327\277\017V@\031\266\277\363z\332\220|\316\276?\373\374\243\020h\215\260?\353\307\372EJ5u?\2172\255p\017\222\262?\022\\\262\r[J\214\277v\350\030\276kg\213\277<Q\331\221\000/\220\277`\224\326\347b\271\204?Q\036\232\201/\212\235\277\005\357\221-p\010\240\277\th5\350\021\241\232\277d\304D\311:\021~\277\032@2g/\t\212?\233\001\216F\266\351\256\277W&\373T\332*\260?\276y\345\220\313\222\212?\000\3356\347E]\301?2O<\340\326i\204?g\254\231,&.\220\277\001\304\020\031\233\264\257\277i\273f-\024\254\250\2774\227\310\225\220\220x?\241X\031W$>\275\277\267fasWO\246\277 \330\334qCxv\277_\324\266\211\247\203x?hn\272\237\347>4\277l\345m\324w\024\200\277\307\330r\374p\251\223\2772\253\267h\273}\267\277*\214\255\246\300\337\274?\220Z\312H\213\322\231\277f*\337\354yi\201?}f\365\310lJ\234?\302\254\350\312\346\314\245?o\306\211X\246\004\224\277>\217\000#\317[\265\277\370\020\363h\0167\267?\241N\027qbA\271?*\356\355H\260\016\225\277=0\355Iug_?\264\220\341Y\305-\246?MA\233\220R\030\264\277\307\231\277l\206\027\256\277\322\303K\310\222\347\263?a\261J/5\317!?0\224D\271\345\031\236\277\370iq\363\263\223\207?X\010\371\347\3562\262?\223\220\324\306W\253\227\277,\350\005\275\357\266\235?Q\nj}\366\004\272\277\274\220\257\223k\035\266?++\345f\030m\252?lI\0229\335%\224\277i:\337d\\~\212\277\201\034\245o<@\232\277g\036K\313^\372\247?4\353M}\302\313\247?\301\376\0177\017\027\273\277\300f\321T|\177\260\277d\232\375U\202\006\264?\204v)\234{V\255\277/:\"\016\001\303\206?\210bD\321\244\323\243?\n\201\277\316\2113\266\277\314\211\342Nm\345\250\277\363\341\230t\303\223\256\277\276\303E\026\363\310\271?\2761\026\362\025r\241?z64|\215\306|\277\305\226X\204^\343\265?Q\221JUW\220\241?\251)\202\302S\373\243?M0&\t=\322\232?\3346\205\300\033\020\251\277\372\027\177\227N*\272?C+\3156.S\241?\301\352\262\342\215C\201\277}\237\331<6h}\277\325\\?h\004\322\235\277\247W\226\350\177\341\224\277\364$\317\357\2757\216?&\237\263\276\360\030\275\2775\201\326\225S\001\252\277i\316\377/\024)\232?e\267\276\216s\240\207\277`.\352\230\230A\236?\212pb\353\231\336\260?=\020\262j\3253\216\277\225 l\335\363\007\260?l\246\307\352B]\222\2771 B\251R\321\261\277\305\377\205\221J{\250?\355=N&\272\352a?\227u\177\001\345\226\263\277\362\271\020Y\351J\251\277\344V\311\327\366\250\254?2F,1\356z\262?5o\332\212\235\246g?\037i5\301\007\272\261?=2\334g73\205?\007\207\331y\272e\256\277:zZ$lHp?\246\352\016R/\373\301\277#\3415\354v?\240?49)\343\020P\260?\t\2047\246#\204y?\324\327\221\242p!\203\277\177\371\337\251\227X\245?\356\204i\303V\305\267\277\367/gs\204J\240?\332\362\245P\227\223j?\033\265>1^\261]\277\325\226\305\371e\'\240?\035R\207\331\376R\233?\217N\257\027\327Q\267?l\213G%\002\256i\277!IA\211\025e\242?]\324\356.e\023\264\277\016=\016U\272\277\255\277\036\210\010\002L\361\262?o\037\252\276~\021\246?\220\207\260\000\343\373\223?X4\213\246>\312\231?\351\233k\216\2333\260?\360x\3050\236\354\250\277\302G\301u%J\236\277M\332E\203\264\030\300\277VM.\036u5\260\277\\\005\234Q\271\335\243?.#\273\353#\215\257?\350\314X\246\n\336\215?;\275\327\246\014\247\250\277Z\235\301ETB\267\277n\022\330\366\001}\265\277x\345\212\233\221\321\241\277B5h]\204!\250\277X\"\330\255\337\317\270\277J\356J\236[\032\260?o\030j\006Dm\262\277\213\0320\177\234\t\275\277\365\343\021S\243\031\241?Z\263!\363\241h\261?\366\2650\213\2243a\2775\254\010\204\332O\245?\000\214Qw\263n~\277o\227\367\231\231>\243\277\000\210\245\250\363b\216\277\333\273Q\013Bx\267?{2C]\207m[?}s\2376&R^?x}\250\2110\375~?\206\014\312\272\223\356\254?\343R\242\3213U`?\013\355\020\203?\tr\2777r\253\217\247E\222\277YB\236\020Z0\271\2774\355&\351\344?\206\277k\322\334Z\272%\267?\217\033\220c\342\323\244\2777\230\022[\315\333\277\277\346bZ\234\007\250\261?\316\367\345Y)0x\277\351\010\267Cz\247\204?\211\325J\207\232$\244\277\006T\276\300K\377\226\277u\3352\033OX9?\212\206\276\ri\331\263?B\271\353#\332s\261\277\223\226\241\025\347\302\245\277\244\301k\271\257\352\215\277\245U\325\2560\234\242?o\003\275\025\312\340\273?o$\271\216\235\234\274\277OQE\030\202\302\241\277\336\177\307\347[\217\300?\252up~!\240\253\277\264\037{\025\263\377\210?v\024\007\033Z\375t\277\022\024\226\r1\364\300\277\322\254\361\016\240\204\220?\275M\226g\316\031\264?\214\217\320\332\260\307\265\277\r?\241\337(\013\205\277\2254:\250\326)\254\277\222*\231;},\240\277i\277\341\020\326\255\276?p\372r\336\204\267\255\277/\235\276\315\203\236\263?\231\260L\363\265\207\302?\2046,\227\352i\202\277\244Ih\371\214\216\206?o]\362\336\177\017\253?\\u}\031\225\375\266\277pm\331\354\216\364\237?1\003X\227\235\271\234?\332\031\366g\345\035\231?\000N*\272\355\004\205?\310&\320\347\271\224\226\277\r\271\312\304\"^\240?\241]\035\331\216\300\247\2778`\234\001\351\245\240?.K:vF\251\222?\026\334\232\314^\237\242\277%\0031&q*\236\277\376\3650e\367\246\247?\224P\t]\346\340\227?\375\370\227\355\313\210\227\277\264\002\333J\205\343\207?AVL\006\016q\270?\250\030\264\210s~\263\277\311\020s(G\250\215?\245\337}B\371k\236?\020\271\340\2434\375\223\277\355\004\321\202\333\211\237?\267\020\236\223\230\245\230?\345x\331\255\272\252\265?\214?m\016\020)\260\277\212\330\n\357l\354z?\311\335\311\370a\341\241\277C\351\223\304x\304\220\277\211\"!\034\343\3367\277&\312\374\316\221F\202?\266\211rF\035\256\242?\337\307\020Bk\356\261\277\271\025\272\305\242\247\250\277\210\253\312\023f\235\214\277\263\3446z\202\267V\277;\3324\214\312\321\251\2772\nH\247\376#\217?\263&\036\303\237{\265?\314\371\231\021\'\353\246\277\204\033\027s\\~s?\252h\266\007)f\244?\306\211\344\257y%\251?\273O\202\242--\222?Z\272\273/\203(\242?%Hn>\200G\250?n\r\345]\\\327\303?\357\016\002\300)\000\212?75n\305n\376\242?w\taA<\023\251?uTco\243|\251?\303lb\274\274)\246\277\240b6&\206L\275?\247\"\014T\375\016\254?\2452t\000L\321\256?3\367Aw\025\373\262?K\210Enm\212\277?\227\236+Df6\244\2773x\217=d|\261\277\264\264&K9|\213\277\376\376\247\032\3217`?\275\316\031\034`\237\231\277\376\262\332\371\014\344\261?\275D0\357W\364\243?5\213\261H@7\262?\004V\222)\3452\254?\335\314\313\200;\341\261?\000\024?h9\341\233\277\226+\004s!M\224?_v\251\251\352\025\260\277y3\267\311;}\250?\370\014$\201\346\211\212\2778\362:\375\333e\240\277e\306,\322\3625\270?8\277\2164\276\245\236\277\301\322\325e\320\022\270?\357\367&\315\216e\265?<\005\025\201\262\2321\277\265\264\326G\024.\236\277\252\365\225\244}\353\260\277\255\246\355\"\350\213e?\037\306\356\230]\214\205?\301\277\016a@u\256?\341\305?v\353\006\235?\340\250\265\310N\320\250\277\332sn\325xV\236\277t\335\n^\007R\245\277\321\273\200=\243\336\254?\212\t\037};0\264\277\376\270\342x\274;\202?\331\247\363\301\261\013\223\277\272wZ\321\257.\206?C\272\177i\246\320\245\277\264\356\367L\312\326\270?\325\257i\367]\253\264\277k\004D\372\221{\300?\315\300>\231U3\262?\360\276\337\343Y\211\223?\2453z$)9\277\277X\023\203\n?\036\225?\305q\2158\000\340\261\277\301/;\377,V\254\277R\300\'\016\214\021\270?\366b\210d\260\271{?\276\303\372A;\352\225\277\313\234\n\311\206;\201?\245\327\243P\2245)\277\r\301\027bvy\255\277}\241\372\223\272\331\262\277?\240\224*\373\256\262\277\316~\214\030\201\016\306\277s\332x\036\001\263\224?\017iW\211\337\252\206\277\007\370\364\327\222\216\226?\017\357\207\326\372}\253?\205\023P\215K3\271\277\231\016]\030\310\370\263?\032\252L\0161\204\231?\2214\211\020|=\264\277\205;F\336(\374\205?0\335\222w\376h\261\277\350XP\256\315\222\265?\335\245\312J\010\006\207\277?\244k~\316$v?k\223\317w\324\271\247?\230\217\307\236\242\322\242\277=\351\036\202ji\270\277\335\353fE6\250\221\277\317}\363I\021\221\267\277\260ivwu\212\250?\016\346\244\013\023\324\226\277\242\257\025\024\225\252\222?.\321B\237\273x\217\277F\026\346b\030\205\253\277\360\016&\345\240D\212\277\356\212w\307\322\260\227\277_\373\006\ts\346\220?\333(\215g\363\023\247?\026n\202\2637,\276\277\036N~\016\340\320\207?\204Stb?a\202\277\"\322=8\233a\246\277!\302\0225\361\033\204\277@\345/\370\026\005\220?\201\263\206\016\2568\256?.b\250\216\275\355u\277\002\364P`\353\313l?3o,\261\004\003q?\223\243hl\327^\236\277\017\225tm\361\345\221?\315\343G\000\330\327\200\277\026C\360\321\272\021\257\277\272\273\327\351\335t\227?T\262\253\356\303\037\255\277\216\301\2625\363\332\216\277]\324\344)\362~\262?\021\253\325\253\032\254\267?\346\351\344\336\r\326\250?\327\2703Br\214\200\277\027r\253\277\031>\220\277\331ya^{\r\242\277g\253#\223\273\205\236?\376\373T*\304\n\262?\334An\037\335\327\273?S\216\031\255\'y\277\277\003\235Y%\002\354\243\277\230G\214\350\326\005\261\277\376`~\277{\220\204?Vc\023\251\304\026\225\277]\352\233<\364\022\247?5I\016\0013\371\260?\010\023\224\377\337\354\240?|k\320E2\007\275?\335Z\333Ga=\233?\363\006\362U)7\254\277\231\r~!g,\243\277\"\353\347\314\243\271\220?\030\226\340\206}3\253?C\027\372g\201\234\260\277\364\252H\277\030e\241\277\036\206T\014\331f_?3,\205\373\000\213\256\277\331\234\231\225\007\363\245\277,h\324D\251d\255?\265X\301\214\005(\231\277j\362\246\220!\230\260\277+\377X\376~\307\233?Sm\304\313\031\021\252?fk\212<\322\'\255?\352\326\335e\2309\231\277\347\\\240\371\0035s?\332\036\020\366\251\200t\277x1\233Dq\003\275\277+\336\215s\2637\271?f\236\324x\300-\211\277\360\323\352\013\202\312\212?$j\014\237\237f\264\277|\351\t-g\306\222\277\332\322\007\246\343\224\252?8w\333\233$b\261?\026W\001\220M\333\252\277\024H\365\206\316W\257\277\200\267\231\351\007\365\300?\341\257\256\224L\t\212\277o\204\312\353\265~\204?\220js;\177\363~\277\201\240o\217\215\332\226?WBc3\025=t?\253\347\242\374\205:\276\277/\013\333\365Y\220\200?\304zi7D\241\177?x\207\275\231\013\324\241?\273tJl\325\033\201?@\300\243>\366\372\261\277\3323\341\226\243k\257\277\320\334gp\371[\255?Y%l\351\363\325\234?\337nI>\022\370|?\217M\303\372p\004u?A?\305K\023s\234\277wD\010\005\324\223\302?\357\313\tr\334n\264\277\226\014\200u\030|p\277I\345\327\372!:\242?\210Z9^\345\350\206?L\310L\227{-\256?\326(\301\034\212\375q\277\216\303\206q\037\300\261?\\\255\221zm\336\260?2[\210\244&\352\235\277\251\321=-\014\014\220\277|\211v\"\246x\207\277\020\323xU,\213~?\322\3278i\336w\241\2775\r\t\300&LP\277\nf\016\363$r\270\277\335\223\230\3046K\257\277\312\025C\275\317\261\223?\204]L:\177A\212?\361**$\273\252\261?\242\232U\262h$\251?\221\332\232E\235^\255?v2%\377m/\211\277E\311\035\021\020\363\225\277b\036\032o\252\240\252?\305\365;\2241T\241\277U\034\037B\263l\237\277@\001\376\240\250H\300\277\222x\200\267C\304\271?aL\210\033\331\351\221\277@o\346T\212\201\235\277\271\325\340/v\317\253?\346\353\267\302\004Y\230\277\204a\376H\335(\264?1\235\250\343Li\271?y\214\226;\320\223\225?\177\005]\273\213\263\233?\244\245]]j\314\270?\027\365Y\377\3008]?\247\342\231\222\250e\260\277\367\025\337a\216\010\231\277\362\364\370\343\270I\221?1l\252\2371\315\266\2772?\256\366\036\021\240\2777;\257\3174[\263\277>\005\014n\217,\241\277:0\306\244\030]\225?w\215!\224\351(\253\277J\347\224\031\223~\251?\364\357\331A.]\242\277R\356\211\021r)~?\362\243\0365\372\027\260?0*\003Y\361+\226?4]\0011\037\273\230?\226\374\243\300u\241\263\277\033\'j\322v\252\256\277m\236\337\356\'O\273?\264\225\275\002\367{\233?\365\273]\376\367k\241\277\016H\301q\363\035\261?{\357\373J\201\315\220\277ZB\267\362\376\031\267?\3647\304\317\246\266\252?\330\270\355\301\n\305\227?\315\024\212P\251n\224\277%\340cu\271\375>?\310)\037z\323\251\301\277\n9\370\310\262Oz?\024?._| \263\277\351[\363G[\271\231\277\320\241\302\353\017^\221?9\373>s\321\212\264\277\246\0351\241\321\237\275?\210\351\202V\\\360\242\277e\346\373\262\260\216=?\350\017\373\217:\243\252\277\026\321\270\3722\330\220\277t\370\277yV`\260?\226\000\306)_L\215?C\370G\221\244w\245?\034\207\311G[\305\252?\350i\235\020\347\227\243\277\023\251\000\227y\215\241?~\374q\ru_\222?\205\251\260\356~7u?C\231PI\267<\276?\231\036d\242\271\302\243\277\024\304\321s\272\033\276\277b ~\205\014\315\261?8\264\353Q\004u|\277\342b\324Zm\016\243\277\260\014]4\t\341\204\277\326RHJ\340z\256\277h\235Wt\357\213\203\277FD\336\347\251]X\277\004m\3671\260\022\240?\314\314\324=w\036\261\277\3672\360L\277\202\273?\335\344\251)\021\304\242\277\266+\217\2466$\214?!\254\036\311\341\001D?\3137\340}\371\020\255?@\0340\355\3367\225\277R\375d\272\'t\241\277\023yD\304\231\305\200\277\304\027;\311\010\323x?H\276#\250\021 \247?&\224lH\355\233\202?|\034\257\260gg\247?\034\356\230\006\2145t\277%\321\205B\373(X?\225\362\210\n\305\250x\277\036\344\203\250\010\234\246?T\002H\302\374\004\233\277d\301WM\343\235\264\277\314\276\031\212E\271\237?\033ao\272A3E?\377$\274\025TI\251?\025v\311\004c\252|\277\335\201\206\020W\346\214?Y\352B0\371IV?\215\361\361\200;\226\262?\3437a8\224\305\232\277\022\334\034\362\032h\252\277\020w\212b\231\322\216?\344\004tT\333\237l\277\035\210:\367WQ\253\277\331\010\251\323\206>\203?\364\023\0170\300\205x\277\324\323\372n,;\246?v\250\266\372\235m\270?\000\271\033\266\315,\234?\000\212\244\371D)\262?\255\225;a;\216\255?\210\350\314\320\321\232}\277Vf\177\371\322@\257\277\330}N0\007\240\260\277\266\275\362q>\324\264\277\0149\364m\371%\235\277\216\357\252z\231\367\223\277^s\344&e\2170?E\225O\022z\203\277?\262c\364\272:\265\251?\245\323l\345sc\215?\245\306c\365\324t\272?\307\314\205\234f\355\260\277t\266\314\033\310\353\225\277\256\205\327J\360\254\223\27789N\266\336\001\272?\367\202X9\037\010\245\277v\274p \037\373u?Y\367\035X\247\237\204?\001\tb\001va\201\277&\361\254H\003j\256\277\231\n\307LA\031\233\277\200Q\275\304\262$\257\277\327\214\217\215d\"\234?\333qz\t\314\177\254\277\300\341Y M\023\241?\205n\027EFa\234\277\211\331\211G+&\264?\220\303\231\005\030\310\214?\277\232\215{\326\004\250\277\275\004l-\2070\227?j\221\030\257C\343\300\277\337\235{+\247$\240\277\315mf\312|d\242\277\320\210\224\331\363\013\277?v\334\255Ak\255\234\277P\366\221\001\005\010\230?Q\2313\247z6q\277v\021\264\257\350\230\261\277b~7\243\014\207\243\277\024h\366\307(\237\250?JRu\211\021\007~?`Cc.\257\322\246?\344\214\231\260Q\225\244\277jMB\373n\037\200\2779\321\362*\027\'\234?\233V\326]\000\314\261?\303o)\233\250b\240?\255\035\244Kcm\263?#\211\340\367\346vZ?#9$\371\242\254\262?\341\010\370:\331r\246?\322\373&\333\252U\246?[\262\261\333\0212\216\277\374\025\267<>5\240?\265\376\204>o\033\237?GT\\\013\375\214\267\277\344b\0257\330,\256?\276a\312\276 5e\277y\263^P\2302\265\277<a?\241\242\335\256\277\314\354v\342\373\312\274\277\'uT\350\\\014\235\277\205\274\022\001\203\307\256?<\251<\215\210\223\241?^9tB\214\013\244?@\354~\207\207\013q?37\r\353\213\346s?\336<n\212V\262\266?)\202\355\241\\\215\225\277B\212\223\357\211j\250?\375i\0312\344{\221\277*\320\243\014\371vt\277\257LGR\370\304\227?<vO8\317\236\216?\313?\275\334s\035\257?\273\300^\254\245\354~\277\251a\307\035\2041\255?T/#\353!\344t?\203\017\346\307OZ\242?\275V\346NQm\232\277\350R\332/vT\230?w\273\205f\357?\210\277\252\347\361km\256\263\277\246%\373&\371Ab\277\004\335\014\263\177\333\243?\231`L\331\r\036t\277\375\310\023\304\326\034\261?\204\214\017\372\355|\241\277\233\277\326\021J\261\256?w\317;\nG\334\234?\371\275\221\332}?\271\277\377h:\247\336]\301?\226DS\234^/\242?\331\246$\251\326H\262\277\253&5f\366\220\271\277Fjd\226D\247\262\277\3155B\r\316\245\256?\316-\246\356L\237\205?\256\335G\036\\\310\243?\367\216uw\217\320\234?`NB)j\263\277\277\351\226{_\306\210\227?\350Y\2769Y8\215?\242\304g6\210n\251\277\203\007\017\377iT\273\277\243\207\210\006\025}z?\377\326\205I\313\010\264\277\227N\324J\214\206\225?\273\313\036:\202)q\277\367\340\260u\371\032\254\277\036t\262\217\266\375\223?\354\211?\334\212m\272\277\005\003\242\033\353?\260\277\375G\230\323\373\023\244\277\035\253a5\322\305\260?J\330.\251\235r\257?\335Rm\317n\207\261?\214\257\2157\301\373\257?\334\362\350g\006\312\267\277Y\3355+R\224\203\277\253\234\217Sh\365\250?3q\3517\1777\233\277\220_\272\230\255s\233\277\211/\214\332\234!W?\332q\316\256\2674\252\277\034u_\267e2[\277\232t8(\302\000\245?\334m\234\365\001\022\211\277\377\200\271\223\327\036\250\277\031\341\260\234\205:\257?:\276\371\224{\212\201?\364\315\251\374\236\261\227?xu\235Y\332\207\241?\360\353\324\'\027^\242?\247[\333\313\363\305\230\277\373%\305\272\307\037\263\277\220\351\216-i\256\221\277\335\212\203\347a=\241?\001\333\276x\002B\262?2\204_\245\376\317\241?\314\345\016\033\303\315\200?\032\010\234#!\204\244?$#\335!\215\267\207\277\027\271\236\262\331q\261?!\330JI\332\203\220?\324\225\217\224\250Vc?\322uM\320\326\250\271?\374\216b\217\256\270\242\277\t\243\376O#+\251\277\345\023\244\324\353\026f\277\302\3623s\021\252\226\277\351\234VsX\357\267\277z)+\006\254\332p\277\301\277%\324$\003\231?\271\361,\001AZ\261\277\021aA\224\023I\262\277H\204\244m\335\347\213\277\006\303\363\013\372W6?\023\304@k5\217\264?\347\321uTE\240\200?\332\317\343\250y\224\232?\336N\023\026\351\354\243?\243a? \025\n\267?\236\365\020\374\237\244\224?f\230>$\210p\243?\304\206\031dG\264\256\277\211A\277\025`C@?\032M<\335\231_\251\277\302YH@\217\257\270?\333x\2136\374q\264\277\262g\315\013G\360\265\277Z\247-Z\001\007\230\277 \302s\273N\206\260?\3557\376\326\032\022\264?9\221\330\300\324\305v\277\276\020j\"\252\006\231?M\261\3401>\264{?\336A\265?M@\231?\227\332\006#]z\246\27756\210y\023\327\255\277\214l\037\n\310R\266?L\201\257H`n\242\277ROjw\337\360\217?\354\226y\201E&\220\277\364W\345\303D\270k?8\345jz\020\211\200\277/\026R\303\216p\271?\274`\254\327_l\204?\035\327\244\261\225\343\206\277Na$\272U\000\200\277\\n\017&\r\272\245\277d\027}\257G\340\207?\022G\307\221`\025\260\277c\277)\"\266\017\263\277T\265\331\202\302#\240\277&\332\342\362\327\316\241\277>\010\252\370o\320\301\277\313\003\310e\331\347\264\2771\277\307\023\221m\213?\277\226\207^\322\361\260?G\272nZwPM\277\264\276i(\243\003\213?\302Xd\301\017\033\256\277\020\034d\355h\316\264\277Pe\245:\3604\300?\2529hTp\232\226\277\302\361-\020\357\377\r\277p\266\203\3531\277\244\277\203g\024>Z@\240?k\013kg\350C\272\277&L\267/\353\006\257\277\217w\242p\0138\234\277\177\313\326\036\350`\274?\0137\036E%\204\265\277.\256\034\356}\216\222?\312\210\240\230w\274t?\315\353\302\335\\\251\240?\367\203\277\360q\250\261? C\222\340\302jy\277\260;\233\361~q\250?0\242\007\342\226s\244\277\323s\344\233\036b\206\277\225\373\265\356Z\213c\277+\213\304\313\007n\244\277\037\224\177;x\243\263?\332\265s\002\022H\233\277\203\217\336\036^\200\264?N.cewW\205\277}Zq\'P\002\257\277\0010\006L\017\224\220\277Eb*!\'\266\236\277\344\026-#!\030\276\277\nv{G\005s\253?\022\01026l5\302?\322\354A\235#\001\233?\t\363J\301\023\324F?\252l\315\333Sp\264?\242A\264\201\201\271\275\277\251\362\376\223\233O\223\277\341\232\3441\227\210\243?P;\204\321\250\016\260?\317\310\247\324\372\n\266\277\025im\037E\037\247\277\367\r\0264n\224\210\277\325\024\234~\017b\245\277\3770\216\210x\371\236?\322\235*\222\031Z\255?\352\366\215*\323\000\204\277\246>#\001\211\"\245\277\356\206[\223\250\260\260\277RP\266>$\230\236?\226\200\014\244\326)\261\277x\323%K\372~\245?\203\3121\020(\242\242\277\271\355\273\375Y\313\253\277K\325\253!8\265s?N\004\327\202\347?\241\277\253-\217t\363\377\221?)\337\277\032\200\231\261?T\371\003\002>G\277\277\364h\245\234U\331\263?\022\202\033\225v<\245?\352\246(\2258&\246\277D\274\322I\010\257a?\300\304\217\354\037\372\243?A\243\373\202S\376\201?\265+\311\256\376\361\201\277\220:\256g\036N\216\277JI\014\013y\364\250?\303k\363\250\216?\203\277S\035\271m\002\036\203\277E\306\025\022(\007\240?\220<\037\240\257\311\234?\323\331l\333\n\034\221\277\240JQ~\306\347\244\277\264\324\241(\257\351^\277\004\001\326\177\226\314\247\277E\356\316\363\027\217\272\277\374T\230kt\026\243?\275u>\263`6\217\277\361#f\360h(\224?\364\370bh\362\257\242\277C\035\315\037\2609r?N\242S\223\236v\241\277M\217\255\262D\312\232\277\352w\332Iqg\203?9\014\210)\345\200\210?&\307\337o4\022E\277\253 G\000\320\231\201?\005<%E\356\315\211\277\347\021h\000#\004\250\277\344\033\320\3425\203\243\277\242<5\323\003\272\264?\242\377\rNF\010\257\277\276.j~t!K?\003\276l\335+\322\253\277\365\200nS-l\252\277I\220E\275f<Z?>\223\332\276\376\347\232?{\225,\350h\236\303?#\323\260s\354\376\222\277\213\027\301V=\240\270?$\245jD\344\247\261?\246\005c\214\212\203\240?\324\207\205\257\2234a?\275\333\027m: \263?\250\240\220\310\361\324\241\277\364i>dSC\245\277\335D\343\346\336/\245\277j\260\332~\027\362\211\277\003\035\302\364\022\227\240\277\274\313\333\253\312\351\210?\003\227I\263\3715\216?\344\335\353\304\365\014\213?\367\275x\340\020\177\206\277\212_/\335\272\353\257?\360\345\2637\212p\261\277j\307\n\027\334d\220\277^$5\314\345`\212\277\2574\341N\305\337\214?(\320\0169G\222\255\277Z\237\266\025^$\236?FU\271U\021\312\266\277\361H|j\306\241\202?\334\022\213q\343<\267?\010\202}\250\031\235\250?\177Ct\036P\003\236\277L\240\334\265e\016\275\277\371\r\260\317\216$Z\277\202\3423X\234\321\233\277\231\213d\2100\010\204?\336\243\366 T\250\216\277\221E\242\234\321\rb?\205\006\266*\275\321\205?LQ\314\'0\212\301\277\267e\341\021\306\307\300\277s\010Nh\362\002\210\277\216Zgu\036\265\221\277\007\301q\3043\017\247?\2234SX}`\270\2773U\374\227\331\3175\277\333\254\031\351\246\242\235\277\234?5067m?a3\3665;q\257\277)\027]1\340\273\247\277\007\035\0277\010\323\266?\276A\243\357\362\203\264\277\333&\330\345\314l\234?m\346\2351s\002\267?\217H\3418\376\342\224\277\277Z\033\357 \323\202\277\260b\014\205\000V9\277\324\036\206,\016\217\250\277)1\357 \210\231\246\277B\225\034H\346\203\245?\371\215\323p\277\r\267?\201:`\231N\222\224?h_\220\024\'\\\201\277\217Zr\276\334;\242\277\301\222\326g\323\310\246\2774<Km[p\226?BL\3605\217?\250?\315\353\246\037rJ\260?\020E\254 C\214\252\277n\366C(\274)\251?GP,6\266^\246?A\020\"Q\350\336\237\277\267lCB\004\327\237\277&\207$R\376dN?}i\231\177u\372\236\277\332\322\237\365\311\354\213\277\327!\364sU\303\231\277\250@H:\233\346\266?20{*\222\223{?\311g\356\272\270#\255?\223#\370:\327\210\261?\024}\301\227\252\372\245?\225\212\271\177\250V\222?\"S\340\221\'.q?dt\031\033*\235\227\277\236\363\330\331\227\255\236?C\363\234X{\357f?\241\317\212\225V\003\274\277\250\270H]\340m\276\277\305\n\312\247l\002\267\277#\027,\324\332\251\202\277\340\227\002!91\244\2773\032\321\261p\252\265\277\275[r6\027|\217?sG\300^\217\203\263?\010\371\245>g \237\277w\367\240{\315d\243?\215{\267C\313Y\212\277c\t\030\263?\372\264?n\277=\366\232g\242?\201\242\354\241W\375\274?\236\020a(*\340\245?a\222\306\371F\377\235\277\023)\375\024K\253\266\277\337\226>\340Y\277\247\277\203#\310\337\013C\227?B\370\023\202}k\254?CO6]\3432\226?6m\351\220W\341\271?\301:\036\353\216\337\203?\267\325\374\232A\355\261?\020H\237\226\326\360\245\277\266\25362\201\374\251?,g\007\177E%\265?\275\013\3202\217\331\204\277S\004\306\264\205\331\245?(9\211\317*\237\233\277e>\374C\331\224q?\222\266\2657x\363\243\277\014\\\216\3453\357\251\277\0340\014\247\016T\262?9\2072\275\177_\216?%E\347q9\303*?\0068\330\2032\366\243\277\021 r\274^\255\263?\3779\353io \233\277\355\324\203\353\304\364\243?\337\256\245\002P\030\243\277\022\010\205\002s\024Z?\257JTY9\005\222?\224\0069\2627C\221?\325+#\234\315\251p?3\306\016\177\262\305\261\277b\313qb\210i\261?\271\227\373\r\014\327\244?\365\204*^\000\r\275\27771,\335\317\034\240?o\n\340\225!\353\244\277\344r\215\261R\317p\277\251\\l\356\305:\233?\017\313\203\232\326\035\236\277c@\335\371\024\204\260\277\177\3704\003\337\300\261?\311\004;\324\013\321\240\277\264%\267V!\255\255\277vR\242\201@d\255\277\263\017j\367\025\351\256\277`6\364#\243\200\241?E\305\004\336u\017\271\277)Z\315\275\324\320\215\277$E\266c\021\240\263?={zZ\231F\240?\245\357\323\207w\014\234\277VU\351p\r\030\216?\374\344o\345q\241\300\277I\rf\035\003_\266\277\357*\357&_\035\245?\222u\013\341\\\340\216?9\273\242\221\317\361\221\277\232(\0222\373\355\263?\372U\246^f\'\260\277m\232\033\205\306.\262\277Bp\026SU\030\241\277$\2277\333\213\232\243?\220\341\246Z\2624\254\277E\241\214\001\006C\255?\n\275rw*k\245\277\275\224:\t\355\364\267?\336S\241\346^\032\301\277,\363\202U~;\264\277\001\3028\335j\303\265?\242\243/\032\010\354\221\277\2274\200\242&\023b?\252`\201\021O\t\224\277\037\035\t\366b\006\264?s\2263\340\224\344\\\277g\030\032\217|\036\241?\351\"\224F\2770\241\277\371\240L\327z\216\263?7]\261\270W\216\241\277\352\021\330L\232J\222?\331\332\241Km\245\262?M]\367\365oJ\274\277\235\370=@E\374t\277\217\230\362p\"l\262?@\r\036\213\272[\261?\326\212\276{\202W\256\277WG\274T\303\257\226?\237\013\003\206&\206\265? \023\226\237\010$\210?Kz\370\347\023,\252?\224\236(\337\024\200\232?\017y!1K\360\223?\211T\240=8C`\277\353JTm8ij?\354\325\232\260eo\224?\221_N\354\267\340\261\277rc\014\275\342\201\251?\023d\005\267\205\364\255\277~:\002\017\035\002\223?-=_\232Q}\300\277\334\377\337\327\364\211\224\277\251\217\374\352\211q\224\277\340\205\324\246\"\024\261?\214\240\221\242+8\253?\311#\242-3\317\177?\263\211\377\207\261\262\225?\220\240k\322>\r\276\277z\332\344\236\010\031c\277\244\315\340O*\355\250?xCS\276\307\210\235?\002\247\377zoj\245\277\302\026\355M\257\212\220\2776\274\2232\306\004\240?\357d\374W/\rQ?%W\216&\365k\241?\322\315\221/\213\340\260?e\265\335\306\337\201\223\277\202\206\277\253!p\263?\374\007\022ioK\227\277T\027\"m\362\\q?\355\000U\035\374 \223\2772\205ssC\321\254??\004\023$\264\324\212?\2127\273\013#\364\272?\014\326n\034\023t\242\277\233\277\360\027\010\317\262\277\022}Co\240\033\301?\246a\351j\253\274\177?\276\323zp\325\024\222?\275Z\355oef\250\277\311L\224,\340\313u\277\200\010\216\365\0246\264?L!\315,\232\351\223?Y\256\324\271\035\327\241?\344\254\366\300\357;\205?\237\204\030\321\225\"\270?0\231\003m\010\271\220\2771\370\237*oK\213\2779\005\021V\343\333\301?\250\026\242\022~\023\217?\3465=\345\316\212\230\277\336\221\362\344\n\265\201?\330+\317\206\340\357Y?b\344\270\360\274\370\242\277Ce\205\277\220\257\202\277\350C\340\227i\n\210\277\260\230d\210\343\222\250?l\332ME\375\370\231\277\335A7\300b\315\267?\336`*\001\035O\227\277\327\350\344T7\037\255\277L\202\264\342\276\206P?V\204\3723\373\n[?\233\264\246+)\321\220\277V1\243\351\033\260\262?%\276Z\215~>t?\254\206\375\252S#q\277\206w[f\330\027\247?;,z\031\332\307\264\277_\270\347\301\210Q\250\277}\235\035\310\007)\203? \005d.\200G\250\277\030\202\231#W\245\262?@\365\344\351M\375\203\277\261\307\256\331\237\340h?a\234\255\257\204N\244?\220\260\361\324a\242\250?F\300Z\265\372-\263?\265\3567\005\010\224\263\277e\360\365Z\231L\256\277\352\000\303\305\'\340\240\277\361\014\035*\223\201\227?\356\226\267\013+\'\211?\344\347c\000\026\233\226\2773\276\006]\244\273\251\277\027\250\373\326\210\244\263\277(\217i\033\224,\253?\216\306\317\331r\034\221?T\277\230^\331\033\265\277Le\327\201i\240\250\277G<I\025\274\037\267?F\250m;7\362\216?\032%/=\240\"\301\277f\3205qBM\240\277\337\377\211\330\363\225\230?\2318i\275\036\277\266\277\302O3\342E>\253?b\313\002\n\326\242\254\277 H\362\314\226\226\270\277\360\2573\355\230\230T\277\335\324:\257P\034f?\250\256\261)\371\017P\277\324\353\021\036\242\236\264\277%\312\214\241Z\344\214?V\201\337Z\366\220\263\277\014\351c\201\2039\232?\021)[\243\261\212\270?\312\312Y\366{\006\242\277\307\000\276^\207\246X?\272\212\343K\271H\226?\317\020gQh\006\264?\262\370\n`\235W\246\277\306\215\272\202\004\351\242?\232\263vI\365]x\277G\233.\001JP\267\277\006\353\222San}?\024\'\227\361\277\337\264?\351%[IW\221\260\277\271\363\345\274\216\325\264?\357\265\216\000$\211\262\277\330\"(\202\013^\261\277)$)\371\303-\206\277\314\013\204\346O\250\205\277\300\020^u\0317\263?\346\020\242\320\262\376\255?r\275\366\000X\301\271?`\317Mw2\211\240?\312\267\237C\354\033A?ZJC\264\226p\262?H\'Jd\353jy\277\271$l\220\307\207\252?\315\254(a\360\035\245?\234\325/\253\347\212\261\277\233\322v\326\3337j?\003\231(\207\202\022\242?\'\346}\347\'\216\260?\310\226\313$\341\221\265\277\254\263 eD\006`?)\000\267\036)\302\263?\346\372\010q\217\277\211?\245b\016H\026\304\232?\272\230\205\232\237\004\300\277\3422Q67Y\224\277\241\213$!\005\354\261?\261\002\001g/\033p?\331\217\212\324\'A\222\277\021\275\323\346e\373\272\277\002\312\336R\340\256\210?\003\322\235\325\201k\266?\030\261N\017\375\034\205?,\253\271{\377\022\244?\3761\233\364\003n\206?\357\004K\322\000\201\247?\314L\214\3216\t\242?\373\263#$I,\273?\206\206\275\036\035\263\257\277<\013tv\021h\213\277\364.\022|\0350\244\277\374\'3\002\224\343\265?\204\020\227\332$\256{?W\323\322\n\272\237\216?\361\200\331\260\201\246\272\277q\342\257\n\032$\217\277\356\014X\341\001\371\263?x\t\223\212/\020\260?\343\003N\220\032\024\246?V\030\321\235\371\301\272?\301\231\035\266p\217\230\277\301\204\213\373\376J\243?q\037\234\364\350\254\265\277\005\n\253\004?g\261?\311\353\017n\305(\250?B\317Z1\3606\302? OI\253.=\222\277<\221\313e\251-\263\277&m@\251#\211\235?+^c=\rp\222?\377\326\351\001\021\364\225?\314\363\321=\177Em?\021\371\260\006\244\315\243\277\036\016\036n\257\313\252\277\224\314\257+\376~\264\277\033\351\344\\\r\254\251?\347\253Id@*\257?<H5\311\272\260\262\277\213\347\2576\247\243\202?\370`\207\205\206z\246?5/\014xby\262?Z\177\2451,\236\251?!\375 \263K[\233?KbS4\275C\264\277w\312\215\002\344\205\224\277x2\217\3746\344\263?\025\236\023\277n\342\254?:\026h\267\262p\233\277I\313\201E:\273\225?\361}O\236\324u\254\277zf\006\267:J\277?\272jd\033(\373\213\277V\365s\244\034T\244\277\351IzR.Q\250?o\322O\035\212q\276?\251!!{\017}\202\277\356\357\251\310\244\267\241?\236\347\257\337\030bK?m\273\003H\307t\302\277\317\336h\243j\004u\277n\227\002L,b\232?\236u\321\276\206\014\232?\351\347\3624.t\277\277T}C\001\203\241\230?\335\264\240\231\211\021\271?g\037>\324\234{\241?\332n\002GH)_?\254xb`wG\244?>D\256}\300\033\241\277G!`b\233\357u?\2727\010\021\020I\246?\243\357\036G\377\005h?A\341\263\360\365\244\247?2\255\034\2009\003\203\277T\037\3448Tq~?\024\250\271\215>)\214\277\234\2151T\262r\220\277\200\243\020\235xx\220?:}\270\275\000\360u?\242S\312\373\273\255\252?\305G<\335>\307\241?\345\013\332\371\323\303\257?\222\331\272,nH\254?\331\223\316J\215\232\240\277K\005\310\006\020Y\253\277%y.\235U\267\256?Y\177\031\257\363d\272\277\373\216\264\367\365>\223?`\246\251\037\324*\251\277\3140\037\013\3578\216\277w\032\361Pe\274\224?\002\'\366\340i\300\201\277!\276P\242\362\225\244?0X:\345\032\220\234?5\317\026\300\330B\200\277?\313\017\323\"V\260\277e\3351\005\331\243\300\277Pv\267X\0228\255?\013\350]\212\266\306\215\277\027M\262\'cs\277?\335\206\326+-Y\230\277\034X1\317(g\263\277\355\216\361\202$:\223?t\313\004\325\275:\245?u@\347\240=\317\265?r\035\234\265\366\343\216\277\204\350\'\311\270_8\277\256\024&\305J\251\230\277\032|\016\2314t\260?\253\302#l\030\333\257\277\0305\347p\361O\261\277\034\205d\300\221>\252?\227H|\302\204\363\221\277\252e\310\205\242u\246\277\322\337\315)\357\365\227\277!t\224x\177!h\277<\336a\3514@\212\277\016\306\271!\234\275\270?\321&h(\336]\256?\322I \\\305\204\260\277\210$\r\377^\372{\277R4\033j\374<\244\277O\r\215\322<d\207\277\033`sH$w\235?W\200\331\222;\212\247?\\\001J\364\302r\206?\256\313q\277\320\362\230\277\001\351\267\223\306\222\250?9\240\264\014\331$\255\277\0165\273\241\305\224\272\277=HOx\262h\274\277b3K\016\002Q\260?W\002W\2747\216\254\277W\027\032\"\271\322\260\277\315\n\364\363\263\227\311?\371\304\'\362\020\226\217\277\220\334\"\347\252y\245\277\260\035\315A\214a\241?+\314\262\377\330\345\225\277O=\271s#ut?u\337\315qlo\242\2779I\223\262`\332\225\277\"\320\250\263\017|\262?\223\005\354`Uf\265?\350\376o\316\361\010\202\277\221H\312u\024\332w\277x?\2645\346\016\234\277\031\214&\306\220\034\254\277\252jr\257p^\242?\223Fp;\346\256\244\277L%V\331m\274\263\277\020%\017\363\260[P?S\322-\223\r\"\225\277Z\373\227P\033\227\260\277T\034\363Y\270\333\267?\000\267\355\357\347\233\240\277\020=\372\256\024m\223\277Z\333\002\236\247/\255?\002\332\234A\274\332\213?\335\357t7\225[\272?z\330-\'\215\221\224\277\370\t\223\270&\354\260\277\254\242(\304k\030a?\356\357x\251B\006\260\277\010H!\306os\260\277\311%\t\266\265\321v\277X5\253\017t\272\222?\206RG\034g\\v\277\232\203\356\374\233\261\243?M!\273\020\2035\226\277\323\275\314\372\304\010\246\277\302\207W\316o\235\235?:\233\345\323\007\240\255\277\352,e\t\324Z\244\277\233z$.$:[?s\217\324\264\354\034\204?3\252\271Ja>\266\277\326\372X\271\341H\205?\366\221\324\177\367\332\264?\306 \207\256\264t\246?\004\337\263\177*\324\271\277P\267oQ+f\242\277\000M6\276\273\032\250\277P$fK\260\t\225\277\202\t\'\033\204\n\253\277\260\361[\203\320g\237?\243K\030\222bN\235?_vllT{z\277w\026\313\337J}\221?z\n\205\322\236s_?\t\203;*\237\'\244\277\n$\353GE\r\227?\324{\'\021\305w\217\277\215\243\262O0\351\234\277\3314\275\310I;\261\277\220\2076H\246\320s?%\312\212\004\\\222\263\277\330\312?G\357\302\266\277\227=\026<3\313\255\277f\333\300\311\200\335\261\277\362r\203(r\320\202?\227L\031wM\204\264?6\343\310&\023\022\244\277%/\334)\310b\245?\r\312\326?xl\300?\233\261\n\3150\232\252\277\212Z\2479\241j\256?\215\031.\200\315\325\215?\247\234\003>\303(\221\277\212e\257V\224\311S\277x-3\345\021\343\242\277z\251*Q\220\346\215?\n\235\302\312AC\263\277\341\250\245\213\233\'\277\2777\016\321\236K\212\231?\265\305\245\230{\244\266\277\200\331\\9Rj\250\277\014\266\257B\315%\250\277\310\331\215\342\260\004\254\2778A\221\336\n\374\257?\322\336\211X\341\254\231\277\363dO\263N\276\220?Y\342R\252PH\237?\3424\342>\\\013\270\277\004\314\310fx&\246?\230&\256\010[\222\256\277\364>\223\276\237\271\224?\367\343<\363\277\006\312?\026a\233\032_f\250\277\020\271\222\344\315\023\201?\2156\263\270X]\246\277\022\355r\342\371\331\227?\211\037\0136\301\216l?\t\232\007\346\371\033\240?s\340\0217\001\037\230?\022\005\273\204\202\222V?\007|\245\263\005z\255\277\0177g5Q\242\261\2778\304\000\350N\270\246?:\343g\331\2678\243\277M\242L\275\361\321\227\277\337\006xz\206\177\227\277Z\245\016\306\265\352\206?k\344v%M(\251\277\275/ \360\224\240\204?\257\337L\371\272p\232\277\344\200\235\235\0359\264?\2342\372w\217`\267?3!\241\367\022N\222?\303\362\322\t\"1\264?[\276\267Yt\256\223?\'\372\262\357=8\223?\0277\177k[\365\233?\221\322\325%\336h\300?\216\223\tc%\353\252\277\312\\\026\332~\020\267\277t\353m\010B\274\202?\036f\034\240\204\027\262?\302\313oJ\244\223\244\277\235toi\211`\261?{\031\0067Hg\262\277\017\363\006\242eJ\311?\250\260\005l\034\021\273?\025\271\365/\301\306\260?V\253\315\033\313Q\245?\307\266\000X\272\303\264\277\210\275u4\350\357\244?Hl\313\342\307\254\262?\257Y\331\307\022~\233\277\002\034\265\t\322\010\245\277Ib\005\247+\020\265\277\251\225\330\024\244\241\247\277\374\353\0051om~?\344$\010\364\263I\242?\'8\215`\233\257\265\277y\205\347\224\020\247\214\277\213LC\026\363\356\261?\017\267\005\217y\236\237?s\255X\374\220(\245?\376\311(\356e\246\222\277\271\226\246\020\030\304\245?1/\347\363)\004\245\277t\307\222eX\210\247?}%\177\336\255`\247\277j\373\241\034(\330j?\233\345\002\033\342{\261?f\225G\327\252\366\233\277a\203\321\247^A\242?H\345\002/\272\330\254\277C\330W\351\260\014s?O}\244(og\252\277\021\'\267fW\031\266\277\313\216+K^\217\270?\244\244iU\242\240\241?E\016\333\251\014\017\242\277\017\222\352\221:\261\266\277tL\3400\351\017\232\2771\232\024d\276\253\242\277*\343\225\353O\345\241?+\211\337(G\353\245?y5\215S\352y\242?>\220Y\203\2777\242?\275{;\211\255\254\232?\213EOq>\372\264\277Q\3017\233\241w\240\277^=\260\2755=\251?\326;\332E \022\261?\207tq\3162\372\261\277\374!Np\036M\236\277\261\344\022\265\312\204\246\277\276\330l\1775O\255\277RVY\255\241\317\267?[\277\3004T\325\260\277`\026\233>\362\215\265?28\264\217\340\373\177\277\211\226\356\252\371]\253\277\333\032{\352\342\'m\277,X|\264\321\336\217?9*J\306FL\254\277\302\321\314\244\233z\221?\272\014m\250\010K\267\277\224\0356\354\006\265\261\277\226N\332\267\214A\231?\303\331\205\264L7\240\277\353\353\033\332w\r\223\277\273\207\344\241Z\244\211?tEe`w\300\265?n\223\257\245tmz?(\343~\235\n\367\214\277B\264\372\341n\200\234?\324\345\010\336M(\245?\257z@\216\0234\224?~9c\022\243\260\226\277\'\375\260\266\361\004\255?\213\375*y\330FS\277)\215\233cG\030\251\277t7\264h\3231\267?\016\363F\275\271G\300\277\001\350\346\235\235\216\242?z\373\361 \035D\263\277\327\004\325\331\221\264\234?\007\377qH\2413\263\277aQ\30175$\240?(\322\310\353\367\371\221?\034S\357\221y\227~?\'\217%@\322\022\270?M\212b\007~\232\257\277X\345\266\334\034\261\310\2773\020W;\035m\240?\225\0057\304`\375\275\277WMN>+2\212\277\037\266\251\340x\022\250\277\215\241;\001)\016\272\277\342h\212y\'{w?D\261\310\262\230\372\220?o5\246\001\277\370\242\277\342c\210\260;?\247?\007p\r\355\2365\251?\r\363 \375\023\264\253\277V\tA\365\352\361c?h\346\232\230\220G\300\277\314\255\206\360n\203\241?\276\306\024\000|Z\254?\366\n\"\334\305\t\263\277o\357o\252\024[\210?}\010\244w\261\276\246\2773\316b<:\354p?}\201\311\023\243D\270?q\351\001\336\232]\244\277s\214\204\320\301\263s\277\371\037\370\017]p\273?\377\2034\375\035r\241\277\350\257*k`\253\261\277\322\341\326\354?1\264?50\t\215\346\260X?\276{\213\264\004Uz\277\312\231\366|$\315\236\2779\250\254w\226{\257?\031mS\357\027\267\272\277\261\r\253\334\225\t\221?\371xhu\352`\265\277\212\325\177\312j\026\232?\017j\243\341\361\374\215?\261\300\236|\332%\245?\215u<\267F\331\215?\333\354m\257\032\227\177?\344\316Q\007I7\262\277\340t\3019\024U\227?wmP\235\327]\261\277t\213\027Yb\251\242\277\241\265\016p\354\366\245\277\203x\3107UP\252?-I%er\033\256\277~\351\362\245d\373\256?\211\335ImN\331\215\277\020\2124n\262\360\267\277Qi\033\215\330\212\231\277yc\255@k\234\245\277\350^-*\021\230\241?\234\343\013\246i^\261\277\246\0144\311\014x\301\277\243\246\211\345\216\210\250\277@\024\330\201\350:\235\277\304\311\013\025\275=\261?o1\006\301n\231|?O6\326\330\213 \211?8\343\314\233S\251\220\277\343`\316\350\365\242\300\277\356E\335\004\210]\262\277\301\004+\021\323\325\201\277\223\023Eg\356\372\241\277\323G\037\237\311\344\262?g\0057\367\031\313\243?\\\205\210\330\246\210\245\277\272\261K\034x\205\225\277\372\366\206\3516X\260?\032\255\333\366\247\215\241\277)\361x4\024r\263\277)z\031w\310b\222?\323\364\243\346E\013\245?|\327\001R\021V\262\277l\311\022\240\376\243\244\277\001\221\2342\305\236\261\277Ts\340[\035U\247?\177\364ud\333!\267?&\242\337\245\004K\271\277\351\\d\010\260\272\271\277\373\237\314\343\363\002\243?\231\332\253\253\214\027\261\277\003\006\0278\315`\225?\324\\#\362\222{|\277\375t\311r\344\254\261?\254Pfi9\034g?\347\010\322f\365\317\261?$\026\nS\354\247\245?\334bCf\025\202\300\277\345:\357\277T\314\246?\272oe\363\270\354\242\277\326\367\320\240\'\t\271?e\343\236\177\376\303\233?\320\t\367\221#\224\254\277\344\352\030\320I1\306\277\246Uc\212j\273\202\277Ur\0136\202\352\242\277\027\214%%vD\252?C\247y\324\210\371\223\277\365\243\014\327\361\225\206\277\356p\023\\\320\001\243?\260\372\345\322G\013\265\277\324\245X\372\026\353\211?\223\0255.&\255\201?I\357\256\036\2631\227?\204\346\346\027\222;e\277CJ\021\365\177\277\241?\371a\341_\'\264\264\277Ql\333B\177z\251?\372\3112i=Q\254\277\361ge\r\027@\241\277\331\001\030\025X\217\253?\264f\367f\205\204@?\255\326\351\252\035B\222\277\330d\351\323\261\316\302\277/`&n\340\370\212?o\257\246\'\273f\204?\223OC\324\304\342\261?\225\367I\321?D\263\277\303M\314\000\2651\241\277\227\264\207\270\211\363\267?y$\203\274H3\201\277\261\0238\t;\225\267\277\370\351\240\323\310t\272\277n\376\262\202z\030\177\277r\250\277\346X\335\261?\214\237\030\373\2223\242\277A\227s3a`\250\277\234\352\003_p\021\272\277\014z\214;7\317\255\277\313\202\010\374\201Y\262\277E\021&\334T\241\225\277\364\026\303\201RR{?\246\037!\"\242a\266?\230\2605\307\362\323\235\277rb\333\256@\200\253?\354S\272\312:(\231?\222\177\304l_a\265\277[.\307\232LQ\236\277\2340\035p1_\241\277\354e;SVJu\277\310\220\341`\267\221\265?\'\204\3507%\004\224?\273\004!\223\310~t\277\177\373?\304\354\325C\277\\\004\026\365u4\252?\004\316\265\257B\373\216\277_\363p\374\025\334\245?\005\3609#\235nq?\343\t-\320\367\322\215?\010\371\344\237\261C\257?s%\036\362\255x\214?\005u_\305\370\237[\277\374d\004\344\303_\260\277\374\274\005g>\236\200?[u>\023+g\260\277\361\215!\204\017/\225\277\326\323\310\305$\220\246\277p\177\373F\234\267\254\277\363Bz\223\251\245\234\277\212l\013\244\232kE?N\200Y7I\\\246?=\013J\262\346\317\261?X\323\223\3346\036\214?\274~2y_s\262?\311\343\310KHr\235?\233\0337\263\227\004U\277+\032B<\323\366\306\277\033\2604W*\037\237\277A\366\272\220\217~}?\216\273\340A?\250\263\277\311hK\241?\252\220\277vO4\361\010\324\265?\227\224\003\344:u\225?h\207\234mZa\240\277\362&\215\"\266\032\251\277t\231m\3329\271\210\277\2377\305i\362\334\233\277o\205\2341k\372\224?\351X\250\264\306 \264?\037\321}gQ\263\240\277+\374=\241\"\000\266\277\030\025\246\023\273\271\227\277t\022`\035\346^\231?\342\'\013q\276\225L\277\t\2454\032\241!\205?U._\222B\265\264\277#s\210\221\301\345\212?x\035\257O0\r\254?k\035\247\264\352\336\212\277M]\214\322T\017H?-\275\360pNL\257\277\221\037\235E5M\263\277=\363\344\266\305\230\234\277\0054\000\323\007\265\235\277\016\312\3638\0204\246\277\233su\317?\037\223?\301\366\312\206\360q\272\277y\033\003\305M\245\306?\276\023\252\347\264\032\251?\035\371\251\017W\225|?\335\366\217\\\265B\253\277\221=5?\240\031|?VV;f\211\352\257\277\361\354\360\226\347y\267?n\247\031\265\256\337\270\277b\366\030\204\222*\234\277\027\\\211\266mc\205?v\225\2360O\021\265\277\017\024\250\r8b\224\277,P<\330XY\253?\365s\265#\2265\224\277O\353\263\030s1\227?\020+:M$X\272\277%\231\010\351\317\235\214?\301\n\230\255\r\216\230\277\342\254\016\177\021I\237\277x\344\271\370W\221\255\277/\323\276x\2148\255\277J\023\320R\005\326}?b\277\230\310\370\362\254\277\'=\036nZ\326\237?\216\327\006\253t\353\225?\027\223L\254\246(\234\277\327\213@\n\226\024\201\2772\214\033G\367\306\245?Y\262\025\002\014\030\301\277>z\234\332T\037\222?O\300\2414\\#\243\277@\267\324\202\254\211\266\277\264\257\020\033\363+\240?H\304t\256\025\245\204?\nFg\345k$\263\277\343\001\\\016\213\010\245?f\303t\356\213\316\261\277\030f\3362]\030\213\277\231%\313\312\324\007\203\277\305.2`0\217\231?\350\017\240\201o\341\235\277\237\210\202\205j\177\233\2771\360\276\363\364\302\247\277\204Q\312\032\220{\243?-\215/\227%o\244\277]M\235\341\373r\262?\371\214d*\257M\263?\'\026\213\350\257\321\261\277\304\343l\233\262\242\222?LO\235\"\252Y\221\277_!2{\214\004\235\277\206W\302\304\251\007\231?\212b\0242\252\346\233?HclKd\010\242\277F\246w\233\337\336\233?EB\211D\363\255\260?\326v\270\342\'\257\260?n3\222r\010\313\234?\234\3643\343\335\214\271\277/\346k<\"\214\235?\037\221\253\"3x\271?\036h\240\237*0\225\277\232\277\020\375>\321\200?e\375\251\301\303/\261\277$\347\"\310\025j\267\277F\306\036\263:\354\266\277\311\036\342\272U/\244\277T?\033\271h\254\260\277\'~qsu\337w?\317\2105w^;\265?\330\355T+\360A\271\277\254\200^\353\0062\276\277\327d6\327\207\312\213?\275\340=;\361\327\233\277}g7\252\203\311\263?\313\001\214\033\177\356\274?\336p\253\007\016\365\204\277\242W2%xg\216\277\347\256\225\244?\205\270?fsP\270C\232\262\277\220}\240#\200x\242?\371q\323\0206\347\267?+H\271\312\301W\210?\265\213?\320x\327\264\277/\217*rw\300\261\277i\241\330S\307`\204?!\205\341\324v\t\261?\021\202\325\352\221\237\244\277\033ks\030\306\323\241?Y10\317%\276\250\277\214\226R\313\\h\264?{\251G\305{\357\220\2771\016}\326\312\250\210?Q\311$\352\213\354\245?\313*\006\217\375\340\244?T\241v&a\253x?v\371\030\326\312g\245\277.@dBF\024\222?\226/vi[\320\252?F\323\306\013\346\027\262\277\257\240\255xnT\262\277+On!\024r\245?y\235\241Y\2755\220?\014\024\237&\"\253}?\374C\273\211\250_\252?\033\266\371\367\337\235\250\277\355\347\353\3443e{?\317\254\316~\214=\255?\024UH\226\\\004\242\277$\230\302$\275\202\222\277\205I\272\020h9\266\277\206aA\353q\217\225\277\311\266\265\273\274\223p?\3738\222\227\366\256s?F\t\032\261\013\005\263\277\021\316\274\2639\213\257\2771\355\032\364\ns\245?\372\301\025\014c\356\247\277\335T\355\035\275\306\230?l\r\303\230rf\206?\263\352\241]\375\001\203\277\304\232\325\347\321\365\250?\332nd2\\\312u?\367\0046\022\334R\246?\032]\314\'\340\361\242\277\214E\265\001\036\035\244\277\346\370\217\224\205\376\200?k\201\020\2379+\256\277\336f\354zj\310\245?\351\340\335\377\263\371\264\277m\374\232\327\354\032\252\277Db\032X\334q\274\277\000\255\233\n\350\'\250\277\376l\032n,\220\260?\331\"\244\337\317f\274?\267\371~9L\345\232?\240\215\342\325sa\275?\253\004\321h)\344\272?C\327\241\372\247\334\234\277\352\027\337<\212\221\234?P8\024\363\371\372\253\277\270\330\225h}x\276?\364#\254e\006\304\253\277zqd\360?\322\241\277s\241\\g\343\337w\277\023\245e\2124\203\240\277\323p\024\025\270H\245\277\346c-\347\027\003\274?\252I{\177M\346\262\277\302JI\203 -\233\277\315Y\t\210R\361\215?\022/\346[\220Uo?\375\343\355\377\t\271\207?\274\254\246\244\337\220\263\277u\177#:\263E\274?\001c0E\357]\263?l\215%\245\324l\237?\366\345b\014\204!\276\277\245\023}\372\017\214\203\277_5G\000N\010\242\277\232\0138\202\344^\225\277\002\211\261\234\241\235\250\277\034([\362Q\205\276\277O|,Tx\225\263?\366\031\377&\370\226\225?\330*\'0\264v\224\277\360\215\200\027\265\252\241\277\271\037\033\2447\365\234?\241=\231\343\336H\261?\356\250s\"\222$\264?\206\241\271K\207e\204?6\211\344\221\020.\203\277\314G\346\246b\370\247?\264$r1\271\204\255\277\367\302\207\264.\235z?\360`\366Q\305:\254?e\204:\373%\323\217\277%\2559d\310\261n\277\217\303\223\221\276\377\236?.\001r\321A\241\263?\273SNN\211\357\225\277\276v\010\204\022/\233?\373\312\013I\206B\226?B\235\252Bb\301\256?S\213\336r=\255X?<\331\002;?\365\240?j\203\357\267K\300}?n\252\356\326\021\256\244?3A\307\"o\317\220?q\312\314\023e\276\244?\027\327I@m8\242\277i\343cJ2f\230\277\022\311\270W\263\005\252\277\221\354\256G\032\232\262?\343\206w\r\355\013\235?.\335\224g$\250\246\277\237\341B\006^\340}\277T\021D\350\016\226p\277\200q\373\321\013-\265?\312\0148\240\246)\263?F\336\323\356}\225\272\277K\223}e\302\236\257\277\247\355\246\237\235\201\256\277\026\311\004 \020\326\272\277T\333|\023uU\235\277\376\252w~\230\370x?xG(m\026\341\251?mE\265\364q\001\223? \345\017\020\007\t\253\277\024\375>\252\222\333\235\277\314\004\265fem\206\277Q\275PS\223vu\277\022\275U\250\236\231t?\352pTW\367\304\206?\3759)@]\340\242?\266U\007\207N\266\301\277v\003\343\245\214\\\306?\301>\204;`\004\241\277\nM\223\010\324\036\251?H\311JlTO\273\277&\232\022\276\212\304\201?\321n\247\202\021\305\250?gI\337\316\"\335G\277\0239\036\225\246\034\265?i\341QEG\221p\277\037j\204|>\276\200?<q\006\033\021\306\255\277\272\217,\351Kr\211\277\276Z4R\373\321\211\277\324\331\266\377*m\250\277\261\367\021;\366K\221\277\370[J\227*\001\263?\271\203L\335oF\251?B\340\252\2257\203\260\277\347\263\225Z\374\031\226?\365(\262\017\216\226\242\277\354\231\261\276\352\221\265?rObB\374\344\262?Em6Nq\304\241?*\002{H\366k\241\277\231\260\"\266\273\362\237?\\Zvc\361\365}\277\013v\034JW%\265\277r\375\t\311\316\251\223?2y\026\202\373\273\253\277\247*\027\207V\\\227\2770\021\265\"V\252\265?\212\024\306\203_)\222\277m*+U\206Z\250\277?\263>`3\335\247?\246\314\373\020m\t\265?\014\005\020\361V\273\265\277\312\361V\324\211+\227?\322\317\374g\347\221\220?\\\320\300\255#\223\270\2774\010\3644\325\267\261\277#\215\000\032\203\364\271\277\334\251\224<\204\016[\277B\024\215W\324X\241?\241\372,\346\373\357\240?S\317\214\316\231\324\211\277`\320Y\016\241\006\263?\312\021>v\2735\260?\227aZ\263\0209\255\277!\027]\010\023\030\264\277Q\305\016 \022\037\261\277#\242S\232\224\267e?\314]zu\206/\177?\034\230-\363\350@T?P\232~.\310\202\251\277\216p\217\2612\314\226\277*\341?\250\301U\256\277\260\253\336\310)\237\243\277\234?d\350N\360\245?z\240\325\232*h\260\277\331u\2345\362R\222\277\237z\\\256\014\036\260?\017\301\002\0317m\211?\034\351\010\302\260E\260?\001\265\247\247\277e\214\277\177?|pn`\223?P5dm\037\221\204\277e\251Y\340\347\007\255?\311\270\361\241\313E\223?C8\036\272\003\216\263?\210\361w\347\373%\252\277\r4\237\223\037\026\224\277\303&[\325V\230s\277]\203+%}\312\264\277\206T\224\236`\317o\277\021\260\266ga\361\247\277\333\347\333\026?Z\256\277\362\250\241\347H{\230\277e\022L5\263\376\251\277\r\257;j\336f\217\277\032\305{\325\340\270\207\277y|E\020\237\340v\277I\342\307Q\253\270\302?\305\201\215\373\211\257\263\277\371\247P\315\211\214\243?Bug1\313\304\260\277\266\331\367\244u@\243?\222\271\334\341>|\202?\250x\266\214\304\363\227?\333V\273\225*\326\276\277n%\301\277\3767\303?=Rc\223\251\340\243\277\320]p\364#J\250?\372\030c\337O\026\261?\233\246\355\236\260a\264\277\364\004y\316t\256t?3\2326l\214\372\240?\276\20101\345\303\233?el\206KE\014\216?\330\347]&j@\224\277\333\0306(.\367\230?\217\316\005\365\247Q\271?\361\020\246z\360\365\257?`\275\353r\244\031\240\277\t\204I\311v\206\203?\325\341t/n\346\204\277\2011\"\237`o\267\277q\340\313\342\010]\231?\006\235JD\261nx\277}7\311n\225:\205\277\306\206\n\257\023\017\225?\371r\242\340\345[\241?\200\275\376\031\363\215\267\277a\323\361\310\001\005n\277\030\234$\215\357\320\255?\t\261\3056\024\342\227?O\243\272\371\315\200\222\277:\277\3033t\r\256?-\215;\300\230\025\237? 2~\'\2357\300?\263 /\245O\362\267\277\034\331\354d\357\265\251?\364\007\n\240OF\200?\326\350CX\220.\262?{\231\025\315\340\"\262?\246\374\014h\014g\255?\324\206\210\235`\025\260?\177b\204\310\363\335\277\277m]\352P\211\336\253\277\230\327\314x\364\370\221\277\315\254\301\302\200K\240\277\036o\231\345on\260?\217\006\233\253\304\006\244?J\221`\2479`\240?\260\r\333\224}\376\246\277a\205\321\2537\365\246\277\257\315\223n\223bX?\370\216\250\241\277\372\223\277\007\364/v\237m\234?\214\033\266\"\\\336\236?\333U\260\250o\240\207?P\344\320\205&s\221\277\220\227~\376\304T\206?\327W\307\333\343+\242\277\222\276\300\360\341\212\301?n\200\017\230ui\227\2777\375P\270\030F\234\277\036-\'\334\251\204\265\277\261GA,\345\376\254\277T_L\004\370S\305?\037\233#\361L\366\237?\335D\177z8\257\225?\356\343\263@Z\021\255?Q\255\000\245a\244]?\235\216\347=p\005\241?\271\304\230v\2616\241?\361\331$m\240e\242\277%\002\331\324$\326\231?\305ht\346A+\214?KJ\270\016\270X\235\277Z1\2134\203\325\246\277\323\000Y\271\232\361\265\277\002\267\225t\372j\265?\177x\311 -\213\245\277a;@\227\'\031\302?c\260\274\217[P\244\277B\t\316\352\232(\244?0\316\035\364\2670\235?l\3275V\0000\254\277\362=\234\211``\271\277\007\326\007\320:\263\260?l\203\370\350\346\230\213\277\301(S\242v\026\235\277~A\246\363\303\344\204?\373O:\307 \233\260?\235\277\231\232\200\227\274?A{\255\231k\203\253\277\246\231\361\000\274\316\210\277\225}\341\324|\267\252\277p\273\220\345I\347\271\277\221nN*\0253\240\277\n\374\372\350\302u\273\277~\275\t\337\253\206s\277\250I\213\334hd\234?\204\t\013\234\333<\250\277\234\310\006N\370Q\264?\035\333\277\216\037s\220\277$uE{\211\333\247\277\313m\r\221a\243\232?i\342Bi0a\226\277\311\"\220\246\205\261\261?T+\2140m\217r?\353\367x\363\367\r\245\277\206\263\202\356\212\217\241?e\t\306\247r}\200\277\334\223\027[\007\363\262\277\313WrX,\031?\277\326\312Q\203\027\343\265\277\007X\263\321\333r\241\277\322\331a\034X\376\256\277\265p\234\375\371\373\211\277\374}\314UZp\257\277\233L?\376\273\366\265\277\334z#\333g\202^\277B\016\221S\342\272\301?\037\365\330P\003g\204?f\377L\2749\022\256?\276\201H\256\016\333\236\277A%\\j[\362\256\277\306\207\363\0020\223|\277\247\255,\022\211\367\263?Y\246a\356m\252\244?\255%aJ\323\200\265\277\035\377\022d\022\274\241?\236J\252\017\272#\236\277\027\006\252\374lL\236\277\001\361\335 \322\240|\277\307\244\226\031\252\251\273?\205\204\376U\3165\255\2772\222\316\206%\332\240?\021\230\020\233\330\214\240?d~m\251\006\007\220\277~\317\003N\313\262\300\277\375U\002\371\202\344\243\277\210\354\252\270\215\010\260\277L\273\r\221\235v\201?\315D\311\306\312\010\226\277\275\3258Xl\027\243\277J<\301\2400=\262?\017ol\200^\016\311\277\364\224\177\312\2050\244\277\331e\250\232F$\226?g\005\371f\010\231\242\277{<\236\n]\272\263\277\217\000X\024F\226\240?\021\360\335y\363/\230?l\362#\254\214_\223?}y\250\300\307-\234?K\006\004\004.=\256?\343\332\252\312\300\201\246?\301?\177\304\034Y\250?mZ\353~h\364\202?\026\352,C\2228\264\277W\247\030\270l\031\204?*\216QR7T\260\277 \256\211\317\251\367\236?\321Q3Y\374@\267\277\301\271\335>\215\250\221\277.`\024\353\200Y\214?\253\275\246\277\036\036\247\277L\220\006\206\317\215\206\277\201\215\342o#\337\241\277RNL\274\374l\243?\317\345\177\231\022\262\230?\335?\304o\\F\247\277\034\223\244\000mt\243\277\033\021\\L\273}p?\232\022\334\367\364\260\214\277%\241Ktq\221\221?\337\204\267\r\263J\253\2771\310\22082Y\265?\251\332\255\202\006>\243?v\353\333\030TX\252\277\352\236z)\272\013\262\277i\333\251\337\233\317\236?\256\360p\303+\r\244?\317I\263\332\360\234\243\277\373t\221|T\370\240\277\316a\271\002 \301\210\277\013T\274\001UK\235\277\270F\256Rm\351\231?\237yE/\n\324\261\277\226\246\342\3112\271\227?\263x-\260\223,\215\277\306\302]\032\\e\233?E\206^~\334\317\203?:\356\004\205\255\207\227?$\217IJ\351\234\250\277\260\206\330\373Y\372\213\277\331\tM^\377\276\245\277G\202/\226\357\027\253\277\336\210\225\023\376\322\247?y*s\351\357\006\252\277k\211\375\236fw\236?\241Y\212\227\010\234\223\277\364\312z\251N;H\277\357\240\024[\373\213\257?b\262\216\317\024+\232\277)\304d\007\241\nR\277T\032\321\007<\355\236\277A\006\341\312s\333\242\277\356U\004\246z\311w?\364Zg\207\355\377\302\277\252=\226W<s\224?\254%K\000\275\341\277\277\247\363\025\317\273\343\224\277\\\265\2068|\332\222\277\356\020\341\2634\200\244\277\317\305\342\014\217\375\244\277.\217\217\254[e\233\277\370(\021\270bb\261?zg\332\307l\031\201?\353\352*\006\276b\275?\037\234\335\247\243\037\227?\203\004\376hI\206\250?N\370\241.\225O\262?(\014\033\236O\007\245\277\252u\005\005\322Yn?!p\357\004h%\241?\230P\023B\350_\262\277bd.\217m\227\245?\037\204XMP\300\226?\007l]\0171.\261\277%+\263\277\221\366\224\277\247n\272-$\000\241?P\3608\3330\223\261\277b\241\255\025U6p?\370>t\271\210qr?\255\376\210\177\273\263\242?>G\007c\032\022\232?h\270t\310\024\305\231?\253\2103\346\377\001\253?\374\251)\254\341U\236?\360\247\230U\031t\304?9\333\322UO\333h\277\230|]\376z\316\204?E_\010\357\027X\224\277\247H\316\215J\312\257?\374\004\031\325\371{\233\277\316\236\t\363\267\372\215\277\n\032\356,^\351\253?\337\326\266D\225\276\265\277\245\361\276c \264\303\277\020\350 ;\225\365\231?\265\254\325\'\332%\240\277\243]\237<\016\240\225?\200%\337d\2368\244?\272\360\033)g\320s?\247\376\260T\323\'\211?\256\235N=\356?\226\277d\001\r?\"!\240\277tk\315\373|\330\237\277\312\"\341\350I5\250?\267\240\272]\r{w?}\305\\\335\253\356\234?\307[\r\220\240;\226\277\004\3643enN\200\277lR_y\346\327\270\277\262)\371\r\333\370\237?S\253\024+$\377|\277\004\005\344b\026]]\277|v\001\246D\306\262\277\311\225\263\307\017k\263\277\014\215\311\344\356B\207\277\323~\351L\013\202{\277\260`w\310\245\245\306\277O\247\020K\363\265\232\277k\276\226w\004\232\201?v\300\n_n\216\252\277\244\225\204y[J\246?\221\245n\315\273\307\247?\352\200\016\026\307\375\213?!\360\345B\337\211\262\277\271\302\203\2544\004\231\277\037t5\362\350?\206\277\371y\345D\215\343u?\221\235\035& \266\270?\321\260\374\263\003\235\223\277\021\315\273\240\306\270\254\277D\237\201\274\277\340\243\277~z\227\336\326\006\262\277\2067\300\275\314\343\270?\347r\350A\2766\207?\241LN>\201\245\272\277@>$]*\027\260?\003\367c\2507\360\244?\316\272\370\246\344\372\251\277_h\313\013\272\306\212?\001\212\022P\221U\252\277\232\031\300=\013\300w\277\373\242X\247\231\351\217\277\251Uri\002Y\223\277\r\217a\007\275\210\233\277\005P\275\340\010\270\215\277 \243\210\366\344\327\206?\346\345\r\350\257\020\231\277\235\246@~\337\013v\277\211nV\347\355%\214\277U\347\240w~O\224\277\266\2539\016c\335\260?\025\000\233\346>\265\213\277\340[\034\252C\312\252?,\326T\022wE\214?\302\372\304I\215\362\266\277x\230q\214\257\347\242\277<\033{s\016S\230\277W\274m\277\'\325w\277\370\014A\206\220\002\246\277\207S8\220?\334\240\277\325\016\225\220\346Z\253?{\257#\324\323N\230?%r\343x\n\210\250\277~\303\267r\362\347\261\277\013p\203\322\337\271\253\277{\232nN\356\375\243?\344\275\317s\033\313\277\277\224\007\336\213\342\312\244?6\257\312F0\351\223\277_\332\003\324\225\203\212?RV\025\227)a\216?6b\036\260Im\271?\344\267i\266gs\241\277\212\033\034\273\007\255s\277/\336}\245\365d\267\277)[r\006\250i\233?A\030p\223\t\367\216\277\303\306\036\242FV\237\277\372\377l\265\373[w\277v\035 \r|\303\244?()Q\321A\345\235?\216\307Apk\027\267?\214Y\336\213>\351\242?\016\342\235\030\n\341\221?\250D\013\031\252\375\202\277\313Y[^\236\014\216?\250v\255\307\031\326\262\277p\277\226\315\246\227\223\277\367q%<_\244\231\277\307\256m\347\232e\242?\214\231\250\035\373U\232?\233>\252\007\262\261\231?\246l\242Se\344\266\277zu4~\200\272\251?D\3012\364d:\256?A\"\016s\375F\273?<c\311\216\013H\262?\265l\216\224u\302\230\277\300\210.L\347\210\203?\240b\263F6\352\255?\245n\325hJl\261?K5Q\203\"\263\213?\024\270\366\247\256\261\263\277\'\331\256\205\267x\201\277>\003\236,:\345\236?\356&\354W\3702\267?!\000e\243\367\377R\277\nB\0337mO\234\277\250:]R\254C\273\277\363\345\0367-\006g?\010m\324\366w+w\277\t\373\366\231W\241\231?L\311\353\325\216M\224\277wK\025\311=\301\251?\246C]:\307P\245?\001\014#\245\271\263\252?\216\246\'\345\"\024\242?.\374\007\201+T\264\277\235\377\277\360\203\246\242?G.\026\350Z~\264?z\034\177\352\371\357\204\277\253F\203\346\032\017\304?\362\006Y\027\270!\246\277\212\343\334\263\r\210\244?\022\274\325= \346\242?+\356Q\266\245\261\220\277\273\201\221i\3527\242?\200lR\354\020\024\217\277\247\377\020\231\330\257\224\277\246\226\246>i\322\200?\267/K\0211\016\266?\312\316\027fv\373\250?\211\302R\200=U\204?\313\346\365\006\364T\270?e\304.\274]\354\231?\3758\017\311\227\260\232\277\3066\335A\305\006\213\277\206W\225p\254\260\245?\207\372\263\321\365\014\246\277V}G\244\351\330\216\277\272\221\365t\251k\206\277\253\376\373\303\333P\261?_\277q\2672\361\261\277\254\355n\206\276=\246\2779\366\224C\370\343m?\363\250d\206R\242\212?WyZ3\271\357\255\2779tc5\213\037\205\277\217<e\235\323\276~?7\023C6\034Q\244?\267(`\246#\256\277\277\036?\003\226W`\216?~\2201K\000\354\266\277\362\356\315\r\213\031\237\277\252A\027\227~\332\272\277J\276\360\036\\\305\215?\034\343\200\241[8\234\277\251\211\274\272\206f\223\277\207_5;E\343\262\277-\242\326a\334\222\247?$\217\243?\022\004\262?\276\004\002\356\214\255\260\2771n\260\260\377w\217\277\367\000[\025v\337\221\277$%\311\336`\212\303?\354\272\213bE%\266?^\010\347\204\222\306r?&\304Pc2\034\\\277\234\373\324\024\337\027\267\277R\020A\027t\204\205?\r\336\336L\005\304v\277?\212\0223uD\257\277\201#\310\r\020y\223\277u\204\311\215qw\233?\242`%KQ\242u\277\226\227[\034K\032\264\277\255\006#l\267V\260\277=\264\210D\241,\264?:\206\233\t\270a\243\277\355\023\335\272\214l\256?\343\312\227qZu\266\277ld\037\263hU\301?L\240\023\220\232B\261?\005@-\271A\213\200?\245Y\220\310\211\352\202\277\251\312b\3019\365\257?h\025!\266\036\310\272\277E\260\227_C\235\241\277\254\273\356\020\t9\246\277\231\316\357\022\003?{\277\211\264\364um}\263\277IV~\240l\360\246?`\335}\217\216\313\252\277m\274\2224m\354\214\277\226>%\204x\253\265?\372H\"\372#\313\251\277+\025\240\365\266y\207?{\030\305\352\272\013\273?\326\240\325\367\362\321\231\277\323=7\211\211J\265\277\\)\212\315o\004\265\277\346\362\301\326\2030\202?\301+\224G\020\336\274\277\001\004|\263\311\230\240\277\200\374i\330\335\301\251\277\2061\314\347\217k\244?\n\222\255R\242o\214\277P\304*\365J\377\274?0\"\"\236ID\242\277`P;\023\001\305\262\277Q\345^\010!\\\233?=\314.\004\360\261\204?\314>\203\263S\005C\277\314\203\357\004\325+\211?\243\345\313\226 I\265\277-\367\026\254\314\355\252\277\321~\014\235;\237\273\277\031\266Vy\250x\234\2772s\005\017\206:\243?YB\246\247\330\033\261?\013r\037SC\257h\277\333{\326\0053\304\234\277\263\222\220O\241\325\242?\374[]\305\312b\244?\000\225O\276\373\020\252?\302\324[g\246vP\277\"K\243\365\017\377\254?\320\3762t%\270z\277\373\346W\013\354\206\273?\006w?\000=\307\300\277D\006\313  \177\260?\253f\014\251{\207\253\277g\022\253<\231\036S\277{F\307\002\250?\n?\362\372\305\242\332$\255\277\334q\306\246@\373\250?\220\241\326\271\030\367\245\277\232\344\301\0163+\240\277\252Z\t\307\215K\277\277X\211\334\303H\241\263\277\007E\014\177#&\222\277y\340\227\212\232\n\261\277\302\343\266\020f\213\235?E$\023\024\234Y\265?a+\266\032,\202\242?\0166\177\311\212\033\261?\323\201GYV;\275\277\230\256\352]vJt?se\035\337V\311\240?U\307\365}\265\335\205\277\276\322\326\377\200\230\265\277\366z\"\313O\t\212\277\313=\370\210\003\177\252\277\247\226\234\360E\311\265?\352\246\033\365p\332\254?\005|\216\313\271l\254?4\031\344\341&p\255?\\\237/\t\333`\220\277\276\rk\024\002\t\245?$\344\340\372\005]v?M\214\2702[\370\177?\025\307\231\231\247\212\224?\373\013\242\352\"\266\253?\370iC\230\246\353z\277\234\277\227_\235\304|?\024m\303B\333\027\246?\010\356f G\360\213\277e\002\340\253t\237\257\277\233F\2764\333\027\255?\275\257\003\362X\312\264?\322\347\373o\231E\264\277K^\352\265\244\254\255?\214|\207\321\343q\236?\310\271c\33151\260\277\313c\3458Y\375\243\277\362\027\030?\177\316{?Ph\311\033\357L\227?\245\355m\300E\r\221\277\001\2069\203\326\263[\277R\234\257\375\001A\241\277\212\326|\376\347d\246?\311\007\261\231,\223\222?XU\010\266\356mq\277\r;\352n\203L\241?L\264\252\353\246\262\275?\211q0J\022\014\256?\376a\245\212\212\031\244?`3\030f\222\033\206?\200Bm\345\013\317\251\277K\024\324yg\000\257\277|\272\007Jp\270\246?\363\330\345g\355W\250\277\261(\357gY\357\263\277\013-\317\322A\310\233?\027\342\214s\tK\271?\032T\335p\274b\271\277\246T\303!3\264\222\277\025\264\205f\254=\237\277\220*g\0134\003\225?\374\030P\326s\037\265\277\010b%\336\021\242\241?\352\361}\247\254\214\225\277A\276\255b\236\241\246?p\310O\036\354\354C\277f\220\2762\270\277\252\277\314C\302=_\030\203?\014\365\tn\343\257s\277\332\024\342\216\276\r\241\277\352\027:\250\212\241\236?\275\336`X\221\035\234\277ww\001\030\372\265\256\277%\305E\370i\037\272?\274EP\331\340r\260\277\010\314\377.\314\312\240\277\341\377\177\376\267\355\226?h\357\332\300,\250\267?\261\264Ka\325\271\246\277\021\263)g\373R\235\277m\252\311\230\013\227\201\277y\312\254\365Sf\305\277\313(\327\317H\322\243\277\243\254\243\271\364\370\250\277*\367\336\200\240\245s?\333\035\020A}\301\222?\024\363ZBW\346\272?\007\'\353\361\330<\260?\206\376\340\270\306\215\210\277\311\020\302A\341\367\267\277\326\360\204L1\331\211\277K\371\027\270-\022\217?\017q\222A\272\204\242\277^\316m\264\276\341\211\277\025:\331:H&\263\277hT\236\317,E\243\277\352\201\215\352\217\024\275?\205\305\227\t\244k~?uR\351\3038\200{?\262\223\246\n\345\353\247?\316\216\344\3613\313\255?\206\300\335\021\311\303\256?\216\242\244;\366\243\243\277\314\260\t \200\257\201?x\033F\234on\240?\2360\3443\251\352\251\277;\336\366sn3\260\277\017\004!\254\225\007\254?\034\3771\370\032\004\262?y\022k\235\353\321\257\277\357I\237\036\333=\274?#\023\313\3271<\260\277\352\001Pq\033\"\245?0\271%\313\n\232\213?\300\345\253\361lQ\257\277\200OI\013\220\366r\277j\031\207\357\242\254\216?#r\365,V\331\264?\222/$\314\020F\232?\324<\325\376\336|\243?\363wRA\t\023\200?\301\252\241ebC\023?v\216\3000:\343x\277\340e~^\3029\246?\346\014\002c\010R\223\277\217q\304\031\213$\240?D\"\020\227\037H\253\277_\305\343\2543\327\211?o.\215N\361Yi?\305\037\272\274W\356b?a=\312x\022\006\262?\275\260\220d9.s\277\230C\237\230k.[\277\267\320\346f\021R\271?b\320#\335v\254\223\277\311\327\365b\204e\256?\370\003\237%PG\241\277@\003\237Lk\233\226\277\264\014\264`Q\033\264\277\370~\025T\213\307|?\304\225e\007\255I\273?\274Q\001\376[\021\252?\203\374\350\322\273n\211?\342\340)%z\354\263\2774\247\037\241\241\334\241?}q\200a\272#\225\277\007E\370|W\241\247\277q(\374\254\251\357\240\277\263\244\034|\366\305\216?F\270^\304x\006k?\264\300\305W\331f\232?\356\202\332\216<\222\300?|\237j{\335u\201?\305\351\261\030>\251\240\277\322\201-S\273um?-S\252;\230\321o\277^%5\031\021\263\242\277W\212\325\334z\250\235\277r\355,\234\204n\300?\026\240K\257\3702\243?\322>vly\371\212?\036wsH\327\207\273?\004}sML\322\241?\335\330,\210\237\367\252?\030h\345\0005q\251\277`V\304\353\204\r\263?\260\246\017V\010\215\251?\375\251e-2\035\272?\316\271\377\205\025\311\264?\325~\375\014\217\353\232?\371\267p\321\232[\262?\345\363\217\0141\235\251?nd\'\255S\272\243\277o\315\004\013\300{\247\277\351\256u\361\357\005\225?\262$\2724W\313\260?\263)\325P\024\372\227?O\341\013(\217aj\2778\343\235T\261\372\262\277\016c\250M\313\003\250\277\227\022\220\247(\263\235?\005\342\357\224\336\276\246\277\035\323Q\201\307\375\226\277\324\n\263w\233\275\261?P\020\203\2245?\261\277\365\276F\342\345o\252\277\277\036,O\341\361\202?\024F\343\307\356\227\256?K\314\315\242\342\366\215\277F\343\212\342\375N\225\277i\2452\366\000n\251?\332\016!\345q\365\251\277\307\031\267B\364U\231\277\027\'\255X\204\362d?D\321\322\222\035\350\266\277a\224a{\'el\277S\n\233\330M\317\300\277\002>ii6\326\267?u\303\230\261\2039\241?\314\000y\244\351\014\220\277\327A\031\236M\355\251?\031\005W\212\306\356\245?]g\274G\021\002y\277\346\"h\004\016\276\200?MJ\014\316y\200\222\277\347\212\371\312 \021\273\277\01433m\001\240\222?\005(C\204#\017\246?s\337\355\220\212\237q?\327E\342d]\'o\277\223\351J\r\024\250\216\277B\350\323\007\326i\263?A\234<i\030\205\266\277j\260\000q%\211\224\277\317|\305\364\304|\253?\304\200\305\016C&\251\277m\342\225\342\300\223\230\277\\^\266o\251uO?\265\027\225\200\224\215\251\277BN\215\233\241\353\243\277\000\"_\344\034\353\226\277*\224\231\266\337\304\260\277u\334\n\220\261N\275\277Cg\rO\307\236\260\277\256\366\215@\307v\254?d\025E{\256\n\222?^B\354Ta\230\265\277mv\245>p\032\302\277^\365\256<\262\315\242?\203\374\005\253\000\232\226?Z\360\261\024\026\206\252?\203U\370\300%\343\264?X\200\"y\307\361T?\253\264D\240/k\206?\036\251\333\177\253\244\253\277~H\213\025\344\304\254\277U\344d\023\311\036\240?\316a\020\016F\331\261\277\013ajLUz~?\202hj\207\360\337\222?\375\251\271\236\326/b?\347\214\374X\217\307\261?\036_^\274\036\354\261\277\344\236\376\021\274H\242?\307\004\332^xEg\277\256\206\324\254I/\277\277\304\267\333XJ\237p\2772~\330\235\004\2114\277\331\300a\340\207\003\247?\2447\210\210\035\344\245?\305\010\\:\220\335\262\277\345\361y:a\004\223\277\373`\200\002\3661\270?\231]\210k\005\264e?\260!v\305eX\272\277q\360#\025`\360\266?\311F\206w\262\353\243?\243am\346\227\310\227?\005\177\316\212\346\020\273?\314\213s\307v*s?\241\344\321s\020\235\205\277\032\272~YSE\221?\025\010\225A\351\370t?Q\341A\032\034x\253\277\357\225\025\345\353\214\227?\007\343G\210\014\023\300?\346\303*\324k\013\242\277\352+XT^1\263?\022\341\230\310\303\321\\\277\262\212=\326\202\245\202?,\246\344\000\201`\223\277V\245\272\024\255\001\261?i\331\255\350i\030\261?\217\335\277\314\254\247\227\277\315H6\004\270\021\221?\276\237\365\235\223C\220\277\365\020\265A\375v\214?\320\'IrG\342\252?*\335\341u\202O\253?^\027\031Z\036\216\253?9\377\260\351\327B\274?\274\240*2\304\212\261?\353\026*$\222m\247\277\353H\265\262\241\202\216?[\374Ql\247,\264?\200X\324\014\332.\264?P\312\200\3702\026\222\277\233\261\r\335\335\026\242?/\tV\357\267\355\265?\365m\320?\243\236\233\277xg\375U\004g\246\277\013\005&N\021\312H\277\220\000\311H\231\352}?<\273\265\304R\354\272\277\026w\006\216\312\227\233\277=\302\216\234\343\343\260?\370Eh\031\264X\227\277\251\226\rc\366\220\254\277\265>R@\346\001\224\277\327*\356\020\253W\247?\217\371Q\262\003\370\245?@\351\300\030\2767\224?U\223\016\236\372]\240?\331\207=\016\033J\220?\371\030\316\005\377\247\230?DL\263\261\215\261\264?\327L\243en\332l?\230[\0050\213\244\260?\205W\002\253\321%|?\241\372\002\324\356\031\234\277\263V;+\023\200\245?\035R\035D\211\273\245\277\270p\016\031\216\301\220\277E#\304\206oq\251\277\347\262@)\021\301\177\277\236m3G\246\026\214?\266\271U\0309\335\213?\352G\227\315\343f\250?\241:\346)\274\240\256?\022\353\337D\312F\243\277\r\267q\0027\253\213\2773\243\255\236\030\'\253\277\263\245\003>\201{\263\277)7u&{\220n?=\2710D\353\016\265?6u>\327\3614\241?G~\340\361q|\270\277\371\345\315\201\340f\267?b\310\224g\315U\263?&\251\240u\274\273\242?\207\2512\361\020T\241\277FR]0d~\221?\331\216\335\377\334x\230?\034\324\311\337C \244?\256\307\242\245E\235\243\277\267D\313FY\035\246?\344v\313\3503\344\273\277\323\315`\215e\256\215\277\311\312\346\2736\022\263?\326\210E\355\202\361\225?w\232\213\255sO\244\277\034u\234\341Sxv?\231\r3\0179\202\242\277t>;\327\202\226\227?a\331\200\221=+\236\277\310\2102Pf\376\240?\354\354\333n\334V\247?\223F\367M\023/\232?!oI|\352w]\277\347\303I\352&\214\256?q\022\252\275\321!\263?\365|=\037;}\211?1\022\007\205\341\353\222?QT\'\216v\365\242\277\341\211&\251e\350\270?\355[\251\374gI\251\277\310$\\\243i\350\236?;\030\356\320\236\303\277?\027\007oD\302(\220?\3418\235\214~R\212? \335\360\002\330\025\270\277\"\356/\303\216\317\250?\201\370^\r\376OP\277qh \351\236\226`\277\337_\203A\000j\232\277d\030\206XU\261\260?\245\361\277\264\267\303\263\277\344\226?\352\034ep?\202\350k\353\337\030\207\277\303?`\206\222\367\224?\322\006\272\271r\214\263?n\356h\233\010\343{?V}\373\350$\010\250\277ZIu\0177\317\245\277\324\314\365\250\215P\267?I\362v2\234\013x?nHM\333\330\232\247?\024\205)B\321\320\245?\244<\020\206j\006\243?6\204\017R\215f\251?^\355\325\265\245\003\277\277nY\275p\033{\245\277r\202\014\336\272\355\234\277\310\226\315\234\341b\242?\340\255\315\201\023\022\220\277S\305\323E\373n\300\277\304i\335\313\235I\220\277\267\024F\242\246\300\241\277\265\247\201|\224\336\270\277\272\342Y\330MT\247\277MD\014\231\033z\256?\346\252VB<1\267\277\372\217V\373_\347\250\277\330\241\233:x\001l?\n!\001?j\372\301\277G\375s+\005\345\244?|\021)\351\341@\211\277\265\232\360\243\326\300\256?&\217\270\316h\352\242\277\223\212\r \310s\245?\341\254l\251X\364\234?\244u\030\023+J\211?\347(_\361\235\346t\277%i;\253\232\\\277?P:\250\305\260x\241\2778\322\005\263\034;Q\277?\236\001].r\223?M\225\030;\257\264\232\277\246 \024\345\013R\234\27787\317VA\\u?[a\310\346\263\260\267\277\231\002\305z4\276\277?@tc\256\3007_\277\302W.\245\020\375\231?wt\301;\032\031\246\277@\251M@\205\342\273?\250K\255\002W\010\250\277~L\273\336\'\327\203?\302D\304X\200\313\266\277-\021\323\303\227\271\244?\3018\246)a\332\261?s\330\242\3268\270\252?\352L\361\001U*\203\277\306\362\221\005\223\244\245?\007\247\272\203j\\\216?r\241\345\232%3\227\277z\3415\316\264y\254\277o\032Zv\267\034\230\277\240\274\354\315p\366\242?]\22252\372\004\236\277\206\372\254SGF\210?\227\303r\254\240Y]\277\306~\300P\266\227\221?\321\177V\354\216\377\271\277\206\266d\303r\'o\277\204=\0163\376\240\260?\353\256\004w\033\n\234\277\302\226\377W\274.\205\277\311\t\310\'\325\3540?\321\373\312\375\315\026\203\277,j\300<)\262{\277!\323\336\307\035\001\264?K\326\372|P\014j\277h1\356,\374a\210\277\370\017\321Vn\355\244?\343\252\252\373 C\246?\357\301\242\232\246\242\204\277\"x\356I\024\010\243\277\330m\032Wo4\223\277\334b\233\241\036F\243\277\243\313*\227\337\304\222?x\205\247\274bu\261?,\216[s\2360p?R{3!\263\371\257?k\241\374\210\000\034\211?\200VW\341\270\304\251?\341\271\305\336\363r\267?o4S1\316\207\272? .K\274\n\246\223\277\341\213\214\301\0077\234\277\006\266\327\353\252h~\277\212Nm\304g\321\266?l\314\252\257\207\022\243\277z\007*s\262Z\226?\303i_\212\001$\212\277\373(\324\375|\220\266\277\212-\236G\237{\236?\004\304\201l:\377\263?kb\334\314\256\226\260\277\010\024\363\363\242\016\266?9\363\033\332\231\304\257\277\262\'\366Qly\205?\374\252\034idT\233\277w\223\277\262CTi?\331B)\336\342_\243\277\013\024\355C\217\207\225\277\"n\360]\216\303\260?Q\2765\242\314\367w\277\236\032\214\252_\325\257?m\310Y\374\257\004\205?\251M\341\371\364;\276?t~\000\325\341\361\271?\323oT\305V/\262\277\335g\254\245o\367j\277\021%\340\323\t\021\230\277\234A\025\213zW\201\277AL\336F1\233\241\277\272\006\330\t\244\216w\277D\010L\030\272h\033\277\031\351;\312\353\007\237?\037\231Nlf\345\275?\260#\315-\265<\260\277ru\302l\336\307\227?:\035\343:\036\376\247?\025\321\265]\247\222\272\277D\313\271x\221_\221?\237\235a\230\201\372\241?\267\315\217\303\254\224\227\2779\244~+\r\r\261\277\344@Wro$\240\277\t=\231osV\241\277\201x\0025\254w\225\277\010y8\355\212\326\256\277!iS\251\2241\220?\014\002A\225\216H\271?\342\3476a\376\200\240?T\206\225\246\365\266\240\277\260PT\306\330\322\221\277f\3338\346\027\220\260\277\007\001\253\232\036\250\274?\360\377y\302\032\324\214?\003\372\210Q\327\223r\277\013\252\375d{\276\264\277NW6\247\354c\254\277\215\226W\320@\312\266?\000\261/\372\003\322\263\277\217\264w/]d\211?f\212YE;\343\263?\245\373\224+\275\032\224\277\250\030\334\014u\243\234?m\'\"m\351\033\262\277K\237C\272\006P\247?\325m\271\177\276\204\235\277\331\265&\276^\017\243?\2021\343^\006\031\271?\277\272\2768\350\000\215\277T\2639\335\026\003\246\277\037\024\344\005\344x\260\277\335\035\331\3341>\300\277\377F\\\243Bb\245?\302k\244[\001V\205?\361\236\245\201\005\216\215\277\370\215%\316h%{?\312\363$\002\243Sm\277\037F\361\273\274i\210\277\232P\2256\321Y\256\277\036\270\000h\r\377\270?\327@\177\347(>\232?\355\366qA\317:\267?U\021\311\270\266\035\240?\2619\316~\275`v?ibr`\252\017\261\277\t\227\241\266?\311\267?p\024\266\363\342\206\262?z\261]Kl\330\222\277K\260Z\000M\347\230\277g\347J\205w<\222\277{\211\233\026V\264\256?m\233\232\202\253\214\224?s\026S\021\307`\242?\000\274\000\367<{s?P\322\2075\264\026x\277\253\230*\350q\254\227?\372+\215\256l\013\265\277\321\257\332\216\2734o?E\002\335\004,i\255?\235h\357[`\372\241\277\353$\312,\225j\266?\330\257\201W\307=\255?\332Eh\255=\262\251?nAx+^<\235\277\306\025He\233\264\217\277\034|\313\344\341&\257\277\221u\363\354p-\300\277o\245|\324H\032Z?q.\036\007\373\032\261\277\236@\335B\204^\256?z\241\233\007w\334\226?\374;3s\005u\261\277?\222\000\225^\262\310\277\360\307I\362\231D}\277\334\351\035\002\341\375\265?8\304\005\017\313\256_\277i\033\250\245\266\253\246?\301\306\311^c\333\260\277\330\003\007\210M\220\241?#\226<G\341;t\277\204I\0248\301\215\200\277\331\n\310\312\312\317\266\277\272PV+\272\020w?`\211\004\375\241_\251\277[\203\266\372\251\324\212?s\350x\014&\346\216\277\207\001\215\337\205\244\226?\177\345\203cV\314\270\277\365uI\230\032\231\235?\006e\217&\370\212\263?\245<\351>\341\031\250?*\342\371.\r\214\256\277\323r\305\377\007s\264?\377\334D\363U\334k?\320dQY\254|\220\277\273\241\246\267\\\311\271?\261\013j}\230\247\246\277\254&[\205\346@\217?\305\3118\213\262.\200?\025\233\302\020\210:\240\277\203\272\027\340m(\261?7\000)s\316y\241?!\035\377o@\037\237?\302=\336\253\322\331r\277z\365\204\n\032\315\231\277\267\200\207iO\363\261\277$}\001\224\2344\211\277\315\252G\220\203P\246\277\357p<8\303\320\245\277\361\331S\225\335\263X?\002h\311\361\370\256\234?\244\206M\233\333o\260\2779\301\010\2116\331\252\277\204Y\242\311_\t\224\2771uEt\345V\226\277l\312eO~\\|\277\000\023-[K\263\203\277\274\262W\244\240\213G\277ID;\374[\"\241\277H\320l\334\337\310\213\277-$\374g\016M`?*\306\325\3660G\263\277\302r+G\202\024\220?\037u\262\021(h\254?\005\357A\276#\355\261\277\205\345)*7\363\207?l^\241Y\263\212\234\277\365\305U\2030\213\245\277\326]\360\270\222*\265\277\343\003\326iT#\234?\204\235\362\332\312\356\216\277\022Y\004\026\303&\300?jt0:Mu\221?\026\010W\253\372\341\240?\241h\203!\306|\221?l\371\370{\365A\206?!\274\227\365\354\006\240?\324\252\2742\271y\244?\373\237V\330a\353\243?lh\224B\303x\260?\372+\245r\rJ\215\277\022\240\206\t&\214\204\277\313\0108\261}\026\234\277\356\342\323\266%\273\252\277Av\324\204mX\226\277\260\361Su\004tk?{\324g\246\030\357S\277\266w\0260b\356\222\277n\330lZ\210\357\265\277H\233\331\026\354\317c\277e\346\310\037\300;\265?T\377R\256\357X\224?Y\334!\211RC\231?\341d\274\220\376\331`?\334\200QJ\223\317\232?\356\322\262i\221\204\215?m\004K\230\005\220\262?\351\321\316\033\023\211\205\277\"\321`\271\272?\264\277\007\342\2216\034+\273?\326\224\237`\360>}\277D\254Pg\t\366\265?\214\262#\300\037\333\231?Z^1\001\234\206\206?=\3126\324i\353\244?\351l\266\363\314$B\277K\257\231\263W\201\234\277A\033\210\333xY\205?m\010\273fi\026\272\277\253i\263\237\023\255\275\277t\255\316\226\246t\255?\2536\347\n\336S\240?l\225\321(\271\315\263?\314\244\032\226\274F\220?\346\336\357\263-\220\260\277\200\244\350\301c\214\250?\224\220:\002l3\244?\343\300L\214\265?\254?_\022\336\262\211\022\243\277\003\206\256\316\210\230\236\277 \010\t\340z\361\232\2774\313xg\2576\303\277g\001\230\"6\341\257?m\271u\2747L{?\342\340\273\252%\202\234\277\nD\336\364\330p\275?p\327\224\245\344\227\255?cb\320`\371\274\214?\024\362\311\177\273G\232?\26069\227}\036\226?\177\305\264\251Q\250j\277\245\177_\001\t\355\234\277\224\t\311\312\"+\213?\0009;\324n\241\265?U&\032s\025\366\250?\356\017\226\324\326\252\255?\246p[\214\366\314\266\277&<.d\354]q?\303J\n2nT\275\277KA\236Yq)\205?\260\036\325HX\"\233?\347\177\232}e\\\215?\201\333\014\032G\262\252?N\351!\313L\231\272\277\350\342\227\345\0012\254\277\234R\250o\030\002\223\277_\007!=\324\300\250\277\332\375Zp.\n\274?\362E\250\207\037\022\231\277\233\010\240\243\367\333\211\277\216\325&h\351\263\274\277\275\014\221\245\311\215\247\277\375*\255\276\026\303r?q\352\237\217`\224\224\277\025\260w\327:^\206?2\354\016}\266k\266\277\272\224z,\262[\211\277\347\270\214\0134\224\253\277,\246_\264\322L\264?\2255\340b\000\n\243\277\330\234\370\315t\354\267\277aT\302\3020e\220?\263o\312\340D-\206?o\243\345<]\354\260?\340\367\325I\213\330\247\277\246GQ\262\340\351\234?W\315\357\312|\220I\277\220]b+\376\177\201?K\034\tg\013\335\266\277\030\322~\264\355\261\243\277qlXe\210\255\256?u/c\340y\303\301?J\205\211:2\033\226\277\014\260\363 \365\275\267?\363>\034\361\373\216\303?\245Y\324OZ\375\231?D\274\017p\345-\221?T\201\211\330W\271\201\277\225\'$\377\310\250\260?R\226\241tw\030f?\003S\353n\200\017\225?\344\263\265\235\225\204\234?\315ea\337\224\203\225?<\224\331\355\n\005\263?\222$\312\n\320\356\266\277c\177\340\332\354\204\244?\tA\000X\035\313\234\2773\017\272>\347+\275?HY\233W\217\244\224\277O\376Kk\245Y\233\277\243\010ROF0\245\277\340\300\242\217\224\355\266?Z+;\351\312\336\206\277l\376\376S\257\351\247\277\370\202\025W\316As\277D\237a\332\353\261\226?\035\375z@\353D\200\277\337a\251-k:\200?\243\264\366\"MQm?{\t\'&\261\201\244\277\020];\341\256\267\245\277W\317\345W\333\314\242?1\265\365PQ\211\270\277\345\210\210\374n\274\300\277N\202g\205a\333n\277P\377\263\366\213q\254\277\t\177}\301\010\323\260\2772L\327\036C\315\262\277\265\264DH\332c\244\277\025$g\241\013\243\245\277\003\306?\365\027\225\275\277!\340\0070I\'h?W\333\n\324!\265\261\277\350\363\340\2306)\263?\260p_w\314\273\235\277x\032\275\344\237\240\237?\275\346\301io*\263\277\241r\353\\^\014\241?\352\244v`\0324\247?\241\002\235\250\367P\266\277k\352=fy\261\177\277\206\352\025I)W\250\2776)X))b\301\277l\003!Z\260;\253?/D\036\032X\204\240?\222\215q\266$\035\262\277\014bL\232\233*\261\277X\260$\217\245w\272?D\315\253\0270U\253\277IMl\332.]\260?\205\275\364d\367\345u?\303\311\247\203\006\341\264?\341_\013\373#\210|?\201]\\=\340\344\236\277.\021\302\t\213}\202?0{P<\203\272\233?ib\303\213Lh\231\277\204A\255\036\010&\220?H\310\344\353\013F\254?\320M#\203\033\263\233\277\001\232\335c\247(\220?\030h/j\215\203\265\277\307\025\001\304\211s\227\277t\346A\036\264s\222\277\216\326F\255\036\036\245\277\276\334x\201\227\352\203?T\033HP\360\367\270\2772\340\370Q$u~\277\0165s\334\251\250\207\277wke\324\354\354\202\277\305\332\225+]r\251?\030\270E\t\035\256\220?\367BV\n\207\274\270\277\005\227~\267\361)\271?\3105@\212\021\023\253\277\230\245\r@\007\210\254\277\\P\231nP\270\262\277\232\031\210\375\327\315l\277\334\004\247\037\031\214\246?WV\312d\367*\250\277\376GD\201\216\270\230?6\374L\005Rf\270\277\263\030\311\024\207\322\261\277#)\017\356\250\266\255?U\324\177H%\265\252\277\264\320\277\023\037\211@\277\005\te\"\251\316\247?\232\014\210\263\205.\204?re\206\251V\004\275?\357\362\001\007n]\256?\031/\032\330A\305\245\277\265zwp\200\316\262\277\322\033\225\213-\036\244\277\2638\034,\323\211\256?\350\370\226\032\033\266\265\277b\315\217\005N\315\271\277\033\001V\005`\025W?=\321*\253%\206\302?:\253D\023\346\324\253\277\021\232\352\263C#}?3h\007\322\341\370\257\277\265\2235\002\350R\241?#\320\315a\302M\242?i\345\033\323W\302x\277R\242\230\245\016Z\232?4\343\035\217j\371\243\277\321\232\367&\232\316\222\277\254\352\314H\361\360\205?w\222\003\242\253\264\204?dG\352\270}#\206?\244\366\234b\250\304\254?MF\311\356da\241\277l\211\t\023:\262\204?\356\365\360B\313\210\251?\027]\330\230~\370\260?\224\341~\027;\315\260\277\024&HN\356\332\243\277~~U5.W\253\277V\027!\037\263\316\245?n\305\n\276\367i\237?\353u\350\266\037\201\227?\234\342\212\252\025p\266\277\2470\002^Kx\240?\243\367\324\367\313a\233\277\251\347\013\234b\360\262?\340=P\356Y$\255\277\t/\025\204U\024\213?_?\231\036.\245\266\277\001zc?\262\034\252?d\2606h\246\360\263?h\341\036\326rr\223\277\025\255B\214\235\310\262?\366\035\n*0\300\222?G\224i\013*\024t?\010[\345\256xl]?\330\346\322\247ov\216?\362\313\336L\014t\246?\357\222\365\211\016\t\237\277\030\330\315!E\265\252\277H\276\\-\010M\214\277\247D\\d\313\346\256\277^?\037\373\2542\216?\267\377\003\365\366\214\267?\034R\014>@-\246?\276\260}G\245\026\260?h\'8\224sV\270\277K\212\353\315\336>\222?\335f> VV\212?m|\313\321\216\030\277?\220\205/\203\\\006\253?Y\355\355\273\347\266\240\277|2\016zZ\370\251\277f2L \037*\247\277\360w\311\223\365\300\251?\207\\I\035\3678\241?AB:\034\332\304\263\277\314C\210m\025\272~??\002\342\262R\027\275?\227\021\027\351T\220_?;\275:\204\220|\263\2771-;\'\371\201\253?Fo\327\344\350\213\263?\016\325o\237-N\212?\016\261\242w(c>?\322_\210\272\276$\250?*\235W -\244\261\277\341\366\220k\244\004\236\277i=}\321\001\014\261?\315e\'\271r.\300?\212\251$\316K\222{\277\241B\021\235h\303\271\277\337\352\355A]9\225?P\377\354\364i\214\243?d\352\272\266\202\275z?\215b\337\305!\235\250?\020+g\236\320\334\252\277\013\216\242\360\004\251\233?NN\362\306\260_\256?\356E\312\327!O\300?\367\232\010\337\302_\242\277-\206~\272u&\223?w/\244o\331\231\262\277\374\351&\332#R\226?I~\343\247h\273\275\277\264C\215d\006$\270\277\216(\261\271\277\226\265?)\373\330\t\237o\260?\017\250\243u\351J\234?D\216\177:MXc\277G\243\273\310Rh<\277\251\032}\2673\276\216\277\2012\023\327?\321\260\277\246}\010\"\263\247\244?\335Y~\264+\202\241?\322?]\371\303h\224\277\007$g\031a)\210?\352\333N=\027\r\207\277\346\260+m\272\005\232\277|e\353\207\211\374|?+\034\352,Y\367\246?x\341\321\304e\276\266?f\224[>\0365\224\277\177\312\214\227\234\222\242?\365\372\001\275\032\265\265?\371\350\321\017\232Qt\277o\033\207&J\\\261?\311\245\026\255\274{\240?]5\304\260\251b\220\277\205It\334\005+\215?\225\010\357\242\253\222\265\277\220\231@\021\274\226u?r\317\370[;-\234\277\312\246^d\275u\263\277E_\237\024C\326\213?w\250\377\001\2606\246?\264r^5\014\313\211\277\247n\263\360\376k\201?\030\220\022\340\352\370S?\305\247\001\2432Y\244\277\372)\332\356\177\234\243\277O=m[\251)\221\277ST\376\336\316\326\262?\225b\273\333=\252\254\277\016I\347.\027&\271?B\013Z`ur\224\277\253\"\017\204\3645\254?\225\025\243\324\377\276\252\277\033\036\316\214\363\250s?QGj\245V\021\266\277\214\302\372\254\332\366\304\277\204\243\311\354\354\206\270?\247\266e\207\006\364\267?\376!\253\n|#\211\277\261\025\256\331\264\233\246?\365\272\2015\320(\241?x2\243\267\347R\201\277\350\351\006\376\325?\206?\242\250\206Q\305\304\233\277\r\036\2215\231\243\272\27719\312\356)\341\240?\343\311B\302( \277\277\222v*Z.rG?\213\177X\010j,\242?\221$J\352\322\030\252?\336\017\025@J\006\242?4\311\277x\231=\240?w\037\206\247U;\252\277\007{\3532\373\005\270?\266\017`\250\336T\177?\001\230\215\037\204\356\226?\235e\332\347\000\374\246?\362\216\306\262\256\333\223?F\377\312\317\204ix?\221\306\375\272!9\237\277\225(\232\020]\351\276?bPX\343x\215\251?\032o\177,\022\006\216?\333\3528l\271\000\251?\311\371MK\010Ni?\004\004\241\225L\026~\277\017B\202\215\266{\250\277[\017@\177\275\234\005\277\274\324\350\272A\337\246?\324\353\345H\225\037\230\277*\311\223\307\221\274+?\245S\203\316\302z\231?\304\007\016\324\246\213\224?3\030\326\371T\337\243? \260%U\336\202\270?!\010\227\005m\250\261?\336\001\216\3611*\226?/\2121w\305\260\240?\014\001D\317^V\267\277\226\020\317W\236\260\271\277\310n\201\216\ry\207?M4\321\263x\256}\277\365\242;\"{1\252?P\225\211\037\001\311\222?h\263\017\3231\313\242\277\274\357y\230\204\r\241\277\337\217\253b\335\002\273\277\305A\345\\B\246\207\277\375\366\377\355\023_\261?\341\341V\352\205 :?U\266\200\354h\247z?\346\177#\222\021\205\217?\272o\210\021\247R\272\277\332\260\274\202\017x\257\277\253\230\034,D\016\263?\007uz\227_\305\301?\316\342#\344C$\232?BR@i\002\256\261?\022\311\365\346\306H\222?\235\330\022=\241+\242\277\222\251g\275\263\321\235?r\322\330\301R\036u?\227#\225\220\003p\202\277\361\374-\366\231\002\266?\353\256\321C\257\000\253\277\"\265\177`\377M\201?\315\224u\210\312|\255\277!`\020\211A]U?\023\223R\255\206+\267\277N\266I\310\342L|\277@s\326\332\023\220\272\277o\355\3340\370\310\205\277D\016\255+\016\214\244\277w}\023\024\215\200<?~\234;\273`Y\263?\255\230\026\350\346.a\277M4\320\003`\335\234?>m6\216\231\230\244?IK\244rhU\210?O\2428\211\252\t\251\277\337@\271\361U\227\242\277\302.\244\tp\251p\277S\310\220\352*\252\263?\264\217@\ny<\271\277\347\242\3649\347}\204\277\306\262\246\270e\307\261\277n\014$\003g\317\246\277&:\2710\323\336\214?m\013.\212\263\357\227?N\037\361\325!OB\277/X3\025)^\225?\r!cZ#\350\254?\t\332E\377\001\036\207?\321\240\374T\230U\250?\343\316\304?\332\353\223?wz\211\247M\302\235\277\204\367f\340~\352\270?U\324C\007\216\272\266?<\032\002\346`\271\251?}E\215Kh\324\216\277\263}\374\0257\213\245?\262\\\000;2n\243\277 \206#\330\321}\243\277P\224\037N\315j\230\277\203\355\302\250\277\224\227?\ne\335\354\017J\260?\3730\272Rf\275\260?5O?\334f\215\252?\356\034x\213g\021\274\277}\017\250\276J\360\245?Ml\227\360U\306\232?\2677\302\2536x\233\27789$~\240`\240?\232\372\003i\375_\205\277\223\347\303\345\261\032\240?\022\031\024\007\246\021\264?\213z&\270\365!\244\277Y\374Z\007\232\370\243?\267\027l\277\211-\244\2775\"?Z\2576\266?\003\275\022\336\362\273\250?\024\345@h\240\272\206?\376\300^<T\036\204?\225\210\030\232\334\202\277?\204\222\001\271B\360\231\277W-\\-Yr\261?a\361\304\335\224ih\277\304\200n\345SU\010?{&X.\315/\237?\237\004\016\234p\200\242\277\235\360%\317\310\235\265?e(.\033&k\261?\246\257U\266\210\223\240?nE\020\032h\241\240\277\036\017\341\003*\366\226\277*\231\341\324B\2015\277\252\365D\322\307\261\271\277\220DX\202BG\240?:@\301\345\t,\244?Xto\307\311n\255\277e\026\342\374$G\260?!\267\372=\211\302\223?\275\004\236\306\275^\262?\320\221\250\0206\304\226\277\216\200A\030\267\362\241?pk\034L\305g\250?\225[+m\321\255\266?\304\014w\032-%\271\277$\022\007\264\220!U\277\307,\216\242$4\240?M\016/K\326\205\253\277\356x\2315P\221\242?\372\314\021_n\346\245\277\304\342\245\3003\273\227?0#\034\351\204\025\246?=\233\002\362#!\265\277z\317H=/\371\227\277N\261B\232\224\354\263?z\026\245s\314k\267\277\232\r\372\355\276\013\257?|D\310\337\363\332\242\277\274\251\262\314\2138w\277(\000\014\240\224\351\230\2778\323\370\253\266h\240?RM\341\216\255\235\245?\374\211(\025\024\234\254\277\260\262\244Ms\261\264\277\3635v\330&yl\277\312C\255By\325\226?\007AR\327M\315\272\277\035\020\215\250.\020\273?\314K\355\344\272\362\244?\345\347O\267\306b\244?\034|W\320A`\261\2776\203\310$\001T\231?x\025\262\taB\254\277!\301sF\322\227\240?#\"\206\242\202\201\252\277i\224\300\026D\331\232\277&\226\264<q~\240\277\310-dw\305;\214?\253&\342;\335\326\231?\302t\232\374\377$\275\277\\r\352\205\n\037\252?\003\371\316\022.\010\256\277\342MreN\343\242\277[[\264\020u\267\271\277\024\355z\226W\211\205?/\263\352z\276!\263?\3674\321 D\001\215\277\206\337\343\330\372*\177\277\275&\241<6w\241\277\266w\007\274\206[\230?4\310%\212\364\205\241\277\365\337\245\353U\245\244\277\235\373\234\200sM\240?\177\014,2Io\250?\330\337y\027\245\263\221?\221.v\331\342\275\271\277z\"\1773)A\233?/=\304\261\212\245\210?e\272\"\205W\217\223\277\206\243\226\305)\332p\277\312`#\005\006q\266?\273\214r\371\223d\245\277.j\307\367i\r\247\277]u\236\366S\333\260?\341\222\247\302`!u\277&\364\245\372\333&\243?\010\362c:`p\262\277d\372cQ\304\337\221?_K\215Ix\371w?\000\322TU\220P\240\277o\234\252M\341\203\222\277}\253FU\030\367\200?F\350E\200\300j\227\277TO\362\315\243\374\244?K\032%w\273>\250?^\366\254\346\360\256\232?\271\003\247\021\256\233\205?\266\343\243H-\271\221?\2738\323\215\231\324\263\277A\006!+\"\n\252?\322\343\2343~\016\244?\241\270\262\375\021\310\244\277\201\225\217^u\363\244?h\221y\373]\233\256?\216\231Y\002\373\253\260\277Am{\302\373*\212?\217]\311\031*\204\276\277\217q \006\202\313\234?\246\327\004uv\364\224\277\016\014\020\353<\237\250\277\333\007|MCU\227?\301\353\204<5\304\241?\357h\257\'\346I(\277\300^e*\273\271\263\2779\373\014\261]\304\241\277>\342,\256\266\270\256\277\221\316\304\036\346\366\233\277\253\207\024\256\354J\266?\032o\250\021\001\262\247\277\002\320\314\212\204\'\241\277\213\376@\303\365`\266\277\037\010,S\002A\224\277\240\267I\223\367\374\237?\342\320\333\267Op\264?\260\333+\241b\305\233?\332\010\243r\3463\237?\363\314\230.d~\241\277\024\034\345\365\277\007\303?\217M\345\357_\247x?\244\344\240\024\304\026\261\2771\234T7\261>\257?i\3365\257\212\346\202?\007\316\324\005\234\362\244\277\376N])\340\n\251\277\262D\025I\350\222\251?j+\315\227\263\254\224\2770\245\271\320\341tv\277\033\032\243\340;\253\261\277\327o/T\303q\233\277\243\221\215u4\334\252\277\360\252!\014\251\303\227?8\230\364x\366v\265\277\035\315\265\310\375R\261\277\230\341mH\312k\222\277-\273\250;\230\241\227?\360\240\310\\3\261\231\277\332{A\333{,\264\277}p\227\314K\205\250\277}\207\006?\273\236\261?\203\207\020\240\271P\240\277\331\236Sh\370d\216\277\336\374\275\212Y*\274?O\377<J\366\273y?\224\326\305\310\036\304\200?\361q\322\353ys\252?n](\206\325\307\251\277W\325\024\332\261\213\241\277I:\210y\223+\236?a\255\020nr%\270?\017\221@\016\263\037\217\277\300\0225\tf\310\245\277a\266\221\312hc\252\277\367\266\020\3469\002v?t\n_e\324\355\224?\235\021\':\376O\247?7\013m\330\234\211\302?\205\317;\377\305\017\253?\177\035\274t\025\324\277\277\340\343\2022\350\347\260\277\027\370\216\023W\207\271\277\247\222\365\371W9\204?\007^\357T\376\303\226?oj30\262u\203\277\2406\372[w\215\232?}V,\307\324\t\226?l|c\310\366\005\260\277E\206\237\373\220\221\244\277\256\2167\240\343X\245\277\204\\\376\225\302q\240?\336\313-h\305\373\223?\006\260\272]\352/\274?b\357k\354&\232\202\277\001\223\206S\310\344\246?M5\367\263x\324\265?:3\234\373\022\255\210\277$\003nH\352\274\242?{\016Q6gL\210?X+]\256\021\313\221\277SKERm\014\257?\022\016\244\275\375V\254\277\205)G\334\002\240\271\277M\005U\216\004\240\256?\267[\177\266\216\206\231\277\342\327\026\353d\201\264\277\000W\347\251\207d\253\277\207k\354K\201\254\206\277p\310\007\014\351\346\222\277d\332\370`\347\030\225\277\202\306\370\212J1v\277Cq\200#Q\325j\277\'\013\206\355\006\036\301\277\301\364\203\356\344\301\264\277\004\342>q\366\212\267\277{Kv\354\372C\247?\020\234}!~!\300\277\021\371\257l\250w\220?;1\236\024v\244\256?\'}\006\032K\272\213\277)\327\021H\263\243A?\363\322\201\242\201\212\270\277\227\250F\254\306\261\245?\335\276\213\350]x\241\277\321Yg3\322{\217?\256\264Va\302\234v\277\'\350\013\206\216\001\200?\374\373\177\033\342\244\207?\023\275\327\332l\330\234\277\206\264e{_\242\226?\350\367\374AK\212\240?\204\216S0\370.\247?K\217z\035\242N\271?\315\272h\254f\000\261\2772\005S\017\3735\237?\276\007\267\013\264\271\226?\372\375\337\233\312\036\240?\357`\357;\205\332\251\277?nU\006Y\206\245?\217t\253\347\025\243\230?\224_\230!\343\357\254\277\254v*\233\375A\277\277\177\361n\226\276\302\240?\nn\"\303\251\267\213?\245\022\345\363\354B\267\277U\226\032\207\255\000\253?`t\006\264\020T\257\277$>\310N\364\354}\277\005\247& \312?\270?\207\357O\030\272a\260\277\253\022\370\224\001\270\253?\324\376\035T\317\037\267?\256\333\321\013\n\214\220\277R\310\361\374\177{\246\277\371\033&-1\030\230?\003I\204t\213\376\233?\315\2079\n\257\001\250\277\207\235Fm#h\211\277P\203\217_\237\266\262?\254\254a\206W\367\257?\233\363_\257\215\336\220\2773\200,W,M\254\277\035S\226&n\246\253\277\016\376\017\253\'\000\252\277:\\\353RGPP?.V8\005\226o\263?\225y\245N\312kr\277\234\367\0220\2709\250\277\207\243\333\013\233\361\274?5\215I\261\367\235\244\277\275\232\310\221\013^\242?\006b\024\264x\264\236\277\317s\362\374\226\266\265?\275%Aq@z\224?g\3568\374>\360r\277\356\271T\203\222E\264?\215-z\177\320\244\263?,\333^DU\367\260?Ds\245\260\336\213o?\257\226\"\026n\310\235\2777i\267\2525\206y\277\322\374\206\237O\312\301\277\010\033<\200\210s\251\277\225\370\232\244I\033\253\277\240\257#\226\020\r\300\277\013]Tk\314u\223?\307`+gz\364\224\277)\244N\324\250Rr?Z<\300\361\023\343\277\277\257\351\230O\215\244\240\277\234\220\266\233*\321\225\277S\346\202g\006\343\300?\034{\341z[\317|?\020\016\353\257Q\275\263\277\266\027yw\370\035\224?\222\017q\213=\241\255?\276a\005\305\233\357\215?.\027\327\037\026\347\241\277\357Qi\262\335\201\230?5K[\252\270\353\262?\022\0050q\004\325\225?\221\211\245[\007E\242\277y\234\230\337\261#\267?\240\220\367\2767\222\263\277{\303R\370\037\320\204\277\256Gi\226\013w\254?vW\305\352\251%\252?>s^\224\243a\272?\300\016\353/N\375\262?\032\re\r\323\317\204?Q2\345\377\"\327\244\277\333,\032a8$\240\277\027\024\035\310\032\263\275\277\227 N6\331.u\277=\361\0162\330\265\237?\220\257iO/m\220\277v2\333\357o\262\254?F5\307\352\244h\260\277C\374i\272\213\236\223\2772\341o\331\223?\223\277\313*\212$\354\340\232\277\232@\355A\347\340\221?\221\265z/$*\250?u\365\375\020&y\267\277#\014\257\245\261\035\242\277\340\317A1Q\206\263\277\'k5\236\243~\264?\232qCM\221\261\264\277\203\245y\304)m\240\277\334R5\177\204\341\200\277i:\027\240\2074\271?\304\337!\006\254\352\265?\276:\177\326\231\354\265?\353\320\023\244\373\254\221?\'\3330\313)\202\224\277\211\\\247\327~\370\253?2\01052J\035\215\277hY\327\370\307T\241?\346\025\247\nU\253\254\277\355\260\273\357[\002\227?\233\036\326[\374\316\250?\272_[PN\334\244?K4Z\210\241\030\261\277\3632\034\242\246\224\271\277?:K\206f)\200\277b\220\031\335\\\031\240?z>\240\000\024k\257\277\274(\005\214\337B\242?\336\001\251B\356\321\204?\360\330\2038\306\361\200?\016?\010\360\030\017\263\277\031\266~V\003\324\253?1*\217\263\034\216\261\277\360\035%\177]\243\262\277\237j\200\020\303\304\243\277\033BMQ\326P\266?\371\246\2311\210p\240\277\203w\220\2134\373}?T\0160Oa\300\257\277\302\310\035\311\234\352\233\277\r\336-c\210\026i?\336\033\222\005]@\264?\262\224\355\024\310\270\253\277o\352o\226\273O\241\277\254\374\347\002Unt\277\2475\026$\010f\272\277.\270\244\355\244-\250?xq\000\233\023y\204\277\267]\026\303\2738\262\277\221\305\366n\267\377\300?}\256H\374E\260{\277\342\260L\256\275\373\241?\340K\362\243J.\226\277\232!\021!DV\257\277u\345\213}r\002\240\277\216\333V*\027\322\255\277r\006\035\336L\214\240?\213\376\262\274\335\202\255\277\004\356\033\347\334\251\245?G\345\332\331\302\335\222\277\341\237\236\253a\261\272?\030\273\270\202\026\254\223\277iy\356xj\234\224?\344\252@\003\016\371|?T\200CDS\323\247\277\346\226\355Z\307.\266?\252\274Z\222\221\246\230?\327%\362\363.\007 ?u\032\017\213\250\005\252?\210(_\250b\\\226?\376\232\242vF\211\236?\317V\014\034l\337\262?\347k\016\347xCl?\243?\014\332\345\233L?]\346J=N\001\220\277\277\303\205\347oA\213?\345\177,\231\210z\263?$\204\271\257\315\266\223?\307L>x\220\204\217?.+\251\364\006M\253?\356\rL\rw\206\223\277R|\251?Sk\261?$<\267S\265+\260?\037,eXo\260\265\277\232\354\030-\223nB?(\235c\324\026\362\234\277\"xY\227,\350\262\277\377\337\026\014\315\267\242?\010g\271\257\230r\275?\356tl?xP\234?gp\2318\322[\301??\242k\357\025\257\251\277\246\324\227\315\253\350\230\277\327\273n\304&\221\217\277\263R\0367\272Nq?\255v\214-0q\241\277\373\237\373V\216\334\214?\255kF\342h\355\202?EO0\307\020\037\225\277\347\333\310\213\243G\232\277\322~_z\371\013u?\347:\245X5\021a?9\353T87\021\245?\252q2E7\275\241\277p\237\366\247\341,\256\277\304\351\007D%\021\221\277\024\322c4\361\330\253\277\322\212\332l\036t\267\277\005B\233\233\234 \241\277A>\340h\364\301\304\277\305\277p\233\2405\201?\324\325\277\264jV\270?p\005\030c\210\305q?\214\315\ncrq\214?\217\211\366\301M\352\221\2770\214\221\027-\223\245\277\273\212\030\321\251\375\244\277\022H\3438\233\343\235?\354\335\000\031,\342\240\277\225q\r\304\207\246\232?\017t\353! \325}?\377\312\320\253\221h\265?W\277\360|\211;\245\277\304\357\347\307\241\363\234?\330r\227Ch\030\177?m\362\017\177\300\220\273?Y\200\217\216\365\341\306\277\363\317%*\243\323\223\277\002c\\a\225\240\233?\231\327#P:\003\231\277\233:\332\363?\017\227\277\\\376\027\'\253\"\223\277m*N\3343\003\217\277\325\233\267\303\362d\260\277\353x\315;\370j\250?\3669T\314tj\230\277\006\333D\355df\217?2d\343c\325\342\253?\206\001\245\014\363\353\266?\374\031\343\276\021`\254\277\262\tm\274\237h\265?\033v\027\375\361\210\273\277\036\223U\315s\326\262?\267\010\362\370:N\231\277\246\324\030\330Ij\226\277V\301D\201\364C\225?Y\030U\236F\220\234\277}\317%T\251\017\237\277b\014\020\235-\256\245\277\357/\343\336\022\212\004?\347\003v\212\223x\212\277\302\303`\214\257I\206?\254D\3213\002T\274?\221\225`\307N\2139?T\221l\226\323\370\204?\262+\326_\273\345\204?\250\333bm\"\366u\277\302FZU\010B\267?\264\371\323\246M\332\261\2776$\201V2\255\254\277\370\223\273\007\302\260\202?k>\332_UI\210?9q\257]v8\225\277\200\370\020 B\350\255?\375n\210,\341\210\240\277\313\247\373R\213\272\275\277\034.x\301\334\245\237?\370\214\036\310P\355\303?y \326\215\206\n\206\277\306\2130\225\271\204\234\277\206\323\365\351\003x\241\277\375\212z\360\213\305\242\277\323Y/\270u\307\277\277\264\314C\210\313\301\254?\304\246u\320\317\335\201?c\303\212\2624\214\243?~\r\327\366\'\341\244?b\231\tA\207k|\277\271\215i\270\351\004E\277\036\371\301\234\327P\236\277f\330\332\233\251\336\261\277k@C\243\265\242\265\277\022\272\247\n\374\302\253\277\363.ck\306E\260\277.\0237\315,+\207?\014\355\365?)Nv\277\0354>}\266\265\252\277\037\356\267H\225\217k\277\376C\221\313)1\214?\340#`\177)\333\251?\225\363t\346\334\300\264?1*\363\317H`\245\2778\016\224\303\336\300\252\277\032\205o\3272+\202\277\367%\363\363\355\260\200?\245:\0259<)\247?\025\237\023p\306Dv?Yy\237\001{\000\227?O\254q\010\010\014\220?;\306\342\373\335Ir\277@Y,\255K\016\200?>\322#z\372\304\257\277\322UDr%\007\270\277\224K\320\307\333\363\252?N\312M\004ex\253?_:j)\362\024\224?\303y\250\3102E\271\277t\232\331knj\261?5-\261p\207\262\254\277\270\000Js\353\036j\277\351S\270N\n\236\246?N\315\213\211\346\005\227?\225\010\220P\241L\256?\224\006\321\246\266\256\241\277\374\226\207\217\272\013\266\277F*\321\225\000\356\261?{[\025;\354\002\243?t\254\031\336\314\370\260?\215*\336x\013\200\253\277c\r\003*\224\220\272?\3477 \212\2251\257?\016\001\366l\013N\200\277\317\003@\246\215\276\300?\301\301\223\007\355\327\266?>\333\004\311\301i\253\277\177\267\3222\302\376\264?\211\222\220L\372\220\262\277X\361\307\376*>\271\277\315\324\177\244\'\177\256\277BZ\371\014\214\313u?\213m\312Oz\010\271\277?a\032\351\177\203\276\277\373\320\3653\317\306\244?>\263\230\032\204\\\266\277\337\300\277\241\323\036\261?\035\240G\337\304\334\235\277^QR\316O3Q\277\305\251]`ei\260?\3123\315\2166\275\215?\273=\361\304\375\265\201?\200[D\331\227\316\237\277M\364{\222\003`\232\277\223\370:\310\237\022\233?/\002\000Q\236\301\242\277\217\301\2054]2\243\277n\0146\311\225)\233\277\022\335\273!\322\037\235?+\367\014\352\255\376\224\277\347\242\241\033z\262\260?E\262\036\232\271\t\240?F\0135m\346\356\260?R\307k\023\265\313\231\277=:\231\227\022\300u\277\377\337\017\206G>\246\277t\374eS\265>\223\277\3514~\242\224\025\254?\206\r\310\030\005g\244?\275\307\006\341G$G\277\306\306\231\232\3557\243?K\031\nY\251&\234\277]\205\037\232G\265\225\277\314\344\362\020\201{\234?\213\376K*\250|\220\277\003\211\335\224\244\031\255?o\345\330\343\331\273\230\277\007a2\277\330\270\252?\340\271\377\374m\320\222\277-7\202\020\027\236\236\277\370\30340i}\231\277M\340;pI\366\215\277\303\242\202\202\032\316\270\277F\264\315\2033#\211\277gN\347j\3215\241\277\253\r\271\352\007\222\253?!s\347\217\271\241\253?j\007\217\264\277\214\266?k\315<l\344\314\223\277\331\255m\2775Y\300?\201\275\275\311\336D\220?\031I\256=xp\260\277\217>\243\3427\230\243?\342@c\275\301\213\261\277\201\315\335m/\344\300\277\320\251\025\t\374\016\237\2779\301\375\324\306\261\251\277\022\200\244L\225f\260?\255\326\300\335\201f\247\277\250C,\266\020\232\242?N\306\242Yx\240\203?\r\340_]\037?\263\277\223\362\020>py\256\277\335!\355\21757\271\277\r|\323$q/\300\277:\201\337\255\376u\202?\323u\213k\364\350~\277\014\231\376u$Z\254?\277\013\367\254g\031\245?\002h\005g\301u\267?\352\213O\325\312\021{\277\210sy\334\017\016\264?\036\353\027\335\2120\265?f%\341\224V\344\225?\t\230(\231(|t\277\207\245T\271\262\331k\277\255\375ZJot\262\277\016\r\245h-\014\265\277\362\351\305bY\250\251?\037\231\315\037)f\301\277z\006U\230\342\010\247\277\341\026\331hO\315\253?\220\024\\\0209\221\263?R\247\235\240.\351\257?\366\3652\323\311\220\206?$\264\2511n\300y?E\230\3109:V\244?\373\222Y\236K\367\240?\336\206\013\252\303\010x?FQ\250E\t$\226?\016\261W\244*\305\227?\265\201\252\231d\213\263?T&\"\265\337\335z?\274\250\313Sl,`\277tL\251W\215\366\260\277v*tW\362x\261?\245\272\023\256S\322u\277C\305\316T\273\323\275\277\027@\335[\373\375g\277\214\332\261t\223\333\260\277\002\243c\375%\'\227\277\274\274\227\330z3\244\277 so\036\230\217\205\277E\024\261O\031\344\243?\312a4_\236\365\233?\365\022O\313\205\033\216?\362.\221\352\031\301\220?\347\025\372\242m\274\264?RB\230\364J\023\214\277\203+Ux_\271\260?\020\212\361\007|]\255?\276v`&T3\272\277\006\242Ye\255\253\240\277\345|jZ\206G\257\2770oi\370\013\276\243\277\355Yq\261PNp?\302p\326Zg\270\241?fN\031q\334\023\227\277k\225\344\234E#\250?\014\016\263sVKs?\247\033JpN\001\220?\352\356GN\234R\266\277E\333\313\303k\245\260\277\374\265\253\026\353\335\255?D\034\362\027f\265\241\277\326\"\024\277B\257\251\277\006\316\264\3123\263\233?N*\226&7\335\226?\370}\206\277(\251\263\277V\'\233&\332y~\277\314\303B\271\233\277\273?\236\214\027\222\321m\230\277\014\305\236\303\355X\250?\204$\030\257\031\220\210?\337\356\244\347\2763\236?ThV79\330\252?4\265I2\324\367\201?\375\310\250\234\306\240\260?^\320kJ\357j\261?\343\222\025\r\227\"P?\022\\\221B|}\226\277\177H\005\370P\310\254\277F\313\257j\306\357K?\350\\\261G-[\262\277\024\215\351\3267\224\257?\311xw<\253\020[?\003\007\316e-\177\243\277\242\"%r\004^\224?7\334\"m\330\034\262\277\311L~\274\306)w?\232\304\220\234hG\245?Z\264l\326\216d\263\277\273\000\204w\333\017\265?\000\360\371\r7 \274\277\\=\224y\003\nw?\243\261\r3\251b\225\277\312\260e\322\334\220\240?:\261\031\347R\274\223?u\340\306:$b\262\277a\r\246\332\343\376\237\277\361\250\030\334l4\235\277\360.D\037\217\203\260\277\232\'\0035-\330\246?b:X\336\300E\242?\034\2744\033\032\322\221?&N\274F\272R\242?qaP,\323U\206\277\231\264\255\334\217Jx\277\314\275\235\353\207\276\261\277Q&\220CSpq?\265\266\0106\024\300\242?\272\2241\312\342\301\275?\251\212ut\016D\260\277\230\035W\335\241,\222?-\323\010\017w\356\210?V\333\366r\226(\243\277\252\310\370y\347Y\233\277\303\001f\242\253\302\246?v\253}\241\003\303\245\277\362r\363\347\177i\246?\270\305\336WX-\230?\253\257\374\301\243\266\260?\366\003]\347n\3728\277\221\356\026$\264,\261\2779N\362\267\310o\247?g\240\257\336\366\203\210?\017\341\314%?\212\222?\331\243\216f\013\233F?\rm\351HT\226\262\277\270\236*\225\363:\242\277\2030\252\nV7\236\277_t\321hS\022\265?O\025\007\250F!\242?\225h\234\344\'\342\241\277/\350\352\221r,|\277\225Yc!\376\225\302\277\346\272\034\233\320\223\220?\213\'\010\361\t*\264?\"&\275G@\311\227?\302\222\304\257pi\255?9\356O\2109\225\252\277\030\277\201j\220\010\230?\035\267jmV\326\262\277T\213\3360m\027\211\277\350\n8hMR\221\277\261uO\345O\347\274?\323\314\326T#\345z?/\010\345\313\346\201\240\277^^\222\006\360A\221\277\021S3\266\350\315\262\277==oD\251\327\213?\250\201\320-\000\202\252\277AU|\243\324\307\221\277\310\034I\315\023\325\251\277U\2566qW\355{\277bL?K\363\025\241?\274\373\210\221\372e\257\277F\376x}\000\215\224?\275;M\340\204\236\250\277\243A\255A\375\350\273?\007\\H\341\202(\225?\240\236\357R\222\230\231\277\376\361\231~p\324\254?\215vKZ\326\221z?\266\370\020h\216\365\252?\336qXr~\205\220\277\346\367\200\007\214\332\224\277\335\205\033.i\032\210?A\240\343YtR\242\277\356\353~\237\213\205\231?\352\374\260\000\377\257\244\277=\264\306\256^O\217\277\230\227\364\355\353)\251?\224}bM:0\255?3\002\312\324\266J{?\375\227\360\032q\261\251?e?\r=\350\317\254\2774\201\034\310\360\027\237\2773\255v\035\301H\263\277\364\223\013Q\001\244\220\277\237\325\003b\222\247i\277\371d\363\024\205\225\230\277i\017\364\345\212p\262?\266\303\324Fm\016\225\277\321\277E\001Z\377\261?4\235m$\312\013\235?lC\2757\034\246\243?9\275\317\200\035\037\231?\025\037x\342\025\270\250?\372\216\231+}\347\224?\222{Z\010Z\253\234?\017\216l2\273\302\230?uqz\357\363x\242\277\217)C9\3560u\277\255\376\0172\254\033\266\2773\2308s\023Nn?\334\356\324Y\316\020\237\277v\270\252\233W\360v?\350P\021\211\267\027\255?/\305b\316\364\007\261\277:\215\340\365\013\"\264?*\214B\373\347\223\211\277\232\336\371\222E\243\237?\266\207h\374\262~\247\277\007\264\270&;\010\242\277\0215\030\346b}\267?\232F\2130*\n\225?7sxa[\021S\277\032\206\317\350l\311\264\277*\3414\213\316\216\244?M\202\242\337\334T\206?\200_:%\023\306\262\277\253\236\"*\305K\204\277\361\347LO\351\221b?\3034R\332pY\255?\264&\3320s\237\216\277^\3166>\272\217\264?Y\231\032@\211\246\243?\0135\203\214a\376\247?\364\335\267P_I\227?\332T1.\212;\265\277\260\005\365\210\370\325\223?(\201\234\324\343\221\223\277?:\311\250q\246\264\277 &_\341\332^\235\277\371\027\304p\217d\246\277\334\215o\322\207Q\275?\262\217\240P\266\305\243\277d\334_4\366\241\234\277\021\375\r\232H?\253\277\274/%\2000\336\267\277\251\272\222\305\302!\240?t\t\300J\212\273\262?\360\347lH\277\236\262\277\273\302\241\024\226\336\241?\225\306\256\016\370]\261?\310\257\305\3672\212\230\277\300\2439\202H\346\220?\317\006\013\277\000\221\263\277>6W\016\255\340|?`\273\317\005\320\257\246?~-!aa2\220?\267\\\216\343xm~?{\264\370\333z\325\254?Tn\204\033\252M\253?@\016y\267\246\324\226\277D|\327\255s\352\251\277\256\022\301\211z\367\236\277_\244\271\233dB\232?\346\302\202\253\256\306\256?\242\025\025\3471\030\260?\264\353^\373\206\372\211?\370\355\324\177G\254\233\277[\'\235i\3007\255?\311\345\320\377\010\301\244\277\324\t\027\324\347\271\245?\013\204 \212\214\335|\277\260\266\321,\274j\212\277\005O}\225G}\265?\034\024>%\375\324\200\2775\304\300\225z\303\222\277&\nN\211\031\304\250\2778v\331\3649\251\225?\224\341\036\223\3169\213\277;\244\206\274\227j\245\277+6\2220u\227\240\277\271\236O5I\252\263\277(c\356\303\335\236\241?\221\353\202\r\273c\232?Q\264X|\324Y\236\277\t#\341!\356\n\250\277\355\3419\331iI\233?X)\245HX\215\271\277\350S\370\247$t\274\277\235\353G\t\303\275\234?]\247dS\243\332\253?3\025\235\004J\201\272\277\002\253\264]\003\016\237\277\233\340\021d\377\232\275?\377\\\342\361O\211\242\277\360\340\035\324)e\257?J9\273\244Cu\227?\230n\376%6\031\210\277l\031\217\253eo\247\277k\377\036\272\356K\247\277\305}O3\253Zm\277\257}x\372Bw\267\277\323l\013\220(\316\261\277\005\362\223\t\273\311q?\\\263\362\201\274\255\251?\tYC\341\001\221\222?j\2620\024\374Wu\277\'\350\013\351\345\204\253?\202\263\206\220\207\267\243?\323\220\350\341\327\001\221?\367/\305\031\240b\247?#\340j\252\260\365\215?\312C\315N\237L\244\277\274\373\203\031:\"\211\277\246a\366\307G\261\300\277\223\307T\344*=\227\277\270\306\\ \306\343\263?6qk\217\312W\246?\350\350\202\205\331S\230?\314\331{0C\273\227?\\\242\3015d\362\177\277&\242\023O\2464\237\2772\232\356\261\205|\263?\341\037\303F\345G\211\277 \350|\000\201\371\246\277ao\365\244\004A\244?\325\334\272\026?\213\264\277R>\220\201\303k\241?\370\265y\347\033/`\277\0237\235\235^\237\275?\24775\262X6\265?p7\301\354y9\210\277G\356\270\003C\361\252?[\r\246\361\253]\244?\357\250\31610\'\275?\276OQ3@\177f\277\230u\326P\320\036\223?\302\373\313H7\232\263\277\345\375\037\360\306\\\222?\tUM[\314\365\276\277\375\023BA\r_\250\277\022X\3061k\221j\277H\314\303A\377\356\271\277:CM\016_\201\255?\016nPW\326Y\216\277\356\227\335\271K\357\226?\004\363W4X\323\216?#\037\006\361S\036\302?\276\014\376\034\207\231{\277\253\231\311\3764\217\213?\001\010\326\202\352\330\237\277U\370nY\264\002\242?\301\037\005 \225\345\266?EC\242\206\243\352\251\277\234mqj\300H\203?\202\216\3638a9\220\277\010\321\341\205\t\321\276\277\222\320yDz\243\207\277\300\330\037\330%\310r?\264C\247=\377\356Q\277\033\"\362(\374I\222?\243f\257\305I7\237?.~\266z\215\346\024\277\303Z\232\343\016\211j?\014=\355\033\332}\252?\357\334\305\244\317\312\223?\356\242\035o\357A\264?\334u\366\265i\200\244?\201\2146\322:\"\226\277\013:C\367\210p\222\277g\241\005\222\2037\231?\367-,<f \257\277pX\326_\275\366\231?)\342\233$\377U\221?ZN\272\257u\257~\277\205\255\222\274\245\221\252?\336K\006\305\243\351\237?]\330\262k%^t\277\2703\355n\356\353\224?g\223(\315\360{\252?h\035\312\237\225\t\257?\210\033r\253\020H\260\277\\\317\347:\260k\246\277\270\373\')v\036\252?\300\005\267>\242-\256?\236\301\231H\352\275\303\277to\206~{\364u\277c_\277:\345\356\265?\373\030\036\373\016_\222\277r\000\357\373u<\232\277\273M\276~\350\000\253?V\r\005\327\322\320Z\277\"\362\3608\244~\215\277(\256x[\360\202\272\277\346\031I\347\334B\251?p\337\216\271M\254e\277\263#y\211Ns\235\277h\215\333\372\373\227\265\277`\323\233\273A\371y\277{U\375\225\313`\221\277\215\020r\344\034\024\232\277\200\347\003\250\022:\237\2776\225\030N\'\263\216\277z\311\267w\033Cw\277\031o{\222\311i\260\277Y\332?:\354x\255?\372\352@N\362\242\254?#\3647\216Ws\250?\n\334\247G\3230\260?E\336\024\214\265|\264?[\370\3231\005U\227\277 @\243\036\037!\271\277\234^y\2137$\224?\366\273\003\177/M\243\277O0/[T\004\231?\036\227\267L\272\263\302\277\332\3365n\n\370\261\277\372\363\034\317\252+\263?\312^\374C;\352\243\277\304A>\206\241\222\260?\340\201\233R\026\037\202?\207\2650zt\213\256\277V\230!o_\355\210\277E\214au\274\003\236\277\330\307\223h\234q\264\277\257#\224Gx)\266?\346\262[A\344\022\236\277|\177\331\r\370\310\220\277w\030f}l\206\235?^\027\035B-\024i?\217<)\345\2032~?\263k\232,\340\374\267?\244\346\307\370:Tu?\350q\010\3677&\237\277\312\350\337\231\316\034\262\277\270\224\003=\031\350\232\277\212\\a\022J\276\\?\032S\341\357L)\257?O\313\300\227:e\215?G\254\314\203NU\243\277\335\037\322z\333 \212\277\335\220Lf\214A\247\277\023W\232~\273u\257\2777\034\367Q\014\034\221?\370\301q\247\246\206\223?/\227_fu\314\226?\306\272^<\242Z\231?\242K;\235\300\212z\277\252\235Z\250A\354\207\277\224.\305\376A\247\240\277\335\364I\303\370}\242\277\001\266\265\314\272;\221?\374\031\256\272\321Z\227\277J\245^\304H\016\207\277\t\314\341qLu\251\277\034\261\000<\306J\210\277}\2008\341\273\237\266\2772\370\\\314\335\037\241\2779|\362oyga\277{\004;9\366\317\305\277\335 \213\363\206#\247?\240\036\231\005+\310\247?\313\321H\247\317u\260\277\354]e\245\347i\221?\342\237\"F\323Q_\277m\323\r]\330\215\256?\025\320\277\035\000\254\207\277|\311\302\206/[\254?\007o&\211Lp\270?Sp\222\316\326\013x\277{\214\267@_\212\235\277-\004\343Q$\315\243?\254b\306\031g5\272\277\211g3@\367\r\254\277\377s\0143\021\002\260\277\365\225\006\317\234_\270\277\031t1\222\302\241\241?G\247\001\007\275&\207?\316R\311I\272\335\232?\336\336\302N\344\363X?A\371]\372\306\372\251?\"4\376\246\240Y\177?,V\350\335\250H\272\277\237\223\355\302\346L\241?\205\034\200\177Q\027\207?\307k\036~\021\256\223?H,R\213\212\200\251\277Q\236`o\023\232\265\277*\307\312\236\357\000\233\277\001.\372\304\014\273m?\321H\002\270W\027u?\276\364W0\363\027z\2772n\254\227\233\246\267?\3178\334\325\374R\241?\317\3226\2519I\266?\022\336\256\325\tc\254?\256\252[\346\245;o\277\244R\242<\314GZ?\014\014&jg\376\217\277\\\002\272~V\226\230\277\337\252\244m\251\\{\277*g\023N\242\025\231\277\006\036dJ\371\330\222\277?\345\341e\024\004\227\277\3131\007\351\312\341\246\277\205q\2134\301\255\215\277\273:C\033\224P\274\277\016\323\2357\'N\264\277\030\271vJ\002\322\241\277)\332\003,61\200\277\324\223\276\370\262\220\246?\223)\365\273\267k\257\277?\235\230\3714H\251?~\345\3705\235\273\246?\323\301\325\361\000\207\241?n)f\273g\021\266\277\301\303\250!\021Ax?\375\367A\376\345\016\262?\020\\\340\275ve\217\277q3\260tp\236\246\277U4>@\277\274\231\277\3028\350\004Qo\210\277s\010\224\\Y\271\261?\357[J\n\203\340\206?\333-\354d\255\351\221\277Z\210\350\371\340\273z\277\255\320F\001\374h\254??\355\254\377\371\222\262\277\334\306\342\325\317\265\230?\355\'\243\020\323\314\245\277\340\352\0359en\227\277\t\3641\316\001\206\236\277g\210x\312\207\322\206?\250\372\302xYq\252?\305,\225\272\200$\275\277\354\242j\322\200\231\241?\026}\366&\214\352\265\277\300\2309p\362\\\220?ac\031\330\334\244\201\277\006\021^\370 \017\240?\372~\372fw`\231\277r\0038\004\200\253Z?>\332\366\306\300\341\224?ooc\014\t\017p?Bu\026\232\332$\252?\204\336\347\273\203\332\233?\313\377\357\364\000yp?\264*U_\311\263\207\277\341\266G\025\207\373\231?\242\315\336;@\270\266\277\362\264\216]\004=\247\277\316\014\333\237\263\220\204\2776\321\2770\376 \272\277\302\331\001\223Z\304\264\277\247\014\260\203\273\364S?T\302?U\246R\257?\236\036\237\032\203\336\235\277\276\204\344Lk\273\216\277\251\324#3]J\300\277|\357\036Q:\336\250\277\353\342\010X&u\\?\033G\246\323\231\361\264\277Z\253T{\310\"v\277\261[\002E1\024\300?}\033\250uh0\260\277\314\244c\216A\210\210?E\324\243\345\231\232\205\277\257\226\032\342\360\261\242?\3768(\036Oz\233\277\202\361$N\361\201\210\277\3056 ,\305\331\243?!\2771E_\377\204?\306\274-y\264n\273?\021\204<\241\267\321\272\277\267\332\240\301X\305\267?\364~\311H\252\n\240\277\270-B\323^$x\277\320\256c\004\313\217\265?t\344\260\303\272%\272\277(\304T\303\210\372\244\277C\273\315\361\020\220\250?\023\333\236\244\340\t\272\277W\347\020\030c\272\275\277r\206tp\2152\247?\305\016\347\312t\332\225?\224\017\333\'\027\337\227\277\230\236D\024n\235\250\277\314\004{\350\350\201\246\277\210Nu\357c\214\255\277B[\340\364\332N\256\277U}\255G!\354\225\277|\177kB%\000\262\277\317U\031\207p\255\211?w\326\226\363\273%\217\277\252\346mR\234\025\246?P^-\3715\261\265?B\364]\332\241\026v?\\l\331\337\354\241\203?@\'\013\206xa\263?\342*|\215\337{\246?\345\252\373]\357\"\220\277\212\225N\261\344\212\260\277\360\250\325\336\034A\256?\320\254\343\007:Fs?\016\353\301_\334\342\275\277b\227u\273\002B\263?\304\3765\277\211\220e?_t\332~\241\260\301?\031L/U\307\251\301?\377\345\006\340c\251\264?V\205h\232\345\211\242?1\257\367a\275_\245?\016\204\322j\305\302\265\277?\265\317fh\356\001?\014\t\336\010\240\206\212\277\351\354\021L\360\327\227?\021\037i-{\267\251\277f\330:\347\265\310\212?Z\353\310\260P+\275?\213*\006\024\227\001\263?\262m\306\312\262\006r?\225\204\036\224-\211\241\277\236\200zX\220\210\254?\031\030\272\321\021)\236?\310e\025\016\245\211\262?z\212x\200W$\251?8\177=\267_\251\211??\327\376\202;v\241\277\261\237b\232\371\346\220?\307J\006\225\356]\275?\2761\031A\000\254\241?\246\216c_\316\035\261?\225\235_x.f\241\277\275DW\237\354\032\272?\356\267\333\372\364\233\272\277\301\303k\024ks\232\277"
      }
    }
  }
}
node {
  name: "layer_0_type_0/matrix/read"
  op: "Identity"
  input: "layer_0_type_0/matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@layer_0_type_0/matrix"
      }
    }
  }
}
node {
  name: "layer_0_type_0/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\240c2\304\374\267\364\2774\231\252\202\0207\261?\236\254\2429\210\243\332\277\332\340\227\244\014\316\334?\353W\365\014<\230\332?V\'\355T\212M\322\277\275CFn\301\364\352\277\330\031\2146\341\300\302?\225\370\223M\330\217\235\277\223\343W\215\324\344\377?\0047\251\357\327\265\335\277%\270\260~\333\311\233?\344,\201\022\244\312\334?}\226\374\n7_\360?\263/\350\327\230\177\367?\031z0\345\220\275\360\277\377Z\230\234\342\264\347?\027\224(\334k]\342?N\362\252\265\031D\320\277\237\210I\350\177\024\376\277"
      }
    }
  }
}
node {
  name: "layer_0_type_0/bias/read"
  op: "Identity"
  input: "layer_0_type_0/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@layer_0_type_0/bias"
      }
    }
  }
}
node {
  name: "layer_0_type_0/MatMul"
  op: "MatMul"
  input: "Reshape_18"
  input: "layer_0_type_0/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "layer_0_type_0/BiasAdd"
  op: "BiasAdd"
  input: "layer_0_type_0/MatMul"
  input: "layer_0_type_0/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "layer_0_type_0/Tanh"
  op: "Tanh"
  input: "layer_0_type_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "layer_0_type_0/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "layer_0_type_0/Reshape"
  op: "Reshape"
  input: "layer_0_type_0/Tanh"
  input: "layer_0_type_0/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "final_layer_type_0/matrix"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\322y\300^\000\275\226\277\344\272\226\205a\345\311?\3627=\177Ne\327\277\321\303\311\321\306\027|?*\321{\t\217\020\313?:\"j1\030\032\273\277\007q^\340\314\257\321?\222\361\2456\367\200\272?g\235\211V\177\306\323\277\026\320w\205C\301\202?2\350\373,\007\324\312?W\001\261\301B\323\265\277\300\337\214\014\245\301\236\277=\305\304\273[\006\262?{^\250\227\247\021\223\277\267\337\007\246#j\326?\241\376Y;\315\240\245\277W\261BL\305(\320?\273\241\217N6\361\304?\325\374\016\023\022\215\312\277"
      }
    }
  }
}
node {
  name: "final_layer_type_0/matrix/read"
  op: "Identity"
  input: "final_layer_type_0/matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@final_layer_type_0/matrix"
      }
    }
  }
}
node {
  name: "final_layer_type_0/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
        }
        double_val: -0.4676774651676667
      }
    }
  }
}
node {
  name: "final_layer_type_0/bias/read"
  op: "Identity"
  input: "final_layer_type_0/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@final_layer_type_0/bias"
      }
    }
  }
}
node {
  name: "final_layer_type_0/MatMul"
  op: "MatMul"
  input: "layer_0_type_0/Reshape"
  input: "final_layer_type_0/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "final_layer_type_0/BiasAdd"
  op: "BiasAdd"
  input: "final_layer_type_0/MatMul"
  input: "final_layer_type_0/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Shape_4"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_18/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_18/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_18/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_18"
  op: "StridedSlice"
  input: "Shape_4"
  input: "strided_slice_18/stack"
  input: "strided_slice_18/stack_1"
  input: "strided_slice_18/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_19/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_19/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_19/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_19"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_19/stack"
  input: "strided_slice_19/stack_1"
  input: "strided_slice_19/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_19/shape"
  op: "Pack"
  input: "strided_slice_18"
  input: "strided_slice_19"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_19"
  op: "Reshape"
  input: "final_layer_type_0/BiasAdd"
  input: "Reshape_19/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_20/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_20/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_20/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_20"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_20/stack"
  input: "strided_slice_20/stack_1"
  input: "strided_slice_20/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "add_1"
  op: "AddV2"
  input: "add_1/x"
  input: "strided_slice_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_21/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_21/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_21/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_21"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_21/stack"
  input: "strided_slice_21/stack_1"
  input: "strided_slice_21/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Slice_4/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Slice_4/begin/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Slice_4/begin"
  op: "Pack"
  input: "Slice_4/begin/0"
  input: "add_1"
  input: "Slice_4/begin/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_4/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_4/size/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Slice_4/size"
  op: "Pack"
  input: "Slice_4/size/0"
  input: "strided_slice_21"
  input: "Slice_4/size/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_4"
  op: "Slice"
  input: "Reshape_14"
  input: "Slice_4/begin"
  input: "Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Reshape_20/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\001\000\000"
      }
    }
  }
}
node {
  name: "Reshape_20"
  op: "Reshape"
  input: "Slice_4"
  input: "Reshape_20/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "layer_0_type_1/matrix"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 320
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\016k8\324\237Zt?\006O\313\033&\201\236?J\212Mx\252\354\256\277\324\334\307\005#\035\240?\300\177\345\332\272*j?(\236\323\026+v\273\277`\250\000\270~\337\250?wF\031u\301^\212\277\336\307\0021\3530\240?\032\352z\350\362\352\266?\013O\211\023s\"\272?#\276\016Y\'\213\241?\223+\007\177\377o\271?\n~\314qc\230\274?\217\271\377\233\216\251\245\277m\264\202\332\217\025\205?\371\226\231\340G\330\241\277,\001\367\210\244\333\241\277\206\324\306\003\337\237\270?g\374T!\365\253\267\277N\3046\224\265[\233?\3148w\211\007\255\230\277\227\362\273p\013\377\233\277[~b)\312\016\236?k\255=\025\324?\244?\261\013\014&Hf\262?\350\310a\234\2414\271\277K9\307^|\325u\277\264\223IG\244\256\264?\273\316\2573\317\351\264?\3761\235\025\014\357\213\277AL>?\246j\271?\272\000>\252HU\243\277<\317\325C\335\357\264\277\320\335\371\336\320\271x\277\317\t\266\032\247{\200\277\223\374\365\337s\371\217\277)\327c\203x\365\276\277\207\335\376\034\271\3004?\0028\257\037\000\203\254\277\017\313=\361_\377i?\301\265\036C\320\315\251\277H{\205\275\242\014\222?\223y\372z\250s\234\277\030P\367\2410\235\261?(\234\324\377J\006\243\277\\1\263\372\334M\241\277\376\301qHa\352\250\277\323\352\345\3429\253\260\277B\253\300lM\272\242\277\346\357\24310\325\227?\273zl\306\032\210\211?5\235C5\345 \265\2776\227$\274\222[\260\277\217\301~}\345\262\204?0t)4>\361\242?\345o\231\204\243\230\210?\021\230\245\2702\037\221\2779-\\67p\244?\212\367\235\252\235\000\207\277\210\177\355{\320s\220?-G\310\361r\253n\277\232\356?\261n\341u\277\005\024\343\300|\376\274\277\203R\025\231X\273\233?v\323\272\250R\252\263?.\226\004\014\316\326\224?\343\265\r\242\320\206\251\277\027\311\3209\215\031\243?\244\336\221\364\223\262\245?\316\361\312\036X\375\254?\236\022\354w\332\021\240?aP9\353\033\377i?\025\311\246\035\321I\261?\321\312\022\332A\272\257?G\322\202\317H\243\301\277\341\004~YP\026\260\277\247{\332\312\315\217\205?\376\342\320\252\016s\267?\377\210\0232\250Y}?\n}\377Z\257\034\241\277\353\245g#:|\230?\2511\302\270;\311\276\277\361\341\021a\356M\265?\355]n\272\361\247\231?\220`\002\035\223\360\225\277*:\237$\322J\237\277\035\371_\363u\355\237\277\375\237\004\256\333\007\224?<\240b\r@\007\242\277\272G\367\357E\265\261?\254\013\253\373\302\236\243\277\323\202X\271Dw\224\277H\251\3329\275\255\266\277\241W\2154/\207\263\277\275\\Di\224\215\222?\312q\215\004\374a\220\277\2013\204\333=\314\275\277\000N\356\305\t4\222?\364\263\354~g\314\215\277\211\241\301\316\260\275\217\277Q\005~\2465~\274\277\r\211^,\205c\240\2776\365\\7!t\203\277\004\361\335C:c\246\277\371\215L\204w\t\234?h\205\373\305\356m\223\277Y\010(z@<\220?\200~q\233\343\030\253?\227\246\377\317\236\305\220?{\\d\245!\231\246\277\255\215\356\314\246z\225?z\357&Vr\330\275\277\035ZUj\010\373\223?\276\237A\245\340Jj?Z\253o7\006\263\242?/{z\254\226\376u\277\275\366;9r\025\260?g\353\333\250\271]\241\277\221$\036\006\363z\257?\214\342\317>\251\267\253\277}kc\204\335u\225\277`lB\276*\247\262\277\203]6\247q\000\230?3o\231\222\334\322\246?\371W\334y\377p\261?a\333;\256\310\216\273?=C\360\337\321\301\225?\222\242P\201W\217\212\277\363\351Y\245\2640\257\2772\201T\372\232\312\256\277\211\232\201)y\227\206?f\346\361Y\367\364\302\277\312q\342\264\367\204l?\030u\233a|\376\267\277\367\312p\0067o\242?I\362\023\376:U\241?\256\214\323\307\355\005\255?\205\2759\235\203\253\244\277l<\010}\3062\213\277\023\326*P\357?\251?S\277\033]\347V\255?\324\321#\343.\266\255\277\260\244\374L\223T\235?\352\264\247i\300\254c\277i#\001\256p\237\263\277\325\225s\231tg\243?N\2723E\353\312\244\277\032\374\240\260\305h\266\277 \341\034\r\305l\255\277\024\301\262[G\270\200?7Y\267\207\253\231\245?\260\321H\037q\371\235\277`\207\377\3224\210\255?[\033\362\333\363\002\246?\241h\"\257\212\234\253\277\364\313&\020\211h\214?\272\000h\006\245\225\214?Y\302\231\007(\334\272\277yj1\201Ec\237\277\234jN\300\315\342\267?\215\216\314s\325n\237\277\333B\206\242\355\022\202?\337\212\255Se\227\243\277;d\310\376\004\215\254?\2458\242\376\007\340\240?\314\354\205\021U|\271?\2475\313E\341\310\227\277\203\207\310@u\210\256\277\246\206\200\250\3001\264\277\346$Y\031\2202\233\2773\305\002 g\353\260\277\'\2268\344\014\340\263?\004\250\311y5\265\223?F^\200:P=\254\277\255m\036j\355\321\254?H\331Dv\261>\226?\370\317\245\357@$\227\277\360\357\225\202N\032\222\277\006\035\204\273\200a\225\277Q\260\237k\200\266\223?\276\013\373\3241I\222?\213#\027\023\340(\242\277\231q\330\013r>x\277\326Mh\210\354\276\213\277\355\334 \212\310\361\260\277\302 \020\324\036\036\226\277\345\240\356\336G[\200\277\353\202<\t\010\313\271?\234\226\016)\317\035\230?\273q9\014\316\323\270?6\355\243\304\257\005\243\277!\357\302\254\222\334\210\277\372\364\262=\201\351\304\277\253d\017r\246\324\253?R\314\364\362\325\014\203?V\001\021\006\353\272C\277,K\223\334\320\240\221\277Cz\024\356\226t\250\277_W|\374n\245\274?\2125\215\344\305S\224\2774\330\013\324\316\207|\277\334\347C\016\215\"}?\303\320.\311\200\264\252?\241x\257\274\217\234\257\2776\324\003\312\353\253\247?\244V\007N\377\"\245?vg<x\274\013\246?=.&_Z\265\240?A\264\336\013\006H\271\277\300\261\346\241\335\271\267\277\350z\304\037\321|g?X\027;\r\214c\244\277\006\003\314\337\004V\253?\033\025t\247\255A\247\277XI%=[\023\226\277\374\222\214.\257\224\241\277\232\2241\1773\256\233\277\0045\276\277\260\345\225\277\240\360JS\177\242\264\277H\302\326b\215\007\277\277\224\234(/#Q\270\277\313\n\027\032\365\325\243?\304P\352\322\237\022\202\277@\306\333\007\332_\225\277\342,rP\205\354\246\277\320|7\265\"X\251?\275\257\206F\023\222\266\277\367\\\017\336\035,\274\2774\3451M\216\201\243?\324\206z\254\336F\235?\212\356]\344z\004\255\277\025\327\031ha\211\234?qd\311\006\037\003\262?\360\336[\377U\304\263?\227.\271D8\320\243?\235\352\201\234\201\306\233\277\321n\214/\301O\201?\245\273\320\310\312V\277\277\257\336=&s-\232?\361\033\214Gv\026\256\277j\333u\001\263\345\243?8^\215#zd\236\277\007\210\345\324\330\334\241?P\r\'\034\320\027\247\277V\351\353h\\\024\272?Z\353\nl*v\207\2777[H\236\313\263\230\277\322\374\244\314oR\207?F\032\001\013\"\004\275?\001\017\334-\317\242\256?\007\232/\240\022\210\247\277\354\346\214 d#{\277\227\234\357![\326\211?\214\274v\204Up\272\277\260\361\246\003*a4\277]\301\030\301\377+\220\277D\260UTz?\253?\276(\3776\020\307\226\277b\030(\357h\023\250\277\306\275\246IP?\242?E\303A\244\350\352\247\277\354\024J\215\302\\\265?DTB\360\365\230\220?\270\353\005\230\241\201v?;\264\3027\335F\256?\022\004\311\321\370x\243?\3311\273Ds\303r?R\240\230\353\251\216\225\277\n\213\344#\223\214\265?\227\023\245\240\352c\237?\033lDf\371\244\243\277\323\257\345\366Y\205\241?\374\276\342qwe\232?u\217{8\336\377\250?.\177\217\213I\037\236?B\313\272\342-\242\245?\241x\352\220g\224\276\277{\031}\315\342\337\235\277\221\n\336\272o\206\230\277\005\311\263s\r=\245?E\235\221\340\253\217\205?\243\233\235r]\203\247?\250\207\363s\n@\255?\035\346i;\314$\252?\375\254\025r!<\236\277B?\034\300vh\241?\331E\300\343)\204\263\2778\272)\\-\023\223\277_\306\262\201Nz\255\277\3604\360\247~\\\257?\215\314\264*ed\264\277\035\246\256B\017i\262?\262I\260\020\343\035\261?<\367\247\027\221Qv\277Q\007\241\271N\r\211?\277K\312O\315w\244\277\307\314}m\020\204\260?\346O$$\351=\240\277n\242W\257wp\236?\370ok\233l\025\260\277\024Q\321\350\020\226\225?z\300\217om_\230\277\240\267h\307\320\014\236\277\206\232^\270\360\001\273\277&\263\204\024\014d\256?\321\332\210\270\225h\224?\002S\241#\266\255\243\277\375\306\016\025\013\312e?D\236\360\217E-\257\277U7\357\331\030\211\225?&.\264\203!\203\253\277\023\rN\327\343\374\251?\2341\326\024qzs?\312\235\323\232xU\226?C\315\007k\rN\265?M\'\002`6\354p?\323m\035\213\207/\251?\035D7\213\307\177\233\277\323ft\353\231\262\270\2770*\377\2115\267\226?\264\243A\303\306\345\212\277\017Z\306FG\362\244\277\346\321\252\243\317\245r?\303\177\245\260A\314\231?\262\254\356\202[\315\251?\203\337\264I\371\212T\277\\\342\265\3646*\203?\377t\220\326\357\245\257\277\014PA\272\304>\230?}\035\254\354GC\270?B\224_\2701\257\211\277\326 \031<\305r\262\277_Jn\352+\324h\277\323\357%Vg\204\251\277u\370q\037\214\024\252?\211\364\253\004\342\221i?f\317\305\244\232\235\225?\244m+\343<\033\225\277\32172\305*u\236\277\342z)\255\226Y\243?*|\024\256o\266\262\277Vw\322\351)\316\266\277\231\330\313\017\217o\225\277\316\330\242\027\004\235\223\277\303\246\270$\246\247\232\277\307\220\202\t\273\026\271?\\8\277D\214\215\204\277\372\351\356\013\374\252l\277\203\273>\310+\010\265\277\017\306\365/\004\030\232\277e\244\n\270Cl\262\277.\346\035\211\003\032\241?\356>Z1\3217y\277\243Dp\004M\314\201?\220\221\242\213\332\361\242\2774\'\013?L\212\245?\200\314\253\013M \262\277\302\000\255Rs\3506?\221z}\230h3\262\2770\344\244\247\371\274\246?\251\255\315wW\\\236\277c%S2\304\373\205?\305\027\026k\034\331\223?\324\247\244\232\253\317\"?\3259\216\263?\302\261\277~\021\375\202/\377\217?\301\205\247I\356S\240\277\212-\260\336`\024\261?L\342\355\303\310\321\236\277\352F\317P^\316\274\277\341\257L\252\351\347\265?\030\2176&Q\223\261\277\027\345l\300\213\322\275?sY\274FHs\254?n\350\336\r\303\376\225\277@IE\220u\r\203\277\202\006.\003\251\367i\277\035y\025;|\264w?\340\227\346\277\261\354\225?\376\367\310\312\304\007U\277\332\2706-~o\232\277k\221Bz\n\306\210\277\266\264H\212(=Q\277\224\270\225\266`\344\240\277,\t;\230 \373\214\2772\324\276_\302\325\266\277#\323\352\\\t\221\220?\303\243K\007\315\333\236\277\344l\270np\224\300?\'v\237\036\212u\223\277\335\027\036\260\303P\252?_\036|\263^\360>?Z\272\251\027\367\000\263?\306\367[\364\211\273\240?m\311\223\300\334`=?;@\3631\363\037B?b\377\001\215v2\227\277n\310[o\340\362\225\277\224\233\277\020\301%\247?Co\243\270Z\020\222\277_\351\325\331\336A\220?^.A\235\245$\234\277\304%\202\341V\025\244?1J\266Q\001\344\300\277\204l\325c-\360\266\277\325\211\274\'\035\224t\277!\351Y\306H\r\245?{\000\262\345\n\243\265?\346\r\323\270\224B\244?\025n\006\207V\330\256\277OU\306fc\327\246?%\306TR\013\341\261\277\231\256>LA\331\220\277\231\025\003\210Z\013\252?E\276:Gv\240\231?\262@h\244\322\"\265?\203*ci/vf\277(\245\332\031y\342\243\277\004b\243\032\210\212t?\326\346s\333\262\271p?~7\344\346J)\254\277$\272\213\326\212\201\246?\330*zY\335\355\204?\003\023Q\313\253\275\202?\261m\243\225\334^\220?\261\212)\276\027\250\261\277\270\027\224z\271\242_\277ZP\032\347\3406A\277\217\342O_\270A\261?\315E\304\013\320\357\223?\357\"\220g\242R\252\277\347k.\356\3060\240\277\206\262\375B*v\254\277\320T4\275\202\376\232?\310\300Hj<L\220?\307\037]\037\235\255\217\277\221\353\030z\266\\z\277\035%\004\337\241\021\260\277,e\303\224\005\037\255\277\375\2722eo\010\251?n%\321\320\320-u?-\357\307\344\204&\264?k%\203\327d\250\236?\273\\\347\307\242\220\243?C!\371\375)\264\244?\350X\344&\2108\257\277\3113\236\355A{\263?k\3029\372\207\307\266\277w\203f\374Q\253\244?\322G[\342\036c\224\277\\\221\030\277f#\254\277:\371\207\203\336\007\243\277\'\272\236?J\336\226?\377\002\210rD\323\236?\257\324;\032\305z\220\277)\243\314<\355Q\261\277\354\2462f\352\037J\277\375\320r_\007\276z\277\251\325aS\0201\207\277G]\307|m~\244?\204\225\313\304\0307\245\277\346\024\221~<x\253?E\026\314\312\306(\241\277e`\"\203\227\021\204\277\307\017\243-\261\365\201?(\352\2724\014\216\261?\250\022\332\274\346\346\226\277\344\014\356\251\377\021\225\277X\255Q_l,\214?\3659V\311\250\250\250?\242)\r\034\002\020\273?ZG\206:-\010\222\277\002\3023\232\'\001\252?\377A\224\371\016\335\261\277\013\025gAe\345\222?\237Y\266\361\033\203A?hK!k,k\255\277Q\356\260\207\004?\204\277\342.`F7\376p?B\033\034\264H\266\200?+*\303\021\031\252\257\277\261\027\016}\324\017q\277\336\361m\014\001\217\261\277\343\007\365>\037\222\237\277\247\327\203\244\325t\251?\013\332\256+\246h\260\2772\331\367\315EH\230?\231\"k\211\237\324\205?\020\252IG\217\276\206?\355\027\333r\031\315\251\277\233\215\032@\325X\261?D\372E\246\r\217\205\277\345\205{\356\2136\246\277\026\327%_|y\254\277\037\202Y|\r\307\210?k\361\205\273j\316\252\277\377Qy\225\245Z\241?\350u2\306\313\262\251\2777y\277I3\372\230\277\030\271\257\264Q\254\262\277\241\347^\255\016\335\277\277N\242\277\345\325\220\223\277\202*\252s\206[\261\277\365\332\257\341\034\237\224?\206\203\246P\301\261\244?\331\342\234\267^%\277?q\0033\277\343\314\231?\233\0078\216\343\370\241\277o\254\367p\232i\251?\224Z\304\262\362\241\253?\242=\317\220\300\343b\277\324 \353\004\3231\264?@\373\227z\256\232\242?\301^\265\010\223\023\240\277\224\202\'M\245\216\250\277*\276\033.\205?\252\277w\217\333\317o\270\264?\215\2049w\303\n\225\277\222\245-\315\223e\265?JP1>\337\342\222?Vs^\304\331\205\247\277Q\004\020\350\272E\221\277\321\014\264\255T\"\261\277%\024\035G5w\202\277\024\226\241\217\027\216t\277\266\304\277\244\230\033\221\277\016\223\2606Zy\212?\372v\221\206\213\004\270\277R\247\006\243\301|\267?x\3400\26055\264?\350\371\315E\000\234\207?\234\026\1779\241\271\251\2771\364\365svu\256?\221\337\200\245\351\270\231\277A5\360\3114)\274?\231\373\317i\\\227\221\277\242u=<\345\252\226?\233\276u\343\235\022\235\277:BG\306fl\240?\030\"\331\306\346\354e\277\215\030I^5\356\250?\344`[\213:\270\261\277%&\230\247\375R\177\277\277E\353\033\007\257}?\364\277\352x\263\213\200\277\241\301B\310\305\375\242?\177\212\252\312@\205\254?-$\320\244\227R\240\277\306\215\305\007\275\217^?\026\307%1\310\362\241\277\313w\037;\264\330\237\277E\257[\352\372\324\241\277D~\345\342\243-\262?\332[2\177\2426\240?\353r\213kY\n\256?\000h\037\'S$\202\277=WD\212\024\005\270?D\232\245Y\017C\221\277:\247?\370l\217\215\277\205\374\336f\330M\267?\316i\356\225\022Z\240\277\003\230GK\203\313\244?3\237\201\300\256\325\261?\301u\224`\227\n\224\277\272%d\262T&\275\2778ZM`\001\222\245\277Y\017\325L\3446\273\277\030>\017\026\207;\253?>\033\315w\205\255\237\277\206\3745\214a\031z\277Wgn\362T\250v\277\344\246\315C\246\021\251?M\372\356`\206\271n?\207\263\275h\363b\243\277\202\230\032Y;\242\253\277\\\024;\303\237\352\251\277V\371\030\254iy\244?\024}\337[\240\262\302\277\361_\265\242J\237\254\277ruo\226\312\020\255?{6\357\271\367:\225?MF\340\336\354\245\250\277\230\n\250C\001k\244\277\33215\312d\216R\277\267 \265O\307\007;?\265\261]-\354\327\263?\214\312\215\362=fD\277r\272,\221g\010\275?\313IS\201\225\372\221\277\200\351F\310\211U\242?\206kmA\315\226\220\277*\217(T\345\007\234\277b+\273\351n\303\240\2771\r\277\021\031\222\220\277\333\377 \004G\217\256?\263b\212\346\315N\240\277\200ej-\316d\221?\2714\232Mb\230\210?\352\366`\253\224t\217?C\0371\356v\373\212\277K\207\210\341XC\250\277\326^\020\360\210\014d?\350L\214\017\304l\253\277/\354D\353\365!\250?Ew\250\"\350W\262\2771i\345\251\214\200\237\277\3731\007Q\222\334\177?\324\251\177\322{\342\251?o\022\226\nE/\230\277\301\341\201\017\347\330\271?pn-u^R\257\277\301@a\257\313_\247?\310a!\226(\337\230\277Q[\300\313\305\311\261\277e\226LI$\022\202\277a\215\333\036q\310\265\277\006}J\377\252\030\273?4l\277v\315\206\263\2770\213i\006lX\244?\n\334\336[\231F\272\277\025\232\255\'\317!\241?A\244\266Wd\221\253?\270\262$\017\231\254-?$7#r7\326\247\277r\2163\016\035\323\262\277\236A\246G\365\210\235\277Q\350\004\305\244\262\204?\320\177\007Vo2\245\277\342H$\336\314\003\302?\372\177\232`v\r\237?\035\312\303{\0333\274\277\211K\356\261\331\305\273?2lhU\374\351\210\277\021mI\224\014\200\246\2777\267:*\"\266\257?\314\333\304\237\334\005\203\277=\313\3703d\354\250\277la\372\234\025\245\257?\rJb%\346;t?\203D\266\376r?\222?\227\2704\341Gr\260\277\301\377r?\265\222\246\277\230\000<n\246y\260?/\370\007\3738\031\255\2779kq$\210\253\270\277P&\022/\026W\252?C\320\"\264\365\325\226?\334U\257\311|f\233\277tQ\315&\214\214\247\277\2543#\264\016R\266?>\320}\266Q\237\234\277Y\371\300\234\217e\230?[\317\242X3\227\240?\235P\033\032D\313\273\277\202\256\221\017px\305?\003\017\205B\355g{\277\327!\354\361~E\241\277\363\322\2130t\036\261\277\267\224\215\215\352\342|\2779\322\335\014n\302\252?\216-\260X\030Q\264\277\233\236M\035M\321\276?\013\032\245|\223\341\222\2775;\223Q;\346\265\277\251\026\254\3617\317\265?|\326\223\027^{\214\277\303\374v5\317\202\262\277\013\263\220:\177\222\263?\346\013r\205\004P\226\277\346\300\250\222O\177\242?\337D\256\222\352\210\254\277\336\010Mv\250\322\264\277\210\016\311\311-\033\302\277\2749\244\010\'\360\202\277\226.\212\306!\177\251?\354(\257\003\316:\253?-\306\365\320\373\311|\277\210\314C\342KV\266?\37731^\225\204\257\277\241\212y\t\025U\221?\023\220\340w\201x\265?i\361\377`e+\242?\325&\351WSM\235?\267\331\002`rke\277\306\240\372.\212b\220\277b!B\311\177?f?\232\230\261>\304\357\243\277\245\023\234\'wr\220?^\004\350z\343r\243\277\364\210^\245\203a\252\277\3247q\323\004{\247?A0%\257\234\351\177?\372\346^e`\213\261\277c\037.G-\337\234\277\347\220\2027H.\260?\262\241\000\263\264\362\264\277gray_a\264?\215|\374\366\241\322\233\277-\007\261)\200\260\216\277\301-\330\316\014e\236\277\273\306\000\211\022N\222?BM\361V\355\206\243\277\327\2107}\377\032\212?\305v\363\206\221\010v\277Sb0\216\\uy\277\3146D\306\221\310\204\277\277p|\3032\003\274\277\373!\214\200q\230\232?T\024\n\245\"%\266?D\373\237\2208\267\261?%\373\301@\252\335\223?\233\230Q\242\372\316\263?o\220(\010\267#\242\2772\375\036\200\227i\231\277+\036\\70\306\261?\263VD\227X2\243\277\022,\202\234\256\322X\277L\206\333\265\r\201}?\212`\266|\331;~\277]\326`Z\364\026\256\277\241\240yrL\224\266?!\266\374\2514\263\270?YG+\270K \227?\3206\325P!\317\247\277;\252\225<sg\214\277\365\334}\363\177\235\240?\322\233\2211\033\205\261?\310\327\3765\261\312\267?\255\253\237\274\352\tg\277N\020\303]\335\020\260\277\232\376\267\255!\266\202?\313C@\271\243\352\224?\233\224,\247\275\327\226\277\311\003\245\315M@\272?F\344\203\321k\336\246?\0347\323e\344\226\206?\330\347\262 \020\253\202\277i\000\325\254\037\214\240\277\177;\035\270=\352\222\277`\255\003\355\377.\226?\212\020\006enI\215?\317y\236\261\246\345\271?\255\007\3579\315Jy?\366\215\370\017*\221l\277\013\272\317\023m\320\250\277(:5W\223\263\260\277\341\360\254\200\327w\220\277\376\243v\030\177i\230\277m\006\3517(\345P\277\221\200\330wtR\236?\217\00638L:\270\277y\032|\361\331h\245?;*\006?\212i\230?\"\325\231\220\247\213\252?\316\234\002\2056\350\237\277\355 \353\312\372\335s\277\226q\006\337|\374\224?\265#M\332\275\310\257?q&\000\353p:`\277\346\302\231\337\"it?\334\336\313\234\216@\223?\002\325n\332\237t\200\277P\030\361\344\013\233\274?\335\341\232\t\240\370B?\237\304\231\361\\\265\244\277\340\206\034\t\242\217R\277UO\317\351m\271\273?\337\341\3119@\261\227?f\264*\031\312W\246?\232\201\001t\320\341\266?\311i\027)I]\232?\377\"\017b\210m\242\277i\205o\rG\336\252?\030`\274\036dF\221\277@\203H\374\202\225\261?tn1`\336\235\262?.?m\323AO\240?d*\201\234x\247\232\277\355X\334~\203\226Y\277_\257\231\246M\273y?\022\271\237\3640C\260?b\213\242\334\001\363T?e[\200=\213\217\222\277\261\254\320\207\t\177\201\277\376za\r\312i\260\277\223b7+\276?\220?\300\244\252K\370\353\234\277\031=\'4\361-\262?u\223&\227\261i\227?\220%\316\301\307\"\234?(\232\304J9\241\262\277S\014I\274\020\027S\277\272\255N\325U\323\255?z\305\255\355\303P\200?\274l\263\253\033\261\227?\216\347\370\2037O\262\277\364\367\263\313\004t\201\277\230\220\323\223\324\267\225\277\2667K`\307i\237\277\301\267E\363\036\343\273?n\341n\214\250n\262\277\001\352\327G\336\306}\277P}\220\302\302\375\244?\376\372\325\373\343*\243?p<\003\211\205\255\226?\037\347\304\000\263\233\236?j\300\254\334\205\274\256\277}G\260^\217\353\242?\251L\370\221\377n\264\277fl\204u\223\205\251\277 \320|]l\203\234?\226g6\006\352\344\265\277\276\014 D\220\013\260\277;g;]\205v\263?_K\257\325X~\247\277\212=7h\251[\200\277\331\217P\204\007\257.\277\217\027\261\372\211\003\233?\333\256\022\tX\241\223?w\332\261\375R\371\266?,\216\314\031\367\210\223\277L\315u\370\201\267\222? \375\002\375\265=\221?\236\010\344\275gE\273\277nRAB\273\021\243\2779\202\312\322K\"\255\277\313(q\336t\226\231?H\313\301-\241\342\274\277i5\003\032\347\250\214?\310\366\312\2127.\234\277/p\372\362\345-\251?Xn\314\014\340\245\262\277;\214(\323CY\245\277\n\320!\243E{\223\277\323lcU\031W\272?\276U\341z\351\315\200?3\374a\216\034\340\256?\320@?y\3008\250\277\002\243\367\254/?v\277vC{gl|\275?-\0177\241[e\243?\026\256\322O\330Y\255\277\272\217\244\032\020Xq?n\367x\205\013\010\243\277\254j\370\264\346\203\253\277\327#\264x\260\034\223\277\311\347`A\253}\272\277L\306\364\336\020\353\241?H(+\2213\'n?&\'\201\207Pz\261\277o\225v\306 \325\254\277\272\247\026\'\253\022\257?u]r\335J\205\251?\244~\365\031\236\365\254?\256\213\3665\270|\262?a;0/\202x\244\277\357^\rF\254\231\245\277|\317l\nw\362\253\277\\\020T\2549\032\216?I\205\210\357l>\235\277Ft(\351a\027\204\277?\273ZX\306v\261?\334\321\220\"r\332\231?`\367\013h\226\352\246?2-\tJ\275\347\277\277\255v\251%\251\261\257\2777d\256\210\354S\225?\253S\267\274\207\340\264\277\365\337\230\020\246\312\263?\272w\002\006\350\010z\277X\231\346\360*\306\241\277\272G\023e\224\350\264?\177\312\344\245\024X\201\277?\374\343\024C[\260\277\241\350\276\226v9\210?\305\327y]\350l\275\277\357_\267@\212\251\256\277\233\033#2\305\251e?\346\326K\353\253\026\262?\243\363]\315T\272\201\277\346u\315D\355\020\264?yg\263y\202\271\244?f:\361L\034\230\214?\352i#m\353\331\252?9a\035\010D\336\220\277\352\204\245\220\305;\177\277\202\257`\227\366\331\235\277\032&8\035B\275\272?+\005\335\014C\035\266\277G\001j\023h\215\240?\366#3\022\204i\236?\355\336u\3671\330\226?\310d\305\024t\235\263?\032\356\030\3740f\226?\330A\340N\376\301R\277\005\320,\274P\265\200\277\235\203\311jc\240\306\277CeYVe\304\243?\010l\035ymw`?\335\243\365\017\356Z~\277wx\022U\022\354\211?\323\363\036Y\303\333S\277m\031\236\\\210\355\235?\271Y\345\234T\237\217?J\007\330\276\241\023\263?\246\350:J\273\377\246?Y\234\262\340\246\243u\2774\373\301\341\222\307\266?b8\222\017z\r\253\277e\263\240\274\0058\260?NK\257\367\340\020\265?\221\220\315\302\341R\230\2773\1778\236\177\034\220?\350\233\210\031\273\215\263?/\257\010\314\230\322\r\277\222\335n2\262\374~?\201\332JV\216\212\261?\247\367y\267\033\262\237\277\221\007o\377\214E\266?\340\321.\232A\223\243?\244\326\346\272\217h\235\277\271\247\261\030\235\233\253?3\037\220H\232g\251?)\200\265a\3207\227\277\225~>\265\306\254\242?}\007\343\366\ry\202?`\341\242\234\364\200\263?T\r\367\344\223=\255?=\323\244\001R\301\305?\t\0309\337\332\211\262\277\365\035\374\245\353/\226\277F\253\323 \014\214\237?Cn->\305\362\270\277NL\000\217\263\343\230?\346\030\226e7\225\220\277\223\216{\2021k\226\277z7\303\216\207\363\243?8\000\200j\0206\251\277\354\344^\365.\222\230\277\220\241\257cl\016\233\277\302\246\205=\354\227\210?\314\235\343\002\022\r\244\277$\312\237\rX\232\247?\203\332\276\321\344\313v?[\317\247\034\264r\213\277\244\202i\343G\233\272\277\370$\271K\004\315\240?\340|\352`I\362s?&E\220\203Y\217\265\277\336\003\033\033\342z\265\277\342\272\276\261\226K\262?\221\017\333\265\001?\217\277]\227\214\230\3703\240\277g::k\333\370\247\277\177\0307\026\265U\225\277\025\024R\013\231\313\261?\307\206L\345\261\233\221\277\371p\014)\226\r\256?HX\036\336\307y\214?Y\260{\306\323\247D\277\327\006\263<\314\265\246?Y\341 (\3102\245\277a\'`\334\260\255\260\2770w\226\027\306b\254?\304\216&\374M\272|\277\270\303\205h;a\201\277,\310e\320\233\352\234?\360\330\224\347\373\242\261\277\337\223\nD\032,\266\277C\357\2212A\362\206\277\201\201\270\024\276^\241\277j\177J\252U\264\226\277M\372\202\261\034\311\243\277\224b\032\337\313\200\247?#\352\270p\351\374\236?\375\305\256F\210\234\223\277\227\3660/\014}\263?g\301\304\0055]\223?\366nQ\335\204\270\"?\335\377J^Sm\252?\247_f\255[(\250?\317]o\216$.\236\277\255\266}\027\214\366\253\277\226@\320\204\343x\206\277\236\2430\345\306\227g\277\366=\t\342\374\003\206?3\364\275\030Wn\203?<\006\005g\366\350\245?\343\033;\035\332F\214?\341\037\006\202\022\334\244?\3716\\\323\204\271A\277\365\245L)\036\006\260\277\177\270\205Ag\000t\277s\244\331\302\313 \234\277k\305\337UF\253\255\277E++\317\366\240\222?\356H\2343\314\270\231\277h\020uOS\226\260?\226\035$\204\\\262\241?@\344=k\323\350\251\277LJRv\307\307\276?\244\304\005\000\366\201\242?\363\235\247\325jy\251?\313\277;\243\325\315\236?\014\273\334B\001\275\226\277,\270\323\353\335\206\250?\016=\303\250\272\235\224?\313\357\237\340\036D\254?9\332\220\"\235\021\242?Ry\334\251+K\221\277\243h\371\213\213\205\271\277\252K\265\304\0133\225?\373\237\253I\"\017\261?\321x\030<\321\320\200?\321\250\211_P\275\220?\234i\001\274\032\313\233?\2464\001\331\205W\244?Y\030I\363\302\354\260?p4\313\312K\222\203\277\252\346\377\021&|\267\277%\301j\301Y\276\242\277\036\266\257\277wx\256?\'\227\360U\231\237\221?\276\265\344\213\363\036\264\277\3556R\035O+\264?\0007\231\312u\202t\277em\2207\216\031\207\277\203\301Z#\322\317\201?\232\3159xv,\244?\326\342\306Vu+\240?\327\221\021\3634\020\245?\"\034-1\2446\255\277\232\237\203\346JV\252?\333m\253B&(\226\277\345\3425\201:\206\260\277\242|\213=\020\t\200\277\316\250\006\252B\340\261\277\014\221\226\223&\217\207\277\300+\231\212\016\3456?1\334\376\205\375\265f?\037\201\032r\352T\253?AX\357\004U\000\257?\237\210v\270\315r\260?\221\266\316z\347\236\231?[bH\022\302x\271?\327\350\035h\262\360\270\277\223F\363@cG\242?\315\234\014\253[v\220\277\241\312\320Wn4\257?N\263\371\3021\343\267\277\207\013C\333U\307y?\364h\300\017\263\222m?\003\232\267\202\366B\241?\272\345VA5H\254?\025\367\027\275\312\301\227\277\006\372\330\327\240%\262\277\240\375B1\231\027\270?\334%\r6.\351\254\277\346\255!MX\207\274?\353\261$\345]\276\246?\246\320\370m\370\254\241?\215\320\030\361P\355\267?\210\242\253\034\205\000\236\277\220\214\037\032 \234\225\277\355z\326O9\261\\?D\221\035\217\363\232\270?\214Q\242\030C\221\242?\'~\230M\\\'\277?\253\307\362\347r\260\223\2778\003\255\016e\321\257?\003\0074\364+\360\261?\203s\334\2240\263t\277]\327\024\213+w\211?-\251D\303\322\374\301\277F(d\035\234\354\260\2778\276\265\257\210 \232?+#F54\371\221\277n\003\212-D\320\261\277\004?\346S2\300\255\277\203\035\306\211\003D\263?o\024I\255y:\234?0\002\220H\016\315\227\277g\036\275\341\211>\265\277\274,\212;]\236f??\035\230\036\306\225\276\277G}\321kU:}?\343\034\257\275\346\331\217\277\254\346\264\022\354\250u?\373\226\270(]\212\243?\316\022O\222\303s\270?\212\360\261\207\340\224\227?\023\211V\265\312\364\252?\251\264\224\225\t\352\246?\033;\005\021w\200\245\277&\240v\232\022\265\275\277\265G\326\264\002\376\271\277UI\034\336L\260\266?\257++\353n\020\252?\343\306\316\352[\356\215?\311o\237Y\"F\250?\215\252\270\301\326\236\261?\246t\2354\272\032\223\277\374n\322H%\200\247?F8\006\266\272\337\256\277\242Y\006]\247\232{?\010g9Z\301(\266?\224h\377\277o\252\252?\334\320\023%\3609\255?6\355\233\356K\243\247\277\366\005\221M\261\213\265\277\322.\030\206m)\304\277\230\242\223!\232a\252?\007uD\330\324\344\243?w\364\016\277J\264\234\277\nK\270\271\320$\257?\\\275D\323e\304\271?\272- \354\302\203\231?$H\347R\210T\247?\372q \340\243$\260?\017\360\353\273\007\250\243?\3716g\272L3o?Rm\022@\263\026b\277\260N\035\'Wi\211\277f\330\204/\341{\214?\213\221\010j\202\022\205?v\345;\314$a\355\276\337\261\304\354\003\231\231\277\203\326\203\037dT\264?\353\n\037\204c\252\206\277\354mK\217W\253\247\277C\226\243\223\364\230\226\277\327\240k\234\202\347\200\277\357\242\245m\203f\265?-\210\303\032\224\347\265?Q(\230\362\016e\241?\373a\215g\r\354\233\277\243K[u\3322\230\277\021C=\010xT\235\277\330>yy\244\246\263\277\345\272\303\016\375\250\236\277*\300[\313O\250\276\277\213\272v\023\005\"\231?\021\341V\201\207$\261?\302u\350K\346\257\265?O\277}\337\231\236\226\277\022v\036\201\211\324\226?6\257E\307\241f\260?\374\204H\272o\240\275\277Pw.@\260\210\220?~\334\200\t\344\255\263\277C<\217\024\350\306\210\277\3643.\372\300\263\246\277^\343\016\221\344%Z?;u\226\324?\207\252\277\322-\271F\346\201\252?(\262M\302\370h\203?!\350\373J-\353\222\277\317\240\313\357\302D\245\277a_\235\204\251-\257\277\"\3623\311\337\303\250\277\014\032\177\242o\002\301?w\374\326\002\315\345\246\277.\223,\207\306\327\256\277\276\316\336R\031\222\224?gw\213\205\312\276\300?\217\3516\022*\273r\277\013$\260Qc\361\263\277\3703\267 \330F\247\277`\026@\030\227\253\244\277Y\275\266\354Bi\250\277r\264\330\214\334\314\207?V\350\023\246\260B\300?\300\351\031\326o\206\223?~E\326C\334\302\246\277\3371 Q\305\017\246?\335#\305q_\314\252?\001\352r\356\225\334\220?\374\365\033\256\232\227\266\277\032\305\3018\327\277\210?\036ZR\031$\356\253?\266\260\242\261\324\007\266\277u\345\\z\210\020\237\277\361\337\027\030M\026\270\277\n\340\340\246<\223c\277\260g\307\337_V\276?\234\027\262\267\365\234\237?\273\035\264\316\007\346\252\2776\375:?\256\025\202\277\357\252#|\221\003\273\277^@\205L\342\327\265?:Yu\205y\205\212\277\336\204\035E\374\026\224\277}\036\262%x\352\221?\344\261\025\t\003\026\256?\216\215`\231\233P\223?\236g\236\246u?\247?\225\260\342\316\253 \244\277\204\207\335\2467\373n\277\326a\334\241\031\023\241?\240\\N\327\272>\241\277\216\344R\332\355\302\246\277<\305PKz\252\224?0\352F\363\314i\241\277q\351{\277\370Rr\277\303\224Jw]\331\262?8\224\240\251>r\217?\3474h\227fr\244?\217\300\247\214\332\255\255\277I\025\333\334\255B\212?\203\317\334I\373\234\245?\211\205\320\377.J\233?\252\362AfO\336\252\277P\027\351)\316\260c?*\\\222m8\337O?\023\225\353P\\\211f?\r\351Ol!I\237?\t{kG\205\320\220\277\273\215\177\361\254c\242\277\272j{<\265E\237\277_\021\241\033\250\022\212\277\334\354\221\227\246\243\221?\215\003\035I\023f\223?\222\325\355\250\3778\236?\003h\326\364\253\312}\277o\277\002%\204\237\244?nh\032\247,Cz?M\326\214\320J\035\255\277x\364\032\212\001\227\222?\337iDU\336G\243?\250\263\350\207\216n\252\277\326z\265`\337X\261?cl\325\276\257\253\274?\372#\237\323\262\264\266\277\344\032\241\220\247-\242\277\007\033\377\027\270_\233?\201\200^\252\351V\227?\377\230\027\237\304B\262\277\277\035\237\203\366\254\262\277/n\336\302\241\314\241\277\327P\274\344l\235\264?\235\220;\336\317\214\240\277\226b\304\211\327\255\223\277\322/A\215 \214\265?\016MU_\271C\242?k\230j\014\376+\220\277\313S\035b,\372\270?\252?\t\351\365\'\265?\2474\177\255\300I\247\277}\202C\261\245?\260?\213#:\005\240\235g?V\217 \002\260j\255?\230\2012iv=\266?\3337\324O\234\267\263\277C\234\214\306S\203\237?\270m\351\201\203\300\245?\247\031\231m\304\300\225\277\217}\243\337\017\010\255?\017\336\027#\352\032\271\277Z\220\225&\374\301\242\277\303\027\343\277\205\266\204?\360{o\342\246\r\202\277`\336^c\325ca?m|\343\300%\263\204?u]\034q1\035\204?\232P\034\037\343^R\277\270\027\314\261\366\227\257?^\2742\276\335\303\211?_\227\221\370\252\234\254?&\221\322?&=\251?\375\364[\275W\363\221?\322\312G\302C\213\301\277v\334\200\255\236U\227?\263\2137\241Q\315\252?a\242\204\312z\211\225?1ywn\250\240\261?\313\243M\365\320\307\222\277Ye\267V\261=\232?\010]\031\214O\230\260?D\002\016COl\272\277\377O\007~\3410\236\277\244)\200\234\313\034\233?y\365F\256\332\001j?\001\227\237\224\300\331\262?=6\007\227D\215\274\277\021 \217\274\023A=\277i\222\3134\257\310\255?*\254@\375v\017\213?\'\370P\242Ii\236\277\324\206E\031c\204\266?\326D\337\277N\036\254?\314\257\265\210\222\370\260\277\305\375\333wqM\300?\207\320t4\365[\241\277\010A|\317\341_\211?q\204;\013\273N\225?\334\337\345Ab\277\233?\036\235\311\244\251#\220?\231S\245e\213\344\224\277\317\226\273\342\204\025\271\277D\251d\221[m\252\277?g\371-b\314\264?\244\037\202\201\007!q?\334k\246(\221s\227?\323d7s\214\272\217\277\370\204\351\246]\335\242?\300\"J\363\2560\240\277\240\354\345K\246J\265?\005\'\336\234v\005\237\27784\365{*\016\246\277\271\214.\341\236q\242?\377tN\010UK|\277\233\225[\330\003\025\264?E\245#]/\370r?\3410\220\246\331\314\271\277\361\177\037i\337\242\266\277\'\346t8I\202\252\277\020Y-r\322\223\254\277O\177F\315\315\014\250?\303\244\006\374\241\373\254?\345k\006\\\271\025\253\277\343\377\265\263\207<\204\277\256@\354\327\2638\231?Y\\\037\261\3026\256?\370\213\351\203J\367\257?\271\237\216\205\366:t?\303\343|\273h\273\202\277\265R\365\230\234\034\212?\211P\023\001\374\226\203\277\037\017[\340\316\321\214\277\226.\271\331\335\261\200?\313\002\005\274\036\002\237\277\307\222\037\271\205yV?K\262a\254J\306\222\277.\351\013DMJ{?\0367S\362c\363\237?a\\a\t\032\211u\2770\204\261\266\323W\262\277Y\351\336BNp\260?\216\034%\251_B\243?oCto\373\334\242?\247\3745&4t\243\277\230\367Jf\302p\240?\355\305F\035]\t\266?\342Z](\325\373\220?\232\017\375\204#\276\247\277\366\034\210L\007$\204?\353\241$\003\311\201w\277/\265\252\332o\036^\277\'\037\313g\032[\256\277\244\206\010K\317\303\210\277\345x\341\022X\030j?~\343J\022*K\267\277\315\014\371/\2163\242\277\217\022\370\017\002\316\241?\351>\233I\211\244\223\277vW\213t\243\t\247\277\021UJH\035+\245\277&\366\2009\374\352\255\277\253X\355H\373\332\223\277\331Ai&\t\354z?\375\r\254>\242.\254?\364\326\034yX\250\213?hy\346\376\020A\220?\032bb\213\364\233\203?.u\346\221Us\242?\304\366R2\302\035m?\233u\362\027T8\223?UK\274\205\355\242\235\277\030\237s\223\375\305\263\277\202\240\017S\037\342\225?\321u\225\335k\340\243\277\232\263\215i\344\257\266?c\215\3760\354!\275?\371q63\347\243\230\277C\221A\347\016\363\245\277\232\351\"B\030\204\230\277\350\021f\224pr\227?H,\300\371\247\010\224\277\020@V\301\233\330\260\277C\276\372>m\210\261\277S\016Q\253\243\237x\277w?\267\376\224\352\275\277\212&\346Q\334\024\204?\031\306\247\356y\266\270?\366\247q\013\0056\230\277\221\355\346\026\344[\255?x\265\330S\262\032\264?\270\031@`\n\'\260?\220\007\3441\315\030\224\2778\206?~!P\243\277\032\263)\"\245V\201\277\266\233D\033{\356\246?\017p\266-\261\333\230?B\023.\232\267m\252\277\310V\314\205l-\263\277F\365@\200\312b\265\277\216\206\305h\277z\265?\002Y\037n\210\023\252\277\251\363\271/O\300\252?\177\251\342\321\243\307\253\277\207\255im\232\022\260\277B\214\211\372\237\031\247\277#\301\027\303}\274y\277\212\222\362\231b\346\252?\260\n_\375W\245\205?\333\226\272\205q\362\260\277\2140\177\304\313\257\262\277\224z\273$\rd\204?\027\362.\337\340\243\244?\220i\225\002\006\304z?M\270\223\244^S\201?J\330\210\336\350;\241?nH\350g\273!q\277f\340+,_\252\270?\360\212\222\010\330\243\255\277\264V\023o^v\255\277\266\035\222\010\275\206\265\277\221\367\270\350,Gj?#?\016z}\002\266\277VAMoz\177\255?\241@\272\304,#\253?}s\231\"\226\347\261?\334c\301B\n\331V\277M?y\337_[\262?\274\332\020\262rC\263?\342zbz\350\021\226?\363\026\307_Gh\203?WY\312!T}\246?9/q\025\331k\263\277\0200\214\252\246\370\255\2777\345\024\247\304L\205?\325:\347\373\310\367\255\277g\265~\333\360\313\214\277\027F\007t\2778\300\277hp\246\202\006=\240\277_\326h\004\031\'\252\277{\n\313\254\024\331\243\277\337\033.i`&\260?\254\326c\026?\344\254?\034\247\312fo\204\217?\005\324\207\276\027\250\245?G[\314~\347\233\243\277\014o\247$\235\205X?\200?7\261\370\005\254?\353\317\324\210z\023\210\277U\005\273\020\216t\251\277\340\273\333U<3\221?\331AC\324t\362\261\277?\304ZN\270\344\247?\264\024\270\326\233\255\250?\205\322\204t\335\372\260?W\312cyP\347\263\277NA\351-.F\241?\'\3049Y\371\257\223?Gf\316{\257w\213\277\262\270\206<\262\312\246?\007\253s\260:\201\260?|\363f|\355\007\233\277oN@\014\315r\220?\021r\036\016\314\220[\277\343w\355\212w\370\266\277.\315\377\264z\356\255?<\337\255o\336-\251?\245\377\212\361\307\335\257?\306=9\r}r\231\277\240^\221rCU\236?\216\033v/\035!\270?&\255\356M&e\213?\205\2112\346\276-\253?\252\265\003\340\223\226r\277\024\302JJiM\263?}\323\254\323\235\223\254?8i_q\303\017\233\277\200)\006\275\016\"\260\277]f\024+\000\250U\277\226\315\211\323\271\332{\277\"\317\372h\376&\204\277+\261!\365j\016\241\277\241\314\000|\017\253\205?\334z\352\220E\271~?+\326`)\030\305\200?\352\251\220\247\323\247\204?\325e&\265\030\205\257\277vX\030;\336\323\242?pH\345\366\203d\267\277\342=\375\r\310\271\226\277z\360\375\224\333\320\235\277\247\023\'\273\274\013\243?s4\002[g\250\226\277M\315\212S\224\256\261?~*\370J\243\223\233?\362yXn\204#\224?F\016\251\363\277f\271\277d\344i\216\024\332\262\277\320\037\310\302<\007\240?\360\221A\366~H\241?\205\204U\243\2309\246?\225\312\272r\367O\227\277\225\002\314\30644g\277\205\307\321\320f^\265?J\225v\242_i\240?\220:\240}\250\223\246?\277\026\266\013\342\355\256?\354T\256I\321I\207?\354ET\214\241\246\200\277\236\367\r\342\354=\260\277\227c\315,\325\263\220?\206 \240\033\346\216\232\277\305/\"\227\336I\220?\212\234S\001\233\302\272?\320t*\202\260\203\241?\354\243\254\256U\336\274\277p\261\211\325\353\r\231?\317OsH+\314\201?\331z\345\344\225\273\262\277\314,n2U@\236\277\363\332\346\340\023@\206?\007\333\367\212\231\003x?\320\263\322\3269\326\250?${\3741o\231\231\277\305y\177\025\207F\203?\363\216\260\206\311\t\270?\021\252\221\031AJ\273\277:\006\222\265\321\300\271?\032/\310|\2520\245?>\303\010\330\007\323\261?\177\201\0343\262\320\256?\014\247\333\241\302f\254?\020\017;Za\034\207?\311\350\371\363\020\027\243?\036(\260\033\262\027\266\2776\221\013\203\232\030\263\277\031\177o\325\210#\242?+\363A6+A\251\277x\343r\022\332\200\246?\361\357b\\\231%]?\251\344\377#\247F\302\277\202\373\200\256\004\027\230\277\242\250wh\3746\276?uP4\364ED\266?lD8h\240E\246?\177O\023\355\251\357\242\277>\214\262\014;lf\277E\206\340\342\370\312\213?~@\033y\202\244\250\277\016\021q\242\242\337\241\277\376\201\265\003N\023\256\277\306=\226\252\'\177\261?\300 \003~-v\237\277\341\376\240\220\336\036\206\277\213\035\006\'\264\276\231?\226\006\374.R/\225?4\257=T?\231\241\277\\\246\302F\033-\266\277\340k\006\375\264I\177?\r\354\032!j\344\220\2774\314\250 \030\245\260?,\327\224\030\232\345\243\277^\252\002\027\323\304\221?cAs\036W\276\275?0C3Q)\327\245\277X\006\322=m\360\246?2\255\'\364&\244\246\277{@\025\264<)\243\277\235\306\377\366\322\300\227?\001\366@\n\214{\221\277_o\033\026\335\354\246\277})G\345<\251\250?h\251\346K}\212\233\277\361\023\3708\"\003\265\277\006\232P\325\352\240\246? 3\213\342\267\323\276\277\263Vd\316\204u\244\277\265GY\033\234G\261?\312\273\005\316i\034\236?\016*.\005\231V\266?\363\266\367\307A~\253?\231\330\021D\314\231\264?o\026\001\200^\024\241\277\017\247\334\333\234\235z\2778\326z\250\362\331s\277\2317\302\334\024*\271\277\273\355LS\350y{?\241\t\024\006\034\177\233\277\233E\261lX\252\266\277\276\000\361\261m\013\240\277\210\377\233\245\034\350\207\277u\337tx\027\322\261?R\322\300\022v\n\256\277\267\260Cajs\252\277)<\364\026\027*\205\277@J\306\304\372\267\223?\344\332X\027\325\270\242?\240\245!\022\234\223\230\277\"lf4\231#\274?\211<\005\350VV\251\277\207\024H$ B\223?t\373\217c\"Eq\277\221\211\030\023Cb\223?\212\341\3362v\316\206?q\217l\256\325\323\301?\206\323t_]\335\242?\200T\036\210\340\316\252?\013\260r\277$\'\250\277\232\010z\003#\362\263\277Z\211\376\241\226\200\230?sz\205\236\251r\255?[,\226\227\226\014\246\277,:N\335\366\237\230\277r)\256\"\016K\231\277\214+#ZVuy\277\366\336\021\216e0\243\277Y[\216\217\256W\214\277;7\325\352\261B\271?Z\364\014\026\314\243\270\277\017~\223\316\301/$?\200\355\177\302\327\336\242?\224\\(V\345_\214?\257vH\210\261\000\250?\233iN\320\375\345\253\277\250\314\321;\250\250\234?\'o\3274?\245\263?\006\037P\265l\246\260?\007Q]\\\r\022\262?\274\235\376x\300d\202?\365Y\230\367p\210\266?sB\255\245\010\322\225\277\304\t\023h\212B\242?b!g\364\251\276\266?\351\266y\354\024\240\247?\362C\030\340pZ\256?\306\025p]w\316\231\277h\034\215\205\233\217n\277b}\301\0179\013\263?\372\177\251\370f\205\262\277\350\2240\304\013\305\202?\000W\342\247\027\013\251?\325\326-\350}k\247\277Y\025L\341Q\227\207?1\233\344\267\210\371\247?>\255gf\017r\273?)\332\212`\312\244\250\277/\257h}\361\374\246\277\'\202[\271\016;\273?\243G\340\024\265\367\206\2772\221\364\214\325\212\264?\254\370z\365\343eB\277[0O\340\373w\250\277\2769\366<N\271\247?w\r\356\270\230\223\234\277\2571\356\001@\021\254?\372[i)\321\016\242?\361\303 ,\240\302\240\277%\376\235\351\355\243\232?|\005%J\230u\246\277\027\324}\256\326\301M\277\372\254A!W\266\236\277\246[\262\206g7\233?\2358s\272\206\375\250\277lCss\205]\264\277\017i@$>\236\240\277J\330US\2056\200\277\335K\263\370\363\325q\277\271\263P\024\373\t\231\277\024\352\201\251e\"\261?I\370\243)\341\016\255\277\202\306\272\273\300x\241\277F\205b\371$E\263?x\337`\361\243\241\213\277\354{\242\324-\267\255?\342\233\232\353~\337\207?\237)\004r\370\356\267?\356\"fZ\246\314\270\277\312\264\033\010\263m\254?L\372a\221\236\302\253?01\"&\331\256\242\277\"\304l\305\214<\274\277\026@\314\373\217\310\250?\030\257\\I\346c\232\277\365pO\344\203\302\243\277\377z\302Vx\240\262?\n\304\326\253\036$\221?RH,\306\275\226\227\277\242\336\301\005\"N\250\277\005Q.\325\251\210o\277%\0208+\354\032\236?\222=\336_p\020\221\277\271:Y\013$\006\301?E\254v\207\310\236\204\277\005\265\347\307\374\276\300\277\031\371\315f\272Q\235\277J\206\346u&2\227\277>x\312\343\205\216\240\277\004P\343M\252s\246?s\300EI\321d\257\277>\202\030Um\334\252?\204\307q\022p\274\276\277\274L\212N\014&\242\277\213\177\240\363\273\217\256?\342\205R\r\364\375\243\277\207f!>\261\341\221\277\214\302\361(\227\330[?\n\232\303]PC\272\277\303\355\227\316\305\331\217\277\204s\335\234\301\354\243?\246<[\210\177V\240?\003\371\330\267\352\025\221\277\'\026\307\"\214\266\222\277\337\247v\267\3324\245\277\331zT\365I\246\257\277\270\262c\354\026\217\200\277J\2667\261\'t\241?\321\036m\301\032z\243?\033\376\300<\263\017\221\277\006\210\267\332\203_\255?E\204\271\264)\r\254\2777O\031\022\324\035\267?}.\345OM\"}?\343\247\036\317\333Z\267?\277\232Z\261\307\241\254\277o&_\364f)\236?\271\274\270\244\013\312\221\277\000G\034\340\345\030\267\277lTl\330iP\267\277\007\020\200\232\335q\231\277\344\217\342\317\362\373\256\277\\\'\342R&>\201?\223#_\234\257\203s?\021\312\204$\000\216\263\277\323\3102\350\021\264\223?\343\236\232(\264\204\262\277i\213\0279\365W\252?\256\032\353Z\355p\264\277\004\237M\241q\332w\277\024/\001\317\002\341\272\277\313\307\231w\242e\243\277F\"\262\202X\313\255?\005\001\3065~\"\261?\005\013g\300\324\244\226\277\375_\331\326GV\246\277V\242T\344Ch\263\277\031\245\255\005~\245\247\277\261%\356\2374\246\227\277\017`\226\324\322 \227?\325w\354\031J\233Q?\204\357m\344^\357h\277\211\307+\205\305\203\221?\346\\\374\320\031W\236\277\347\2125\301\220\250\232?\224KJ\216\013\201\233?\367\002\353\372\263\211\236?X~\307\256\207\245\260\277Q\245y\361\254\253\201?\366\244\024G+9\245?n9u\271\002}\242\2773\032\222[\r<E\277\340\000\210$Wl\212\277\271\251\026X\204p|?\245@\337\254oB\223\277\316\343\026Z\004\t\220\277U{2\256\266]\231\277R\231\235\356\360\331\230?\260\203\317\000B\"\246?\325\341\024\022O\260\203\2773\256\255b\260\271\250?\267\352-<\356\301\303\277}\350\221\261P\323\200\277\347\203:\277g\014\235?\025\371\220%\251C\231?\341\304\306Y\200\230\260?E2\201b(\335\200?\323\001*_\274\252\264\277+\242\202\347u\233y?kg\023\030\324\221\260\277\3301\314&\366\370d?\202\303\303\034\375(\241?-5\217\037cZ\260?\231\210[R\267\376\221?\364\025r\014m\341\243?\314=\363e%N\250\277\201&\237!\343\251\255\277\363\036\333\035Y3\260\277\310L M\353-\237?\341\020\373h\2711\251?\331\244{\260\177\204\257?\251\337\245\241\342\375\260?\253\210\300\301\001\325\242\277\260\023:W\206,\240\277\363\253\342\363\204\336\222?<\206\251\200\372c\264?n\375I\335\'>\242?\262\271\260$\001G\212?i\204\270\213\255\357P?\306\201\3455N~\234?\203334\306\270\205?\324\214\237\331R\212\264\277\037\'\021\315\002k\235\277MF\010\372WF`?\013\327`\036\332\256\245\2771\334\\\215\223\204\222\277 *\243h\321\025\253\277`\332\257\007FA\261?\035\257\275\354\014\251\264\277R\345\350p\347L\226?\007\3612@~_\247?\336@ce\375\242\211\277\314\252-\224\035Z\225?T\351A\312\267D\266?\331\201u\272\377tx\277\313Ys\331\244\365`?\303[Lv\261u\241?\244\355g\343\215\352>\2772&{\263\013\241\226\277\264\232EW\352\251\243?\227\227G\030\340z\257\277(mO\252\231bp?\334\n\310\231!\362\245\277\377\224#a\016\037\243?\202~\340\231\207\307\230\277\201\244\021mQ\036\250\277\215\357\221(\362\350\236\277\244\001Ah\343\321y?`E.G\340\365\246?T\363\237\243I\240\250?\227\307\203\336S\363\261\277\300\340\217.\371lD?\335\2373T\271\037\232\277\355\312\313\027\330\344\236?\232m\020\241\336\374\253\277\365A\215N\352\346Q?=\3511\321\351\361\254\277{+\n\303\307\313\270\277\233(\230\223\023\356\224\277RC|\261})\207\277A.\235\314\014\036\240\277\371\262\033-\3156\235?6\257L\\I\001\271?\345/,p\010\327\245\277\244^\277\267\342I\257?\301P4p~Z\227?\277+\322\'n\375\251\277\323\264\213O\350\235\213\277\033\236\002m\n\217\254?A\332\352\233V\321\240\277\236\020\265\375\377\0333\277u|\2775~x\261\277#\251\033D\271\206\255?\302*\202t\\\357\203\277\0144\215[\'>\277\277,\033\031\347\315F\217?\022\271Q\005%\300\233?\322O\274\027C\336\256?F\333\343\352\363\302\230\277\344\230`\2753\323\241\277xT-0\255VH\277\301k\233GS\223\236?\210\263@\033\000\203\220?lY\215\005\033\367\226\277\354\305\261\202.2\243\277\000)\244\371C\337\255?\"j\302\251&\327\271?)X\352A\213\352\212?\317qF\023\326\371\247\277\310{\234h\241#\201?\206\325\256\217\364d\264\277.BF]t\340\200?\303\331\263\337w\330\227?M\272\271\003YY\260?\250\376\306\353\207\201\220\277E\257\365o\311\032\247?8?\007H\3443\260\277\344\007>R<\331\236?9w\210j\274C\243?<\243\310V\n\355\234\277\261\244\351\037\327\247y?a\3539\210\2377\260?\337\255\245&l \302\277\353\211b\202\277`\245\277%\351\n\261\344o\266\277<\341\003\372\025:\215?\343,UC\210\247\257?\217\224\342\307\000\323\301\277\337F\253\237I|\301\277\302\000\235\263\030\035\261?\274\340?4\002\264\257?\340\"+\026\322\214\275\277M\250W\206\030\253\230\277\304v\351f\267\265\247?\320\364\216\n{\241\257?\2753\013[vD\240\277/\360\331\224\361\021\246\277\225_P.B\217\242\277\021<Z\033\336\320\222?\241\2335\255>&\260?\332\252\014E=\321U\2776\200y\333I\236\217?\030\251\271\344u)]\277\305\007\354\347\204\010\260?\366X\031D\274G\246?\375\377\221\304\201\037\244?\213\221TH\010\243\207\277\"\337\217\266\266{\202?\004N\232\316^\347\245?gy\202\003\241\007\261\277\353\370\017I\035l\274?\242\331\266v\037X\245\277%\335\230\237\274\217\250\277[l\"<\373\365\210\277\202\303\216\261>\034\251?\350\232\210=d\345\255?1\272\241\016\207\237\233?r\327?\177k/\242?\241\220S\352w,\257\277\246\346i\312\n\275\263?\331/\272\352\352\207\226?\231\230~\255\361w\302\277\256\215\003\316\223\377\211\277\341o{?0\352\222?\321\r{T]\232\234\277\n-\223\251^\177\220?\256\317\021h\346\367\210\277p\355hGz\336\261\277_\222\2436\317\227\177?\003\272x\332fj\263?,\221H\rd\303\254??<\251\277\372\335\265?\224F2\361\355H\267?\304k3\370C\034\255?FL\241\201T\016\251\277\n\205\245%\246e\255?a.\032\334\226\\\243\277\225\210\n\031t\343.\277\262\003\376q\005\034\263\277\021\260\221\234\216`\250\277\r\353\237RW\303\257\277YJ#\261+S\244?y\216\320\"]f\262?\205\215\2003q\336n?\177}\207h\3417\250\277o\034\236\376Y\346\243\277j\"4\001\007\031~?\030\367\365\270\216\307~?\037\253\223>\336\341\231?z\361)*\217\013\236?\311Hl\023\356\334d?\330\213p\313\250\327\222\277\000\214\365vX\211\216?\r\266\333H\232O\241\277\003\210\236\306\300\034\247?\373\225\304\024p\240\252?\275\'\333D&x\262\277*\377\235\204G\364\273\277NK&F\264\030\274\277\031\003\253t\377\212d\277\275\373\276\022 \250\241?\212\240)8K\262\277\277\002\024\3347\200\023\256\277\207(K\202\275v\203\277\033\242\030\226\032\002\270\277\372P\325mc\266\264\277\211\207\036\245\350[\241?p\2314m\370\346\245\2771{\253H\251\033\264?j\2656\002\207\233\177?G\267Rk\207,\271?\\\250\354$\200\375\243?\317-\222P\317\021\251\277\204\340$\005\267\366\232\277!\263\013.\216\037\201?\236\340\353\244cM\271\277\306#\352\335\023s\300\277\276\222lL\344\241\265?u-/\2368\212v?Ly\023u\374\016\266?\222\232\334/\001|\260?\242\217\3316\004\263\236\277\033&\301O`\232\253?\247\007\333e\237\221\263?\367\353\252\024\\\021\226?\033\223\333\026iP\210?\236\331\334\327\005I\232\277\255O\0316v\336\300?\316\333\343D\244\237\272?\0161\202\307\274w\224\277#\r\231]\305\247\233\277\202\254\313\220\007T\260?\275\211\3133&h\262\277\226\251\022)\204M\261?\261\337~\265\346T\251\277\032\261\271\215\227\330\267\277\336\234N\020\002H\204?\005*\205\302\313\370\241?\304\177\326\"\322\234\261?\301~\"1\016~\252\277\254^\272\315\275\344w\277\203=~\272+\212\261\277\n\356K\257@\314\267?S\353Y`TJ\244\277\363\224\251\177\036\231\253\277Z*\214t\314j\244\277lw\023uU\207\245\277P\215\031\372\320\206\223\277/\376\327\360dO\257\277/z\242\374\214~\205?\026\244\266\225C\351J?\031\020\272\316\340\\\254?\205\177\271v\363(\257?1\006\n\247\235\222\243?\251%EQI\361\226\277\355\276\037\371\344\'\263\277\013\222\005!\0276\241?\"\312\3006\230\343\257?\370E\257\246\320Q\243?\374\366\312z)I\273\277\227*\354\247\t\275\270\277\245\034\024\242e\213\225\277C\357\307\312d\236\252\277\303\310\231\016\222-j?\033w\345\n-\265\206?\362H&jX1\254\277\334\3524\316G\330\203?\006\370\221\177\016\250\242\277}YG\332\023\261\267\277\340b\336\024f\376E\277\317(\243\333<\005\263\277}p0VA=z?y{C\307\270\322\231\277\245\257\302\262\'(\225\277\270GE\217\3218\233?\003\024Q(\347\227\261?\036\010f\310\265\267\245?\357\361\256\017\241\214\253?\002\031O\343#g\252\277\n\255c\2762-\250?s\363\004\206\336;\242?\031i\036\016\017\327\252\277<$6\322P\036U?\367\271\336\363\3511~\277\265Y\257\r\342\212\230\277>\010\356)O\316\220\277d\207iT\361+p\277\227\336Nl\2335\215\277 \357\333=\353\340\204?\343\320\3569\273\352\242?I\013\274|8y\244\277\376\032\335\023\315\006\212?\010\352\202\232\250\202\243\277IT\256o\211m\221?\237\374\207\341\304\341\261?P!C\017>\264}?\271C\316\361\356\030\234?\013\n\277\004\305q\236\277\335<\256g\270D\242?\353\343\330\t\216\006\217\277\331\372\211\243\222\366\252?z\230\323\262\243z\256?\307\243o\017\032\307\301?\n\365\345(\213e\254\277\354\344>\264{\345\251\277\213\243\014u\024\025\223\277\270\331uo`\344\244\277\211\253\320\206\345{}?)\220a\352\3368\210\277\247\010F\340|\320\255?\304\032x)|\023\260?\002]\t\327\014f\227\2773\202M\2271\254\244\277\362\230m\3062\tn?\3151X+\254*\257\277C\202%}\351\'\253\277T!M\304,\211P\277\022\036\274a\306te?\277b\304h\201\336t?$\2461\231Q/\243?G\314as\005\350\211?bei\356\n\n\265\277\274\256|\037\365g\263\277A\362\246@\331]\254\277\000m.\013\345\261\217?\213\334\000+\353@\261?\235\227\037[#7\235?\363\3329\321Ct\215\277M\3671\031\347\373\260?\367\034e\362\314\300z\277\317\341ZrY\270\251\2770\326\267\234i\266o\277\021rJ,B\014\246?\216\242\341\364\370\263\267?\306\227\201\006\333\000Z\277\323\264\346\255\303\034\240?\314U\3420\365\273\200\277fb\373\034\234\376\252\277\341\006`:\215\326\237?\372#8V\002\335\227?\253\244\274\324\332$\225\277r\226^&\211\324\234\277,\010\250\264\032X\200?\202]\320TNZ\236\277U\260\200\017\237\225\244\277G\246\tL\355\016\271\277\017\352\311\254RN\251\277\265\355\234$\304\364\234\277\325\344\326\\\314\272\205\277\222\355\204\250t\030\250?\0236\2415\006x\232\277\"\232\327\016V5\262\277XK\325C\037\377\243\277\254\377\177\246\006\260X\277\226\206\034\352N$\247?.\240e\351>n\202?j>\376\034\256\224\224?\326\257\237\034\232]\243?\330\246\007\303\251\206\256\277\224\020z\352\223Y\225?\334\300|\213;\317t\277P\342\334b<Z\266?\037\253\357\267\351JK\277\302{\002c\215\277\261\277\212\352~\005\"o\255\277\360\201\344 !,\243?\336\247\274\t\340\377\203?\201\245\315\274\336a\210\277jc\r\211\300\323\245?\023m\002f!\004\232?\310\335\0039\337y\254?h\022\366\004\023\262S?\345\243\260\201>G\300?\232\254 bs\017y\277\263<\0055<\010\266\277#\026\247\030\310=\247\277\036\210!\225,\267\231\277\247\366:g\365\232\226?*Ta\r\355\010\253\277\304#.(\212B\252?\352Sa\364\302Y\212?)\226\215v\326\300\263?\271\320\341\000%\337\240?Z\237\027x\363vY?\016#[\236\233\235l\277n\205>\332\3001_?D\276\257R\314\361t?\247J\023*\2711\300?\263\006`\354\214b\244\277\233\311C\353B\222\272?\004\304\273\350\3269\205\277\307\335\346\023\307\247\234\277U\3616\343\304\255\230\277\223\261\336\2215\023\263?\330\337\337V+\223\247\277\246\266C\306\344\326\261?\035\212\377\0227\207\244\277r\347,\253\006\221\231\277j\210.%b1\235?y\'\260\272I\335\246?@\'H6\255G\241?\353\256T\313+K\212\277\000\016#\265\240K\230?D\337E\251p\306\200?\340AId\236\270\256?%\023+\244\252\017\244?\234\'\236\350<\362\261\277`\207\032N\305]\232\277\323\371\227\307\235*\224?\201\313\275\351\264\223\256\277\370T\226\373\313\256e\277\244\001\316\203W\355\241?\'SG\323\342\257{\277d3\254\267\337r\263\277c\341\356a\177\344\241\277\363\016B\344\2375\261?\3443)\035\314\212\256?\030\23751\276\344\224?o=\320\355\320m\243\277\353\245\2212\0304\221\277\210\001\271^*\223\263?U\333\371\376\2319\262?>\371\206S\356\227`?z\r4\263\234c\242?Q\240\246|/\352c\277\004\277Z\336\266\036\200?[g&*W\227\231?^\233\002\333\261\263\265\277lS\020\216\210\376p?85\370\n\037\203\220?\277\256\220\322,T\225\277u\313\302}=\365\256?Q\223\363D\300\177\277\277\231\363\244\261R\320\223?A\336\336<`\253\242\277.\351\245F(F\250\277\221(ao\303\\\216?\317$1>\363\037\210?\204\255yq ,\262?,\027\2076\271S\254?+\372I#\201\276\260\277O\355 \315\307\211\240?T\005\311\337\355\304\226?E\321\252\211\317\350{??\231H\225\350B\240\277\262\277@\201z\245\250?\336+D\227^\350\264\277v\331\337\203\330\220\244\277\004\331\361\201\372R\242\277K!\311\266p\017n?\204)\362\355a\333\245\277\272\377\246\321\327\321\264\277\233\000\373!\344s\266?\375\337j\010z\251\271\2771N\261t\307<\271?\367\027\305\023\200`\254?\254\271\372yd@\244?-\213R\253\005\344\251?yv\205\201\314\200\247?#\3624L\362\376\216\277_\000\354\345O\013\232?\241\1770\207\264\n\205\277\3139&s\177K_\277\264\377J\317 \030\264\277\365\3210W\000\200\253?y\\` j\234\260?\016<\300\315\242=\301\277N\003\310\261\253\226\303\277\026]\204\272\211\261\242?5Z\373\251#6\210?\025\206#\335\323i\233\2776\360\205\262\276O\220\277\301`\275`)\030\247\277\322%\340\351H|\210\2776\220\216\272\214)\211\277\n\227V\'d\361o?R\330f\326P~\252?\005\245^\212\255\375\261\277\340\031\020\314\026\241\257?\216G|\377\275\370\246?\031\\\350|L\214\243\277&\307\215\212\253~b?\235\2038\037\253\232\261\277}\270\013\200\253\031:?\001\231\366[\342\373\235\277f\307\231$s\272\245?}0E\276\034oz?\313$L\317\232\323v?\300p\014n|\235\211\277G\033\020\257\013_U\277tf\216Z\334/\247?L\226\202H\251\003\245?0F\250\366u\255\233?\001\306{\352;~\302?\t\t\260rC\032\236?Sxk\023\2608\243\277f\343$\226\006 \263?\270\317\371\324\353\323T?\330\363\'\241u?y\277\025(M\005\217v\220?\362i\300>N\030\237?\0236\2727t\341\247\277O\324\307\2316\310\241?\343>T\272\010~\223?\243Pb\036ak\246\277!\216\223W\370R\265? O(\234#jV?\327\022\230\243\361^\225\277\265F\274\037\0220\223?\363\333r\324\364\333k\277\024\033\372\000\200/\272?l8h\340\357.\201\277tI\2549\2561\262?h\247\334\212\354a\264?7\234\373\252pmw?\216Ol\276\355\323\201\277&2NN\354\213\226?\375g\002|\323\242\220?\340\303VE\332P\253\277T\257\323\340[\233\236\277\316\240v\023\344\230\255?\032cN0t\331\214?b\350\004\264(%\205\277Pp0-X\326\260\277\001\321\222\200\020\300\242\277&C\267\314\347z\252\277\360\202\271W\374\031\257?\257\316\245m\212\313x\277B\330K(4H\235?\337\214k\344\263\272\250\277\327\006z}\211\241\231?>g\\\355\007\351\253\277\177\341&\344\371q\204\277\301\331\177\225\360\272\272?%X\023i\274O\243\277\036t\331\302<\327\230\277!\264\304\365\253\031\300\277\352(u\332P\256\255\277\024\211WG\310\021\247\277\232ox\366\247\301\216\277\014\325\331\257SFp\277\207\312\2323\263+\247\277\014\241\312H\\g\261\277\302K\204I\307\221\246?\274<A\017!F\235\277\214k\275b\307\356\261\277\3253\304\271;i\253?\032:2\255\351r\260\277\225b\205\312\004\352s?a\2624\363z\200\260?w\332\241\307e\364\242\277Y\002r\343\030\000\240?\036\200\355\357+\021\264\2778\275y\241!\210\241\277\302\366U\261\333\364\227\277p\222\232%\2733\242?\253-\227\000T\320\260\277\256\003\251N\303m\245?\340\027m[f\016\244?\272\373P\273\331\317\251?\256\335\317\r\267%\267?I\r^D^U\244?\003S\300-T\243\245\277b\204PT\340\277\226\277\360\341\222\247\262Up?\370&t\270,\311O?Y\'b_\316\302\235?*\177\354m\313\013\242?\265\376\034b\035\034\177\277\3755\245\031_M\244?\251\016pJ\337\315\240\277\363\353\235z\n\036\243\277/\304w\357\251$\177?\343\252\325\274O\361\200?\327\276\202\271\370au?\3607\233:y\n\240?\233olh\302\030\217?\276\240\"\222\246W\245\2779\035\240u\335Y\247?\002\307.s\255\276\260\277\241=w6\325B\240?4\306\261H\"^\244?\033\370\242\314\177\205\247?ts\253\220\016\323\230\277_F~\212\233w\243\277\326j\336\272l\201\230\277]\370\006i\312\327\204?\347\t#\240\242\214\266\277\252\177\365Zj\332t?\367\200\261L<2\300\277\017\365\222\032\032p\256\277\3427\217/2\210\214?\007\006\177\271\005x\241\277\347Y\222\0338\003\262\277dT\250\t#\205x\277\251\325\274h\244\302\260?PUr(\370m\274\277\254%\346LoZn?\243\2260\006\031\000\212?x\312p\364\237\343\223?\343\367\374\2771\217\200?\205o\006\t\036\363\216\277`\317\342\206B\321\235\277\271\240\373\255I\326\242\277\210\313\241\0026%\255?\370E\223\342\306]\241\277\330\255\220\366v\254\242\277R\373J\251\276\n\263\277\215_\314\250g\214\254\277\230f\343\3548j\267\277y\3056Yv~\261?\203\376\205,+\222\251?\240\002+\351`F\257\277pj4\355\2314\221\277\205\242\332\013\025\004\266?\244\nv\377K\361\250\277\002\336\256y}\373h\277\024\204\006\354\333\210y\277I\243\2146\005\205e?\375\336\303\306JG\234?i\351\010\217\341K\260?d\302\312\370\n\312\210?\240\265\361N\"\262x\277m0\227\214\254\335\257?\262\327\0247\345#\270?\233QE5\340\303\254\277\303\177\341\222\370\367\256? \033\010\216\023\271Y?.\030\004\004\225r\207\2774\233\027\305\267\252\224?\202]\334vze\243\277\263\374\360\350\016\273\270?P\330\nb\366`\257\277\207-\337\207\210\206\253\277s\230\317\376<A\244\277\005\302$\345\017\223\220\277\210\266/%r\337\260\2772`z2\366\005\233?\306C\237\303\207\316\260?\020\361F\001\317z\213\277\023\267Sj\254,\264?\241\241y\214h\022\240?2!/\033J\276\301\277\334\022\364\315\020\002\235\277\302\264j\204\036\033\274?\202\227\030U\007\242\226?C\204E\224y\316\231\2772\377\354$g\010\256\277D\364\264\343t\226\242\277\233)r|\247W\225?,\261\371\352_\330\241\277\255\210E\205i`\255?\215~\337\326\t\267\240\277\022\320\312\377\334\350\237?\324I\024\245}\375\275?\323\310\370\371\033\004z\277\335M\250\371r\367\206\277\345\033\231D\204?|?\232\362\360C<\264\225\277\310\014j \256+\274\277[\313J\364\022}\202\277y]\203c\221\'\250?\366}e\021\300\346\251?t\302\3673>r\240?\313\210\340&9|\234?\236^\220\341\312\305\231?5/#+\322\334\240?*o\270\005.2\265?j\241\034\261,\030\277?\247\330\264\272q\224\271\277\225\240\203\036\204\371u?\334~%\274YO\222?\253\227\260\035=;\261?\363\233\205\340\311\276\244\277\244X\014}\016\252\233?K\352\033\366\315\324\262?\013&\223\314y\274\206?t\'i\2729\252\213\2779+\000\2533\330\200\2773\002\325\345{\302\262\277\340\365\366\214\021\n\221?Z\t$\"\365\356\274?\25047\325\206\224\220? ^\205~Mo{?\257\262\234\2618(\222?\010\273\261\260\332$\252?W\254|\351\254\242\264\277g\373\316E\010|\250\277\230\236`\314\213\364\264?\256i\246\305-C\252\277\253\216\326\025b\354\240\277Bg\324\336[w\241?^\307\337\030\247\273\241?V\000\334\007\226\177\267\27756\342\233\322px?\2124-\371U\323\210?\353\327w\",\372\220\277\240\005CM\2516\255\277\217\234\371\342\307#\242?\332Z1\221\014\314\306\277\017W\377\264X\363\266?J_\302%:\023C?\340qm7\253\264\230?\241\255\026}\250c\252?I\341\202\301*Z\225?\303\035\0254\365\"a?\375k\235\345\205\337\256\277\254N\223>\212\323\210?\375W%\016\223\343\245?#:\3650\362\372\240?\346\'\353\342\304\202>?8\001Vd5\333\271?\354\273\324\357.e\264?\334\317\014\341s\013\241\277V\234\'\033w\032\240?+\211\256A\353^\270?}\237JK\236\257\222?V\315;\207\314\232\204?4\205|\301\327\025\264?\277a\"g\034\223\263\277\272@\027e\0375r\277\300\317h\275\256?\250\277\303\310\302\265\201\205\241?\001&\357\266\347)\261\277 \300\327\271\r<\246\277\317\025\205\014\222\026\271\277\2527S\3375\211\247\277q\222\2633\032\032\207\2778_\271\235\237~\253\277g\373\206C\224\021\252\277\313\226\0316p\331\227\277>[\244\323\306\375\245?\346\025\341\321!\002\272?\314\227\216\345\317\315\200\277\330Z\224\277\2359d?\031\024\345\251\276U\310?\003\236\343\354\363|\202?\307\230\254@w\274\265?\240\022\3007\322\024y\277\362x\025\360\352\203s?\317\2072\232\224A\243?/\372j%\303c\277\277\256\257\345\305\212t\262\2771*\206\017U\220\253\277\nI(\001\340\235\212\277\256\355X\245L\240\210\277\256\221\207dZ\360\241?5y?\206TR\265?1qd\014\2440\274\277\003\271\240\007K\241\224? iZ#Q\365t\277UYa+\022\223\251?*\230n\311\301e\241?\035h\220\207\264\250\256\277\321+m)\241\211\220\277n\004L\232aB\271\277\344=\3612z>g\277\370;&\277+\274\266?\271\271\271\341\216\256\240\277\030\202\265\252\210\243\227?\362\214\242\324\003\354\233?t]\210\263\237\235\263?\315:\\B\301\332\262\277\322c\240\\\017H\256\277o,\264\372f\337}?\300\245\2316\345$\273?\000\327\231l\357|R\277\035\255\215\316\312S%?\024r\306]\236n\252?\273\324r\364\317\264\227?\216\273\013\355x\320\265\277\337R\030MJ\310\222\277b0ug0_\201\277\013p\t\300\231A\262?e\366\330\253\300\007\221?IqO<X\376\214?\337\231_3]@\221\277\337\332+\263P\337u?I\212\256\245\244C\230\277\033;\240\347\257\330\270\277\024\357\244C}\342\231?\202\304\214`\275e\254?\006\256M\261\316\003\244\277\276\231\002\335\323\253\264\277\247v\336RB\250\245?_\212_\235\207\323\276?\321\214\004\254\t\212\222?\357V\232\313O\030\263?\262&\251\007r\342\266?\377\n9\271.\004\241?\301\342\346\277c@\257\277~U\321Ml\372\210?H\377\311{\224\372\275\277\033$\002\376\273R\272\277c4\3302\014\026@?\242\230\243\317\342y\227\277\304\215\313\270\013\207\240\277?d\006\350\225\213\257?R\370\335\332%\346\260\277?7\3761\237\003|\277\006\275\354\220\313\001\266\277\034i\314\320\334\330\201\277myTV\n^\254?bY\270\300c\266\266?\262D\215?\270\274\204\277+\212\266\216\251\'\223?\334(\037{\215`}\277\'\314\376A\325\221\230\277\256\236\267iLDW\277\201\356t\223\336\374\260\277@\227\366]\236\356N?\363DF{~\201\301?\345\3146\031\3506\276\277A\216q\300\2055\251?\267\374\004Y\266\336\260\277A\334\203*\326w\212?\264\037\000\030`\360\267\277\2349H\003\t\205\266\277:ZF\027hdQ?\\\365\314\300\352\305\245\277\233\"v\'\n?\230?W\013\367 [\354\241?p0\245\357\307\002\240\277\345\020trU:\240?2\245\016sx5\266?G\274\332\230\2339\263\277\326\005\262.\340\303\261?\237\013\363\247\235|\247?\202Xq(\243\034\233?\032\250\223B\332l\254?\354I\035\377\373\377\260\277\010`\200-\372\017\267?\350;\017w\260P\254\277\377?\236<\377\300\301?\333\326\273,B\253\311?ER\346\366a\037\277?\032\n\004\365\225\321\274\277\246F\312\224\031:\232?\241Ph\024\344}~?x\200\013\221\203\233\304?\330[\254\001|\212\240\277\275\224S\020\276\r\260?\275\270P\253-5\263?\310\013\224@\317E\253\277\245\231\337\357X\263\207?.\025!W\347l\241?\002\252\026y\352\365\247?I\265\205\225N\250\231?+\035\335\"\206\017o?\367l\233W:\"\252?5\n\236\371*[\213\277\264\302\323tF\335\205?\037M\277\230\217\363\242\277L\007\\\213\3205\262\277\241R\035cZ\361\261\277i\rX\302Y\276\201\277\202<\026a;\323\251?:3\314M\305\363\243?I\245~RGD\247\277\247J\315Q\031\375\231?d\263i\004\240x\202\277Au\001w\2259\223?\023A\262\340kS\260\277?\247\017\374\035\233\240?:m\231\253?m\220?\202\314\337I\325\310\215\277J\202\026\0310`\260?\300\017\330\346\217g\224\277\0265\250t\230\243\266\277\220\206p\203\263\267\262?\200\272\035\2401f\240\277\r\246KE\351\335\240\277\371&/\350\347c\207?\255\232o\264\274\271\270?\313M\243da\300\241\277\027(\272>P@\237\277\3770\027\216\2606\233?\266\364\251\337@\332\210\277`\020\216\344\3575\272?\266)\314\023\026T\270\2773%\333e\037:\240?S\332-\363\344\306\205?.v2\222F\001\206?\205\367_\266NX\241\277B\373B\252\350$\224?\363\027k\242Oc\251?B\354\21392\216\235?\320\233]\245<\227\266\277-\016\263\305\217R\241\277\234\267\311\347\376\215\232?\365\323\317\203\352\002\240\277\242\017Xp\354Pr\277e\033\350\211\263\036\220\277r\362\323\362\352\216\256\277O.e\216\355\241\241\277\354\t\020n\031\342\271\277\237\t\266]\316J\251\277\224\241:5<Q\251?\354B#\230\347\343\244?\273\375\362\n\302\276\227?J\266\3319\2252\265?\016\033\217d\236d\240\277\254\014\307\315S_\251\277tr\033\274H\207\224?\330^\222\006wk\212?\002>\236\272w\027\265?m[U\302\254~\245?\240j2\221$\367\273\277k\313\302\242\036\341\221\277I\215VvO\235\263?\373\007Y\306\266\372\253\277|;\360\032?;\235\277J\270\021\253\031\372\226?\253\376a\0048Tw?\237\271\226\332\035\242\251\277\275%\371\337P\276\224?\033_\313\346\326lw?|FV\255\023\245\202?2\"\353\t\001\337\241\277\223\270\375\267i\346\243?ai\032:\202{\303\277\265\022\342\026\227\320\266?\300\371\215t\276\'\220\277\247\376\262\352A\363\244\2778X\246\235\365\364\246?\363\036\262\213h\364\207?\354\211\352*\351\247\242?\307hL\346\253W\243\277\001CIw\021/\252?\271k\264\277\267\217\256?e\244\207\202\375\242\223?\017;\311\016\354\250\225\277\3435\007\362\016{\221\277o\013\r\344\247\315\200?\237\313i\332\311G\221\277\355\216\311\216\252#\264?\236L\253\020[Y\232\277/\005H\302\0141\241?;\027\271P\312s\272\277\003\324(s\004\036\301?\354\017\026K\332\373\200\277\314\206\034\211\326<l\277)o\222\207\264\224u?Z\037\303$\331\343\253\277u\334/\333\350\304\261?\013\225\352@V\217P\277\005b\205\247\347y\261\277NQ\027(\205u\255?r`\216\031\264L\230\277!Dw\245\005\373\241\277.Q\255\310\330\363\252\277\376?\357\037b\337\247?\256\224\373Q^\230\220\277H\000%\245\330\257\256\277U\307H\251d\244\252?:\177\t_#@\245?\016d\337b\272\340\245?}V\236\366\3643\212?r\243\311\301Vbi\277\310=\234\227\2354\254?\314\357\217;\270\006\241?\n\3568<3&\247\277\ty\233p\272\301\252\277w9\246\302%\316\210\277\016]\331\311!\301c?GP\342}t\227\256?!\307lH\230\014\255?\020\037\251(vD\270?2\361U\336y\243\252\277\334\rca\255\252\242\277\215{u\335\001\016\254\277\t\004\301\374\017\031\242?>TT\te\303\226?CVy?\241\227\265?\254q\257-\274\241y\277s\276-\366\350\304\271?\326X`\236\266\333{\277\224Q\336 sM\240\277\345\325\014Q\344\222\225?C~J\001\207H\266\2775\000h\320\263\'\243\277\217\267\244\"\274\206q\277<O)\004\026{\271\277\226\033f\003\267\032\202?\345?\236\014`\371\253\277XK~8\246\310\224?\321\004\220=\ry\230?H\3318*\205T\243?i?WNGDv\277\236\307\013T3\375\207\277\341\314\357\320\330?\234\277\007\320\251\313\300\312\265\277+\200\004\257\031\363\227? n\352^\242\355(?LY\311\300+G\256?\245\356\001I\371}\221\277a%\346dbO\253\277A\360\344S\314Gz\277\337:\031T\377@\220\277\244e\356X\201n\254?\233E\2548\004\344\236?\021\032\013\222\341\200\235?\r\343\357\253\003)\242?\347\202*2\366t\263\277>\351\256\\\361\261\243\277s\206P\023\312\362\264?\'&\002\304dB\247\277^\006\264/\017,\260\2775\205 \357\314p}\277\223$d\277?\363\252\277\014\272V\026<\260\255?Z\200\373\227\237\304\250\277\222\367\243#T\300\244?u\353\313\205\300\201\244?n\375\377W1\374\251\277\3239=Y\360\263\245?F\350\357\326t\033\210?\255A\327\002N\230\245?X\034\257\275H\265R\277\214kr \001\005\272?\246\262\"\347\271E\270\277\3661$\332\307\371\220?\211\265\025\211T_\267?D0\0029\274F\263\277\231]\355\030\363\013\230\277\207d\013S\256m\250?WT*k.G\263?$v%\335\337\034\251\277*B9O\341\016\232\2773\232\215\314O\201\254\277\251K)\327\373q\223\277\305A\357\367\001\270~?9\rk\001\252\242\267\2779>\216\332\2604\274\277.<\261\241\261\376\221\277\340?H\334\201o\240?4\242\r\205\024\002\221?\273\371(\241\275\003\260?,\335\263`\014\325\253?4w\257~1\352\237?\371\365\004\333+/\260?\241\236F)j/\262?\331\225\\+\016z\230\277\005K[\215\014\206\272\277\"(\312q\036_\232\277\222r\231~D\367\300\277\262\306\374\0169\016\273\277\216\326\321\021\350\032\273\277G\025\0079b}\263\277\272\213\265\023\250\322\205?g\216\327\001=\274\243?\365\252l5iv\264?\310\323g\362`z\252?\265ES\236\342\307\\?\246\322\327\235\371ss?\277Qf~\035\263\260\277\205-;\234\037\274\215\277f\340g\211\237\243\263?bU\264\210E=\232?\247\007\024\254\344\374\244?\036\'\323RMM\222\277\376+\357\277\375\316\214\277\'(\343j\r>\224\277\363T\006\337!\223\261\277h W\316\200\225\270\277\013\007\323\221\343q\256?\r\027\371\026]\271^?\355\342\330I~nS?\246=\314\271_e\261\277\320B\351\260\363\247\265\277lt\272\347\024\304\231?\276\217\225)[\350\257\2775F\217>?\221\206\277\324\266\274\004\311\234\222?/\312\227^t\360\302?\250\\\374A\016<\220?Fr\220h\310\370g?\214\345\\\262]\270\177\277y\203V\267\212\273\223?g\021\372\026p\340\241\277\203\014\217Z/\260u\277GS\275\005\361C\200?\237\"9qp\375a\277\350F\240\315\033\373\220?\326\027\336%\036\026\251?\000\236\010+y?\252?yv\206[\300\003\231?\371\370\223x\321\r\267\277\273\273\320\245_\302\255\277\241`J\002\210\217\255?\307n\251J+9\244\277\033\212\353\\\224\327\241\277\326\301>\357 \373\203\277\010DC\177\005\260\254?5\3017U\022\310\252\277\312\223~\366\372\n\234?\365\302$o\304s\210?]\3765\371Q\377z\277\n\336\304\017\005 \257?H\344Y\336J\357\240?#&N(;6\277\277\210\344vn\257\257\244\277\305\345\200\0230^k\277d3\222\353\267\326\203?\2602\375_o\204\251?\024\327FO|\337\230\277\300+\322\375\354V\227?\030nCR\020\273\270?\302\256\367\310o\350\271\277\255;\230\242\0133\240?w\304R\210\272=\222?)\034\324n\3313\245\277\302Y0\014\252Q\244?\353\201\266\323\t|y\277\343\371:\303v\304\206\277q\243Q\302lS\221\277J\260\255\244{\256v\277\267\354\007C2\352\277\277\372\303\370\237\025\312\235\277\205\350\230K\271\364\246\277\254\235\234<\366\301\224?J\377\016\277\003\035\241?\021\313\320\322\220\212\254\277\017\000\247\323N\341\241\277\237/\352<\363y\206\277\030qt\027\314#\245?\313\240\344\201\363\300\235\277iM\222\265\024\031\257?\300\022}\372_\215\267?_-\352\377\341\352\243?\360\004\300\216\333p\264?\026\177Aa\025\010\247?\351gr:\000R\254\277F\003\2019#\375\222\277\310\014Y\300\227\035\253?FdiD\223\333\245?\300\363x\005~\332\301?*\344rg\212\267\253?5T\234\202\026\212\225\277%5\265\264\360\212\221\277\243\320\"\256xX\231\277R\217]\177\330\027\242?\373\360\267h\t\275\215?X\0359\276#\351\245?+\365\226\037\024\320\235?\370\"j\r\223\025\210\277\214+\315\261\235G\250\277\013R\2775\321\213\264?q3\233\253P\335\252\277\361\265\321+\236A\241\277\370\033\243`\2177\242\277k\334\275+u)\245\277\242y\265\257mE\212\277\007\257\360.\004\210\222\277}\235i\322\233,\245\277\241\300\'\250\234\362\250?\224C\367\005<\315\240\277\367C\323\261\252\347\261?.\341\367\312\201\'\244?\355\340\206\246\272H\247\277/Q\346\266\027\257\225?2\375\003\364}\273\245\277\325!\345\247\275\344\215\277C\355\271\225\225\225\272\277\0035\022\032\255u\246\277\240x\207\350\3164\224?\\.\260\207\177%\242?\t!\232\td<\246\277Sa|\343e}\251?p\261\346\r\202\230\224?E\275\323\223\037\007\264\277\206\036\032c=\037\243?\222\240=\371\023\310\251\277,\365\036sq\271\256?&\r\2543\025\222\231?\247\"\323\357\3536\215?\212\270\000\032\223\271\264\277\324w|\322\364S\220?\027\004\252\300\332\211\244\277\027Qu.\247Q\226\277\250\000\254\334\243\206\212\277\361X\352A4Y\265\277I\031\000\243c\253\260?\211\357\342.\006\213\242?\241t\334\331\250\202\244?\360!s\316?7\201\277\003bU\3174%\253\277\311+\346\327+\361\224\277`\376\314\224\246\254\206\277[\366\"y\356\010\207?\361\024^\244Y\274\224?\222\\L\364z\305\242\277\353\251\033f\222q\252?Ja\324at\270\252?l\177Ey\244\244\246\277\222-2\305\027\225\232?\343\017\373\232\373\255r?\351\341O\364\010!\241\2770\027M^i7Z\277=\232\013\230\240\010\277\277\234\224r\230\354\005\243\277\306G\271\256-\361\260?\030\231o\230\017nl\277\026\217\363\2270T\255\2774BM\2175\276\227\277\037\312\361\244@\001\266?0\320\211\215,\017\265\277.\033VyW(L\277+\223 ?\306|\242\277X)\346\325\323\001\264?[\253!\240,,s\277\300\311\223\000^\017w?h\324\223\254l\035\201\277S\304\325l\n\257\215?\347\3352E\201\260\267\277D\255~}nW\230?\241\201u\370b`\267\277\357R\374\324\357\005\243?\032I\213gY\353\242??cl\203\267\001\251?\330\315\210[\003\236\224?\263e\234v\033\026\251?\350{\337NyP\244?\233\206\357\365\375\n\261\277\373\227\013\006k\366\261\277\360\223\353x[\343\253\277_\003\276\263\3538\267?C\374{\n\237S\244\277\021\033\253}\035[z?\276\033\026\264:v\242?\277\254b\260\332\026\260\277\020\3054z\343T\260?s\224\232\206\324\316\222?V\016\016,\341\275\257?n8D\334\'/p?\000\341f\315R.\240\277\255z\010\362xl\266\277\2236b\275/W\224?\313Tts\340\n\263\277\274\350p\023\213\r\236\277\236\345(\326,\316\303?,\345\241\202\013tp?S\216Y\361\264\242\220\277\205\254\345\223Ss\251\277\267\2055\303K\343\246\277\021g\262Wn\273\300?\234Cw\236\n\273\236\277\251\327\355\375\250\302W?s\264\024\321\333\243\230\277t\226C/\356\227\247\277\310i.\361l\303|\277\212\351\347\261,\247\304\277\303M\0004e\263\243?\227\301g\036Z\274\225\277\313\003>\352\2436Z?N!}\264{U\201?\212\2626\205\226\\h\277Z\236\3512\020-\254?\271\261L\303/J\302?\020]\320\013Y\321~?1\210f:t\221\242?\\\223F\026@\376\207?h\031&a\225\203\276\277\235\310#P\256c\242?\2512\366Y\245\037\260\277\254:\3506\356\316\243?\007?\304*\224!\254\277ZL\223p$#\233?\330Lg\340\313Y\241\277)\202K(Y\003\274\277\267\t6C\255\274|?H\215C\223\332q\302?\240\001\255\334M\"q?\327Zlal\303z?\356\2071;\345\276\201?\205w\036\233\306\365\257?\242\240\035f\217E\257\277c\036\227\366a\305u?\023\253k\314\006\370\241\2778}c\333\377\206\260?57\250u\t\352\234?\256\307h)\314C\200\277@]\031a\215\262\253?\002\355\341\227\257\365\234\277\023\362\270O\353\244\223\277\237\312\036\022\237\035\244\277\2666\215\233. \242?\307\265\272\203\222\275\245?25#\261\330/\245\277kB\005\005\247\t\222\277\025\013l\335\277<\203?\'F\304\373\201H\261?\243\371Ca\360~\177\277\241\355\366\027\252\367\246?f\306z\226\027\366\202\277\r\t\253 \334\025\210\277\004h\355E~a\277?\2034\014d\006\375\240\277Cf\001\211\2320\220?\225\027u\251W\373z\277\216\334\306tb9\230\277\2509\005\300\241\346\260\277\032\252\035\200>\330\300?\203\351\263\276\217\356\243\277y<|\244\230\026\246?\333\365\230\325z\304\232\277\255\245\2736\245Tn?\267q\235\226\250Z\261\277\013\213\374\232,:\177?\'\321\355F\245\016\226?\022\'\216\235\366\'\202\277_\276\000N\037\346\215\277\014\205\311\\\006s\247?%\033i\322r\315\251\277\017\354\364\014\240\301\224\277b\250H\226\243h\236?\203\372\366W\307\277R\277(H\025\362\003\253\261?\004\324\214\312m\004\232?\213`\251i\3011\275\277N\377\211\246\013\236\210?\231\246c\237V\002\231?b\336\024r\000\340\252?o^\336@\016\r\241\277\317\367\312\014\354\007a?\n)\245)5r\265\277y\rL\247\010\026{\277na\200\014\251+\263\277\363.\020\036\336.\226?\206Z\037ga\336\220\2774\225\247\236\273\247z\277\305\255\231\342\363]\265?\352\243\350\353\036X\202?lS\241\324\263\212]\277\204yvvQ&\262\277\246?\310\226\352+\245\277\375\372\331Y\230\241\214?5\017\262\016\263\201\260?P\237e\331{u\220\277\000\253Xg\001P\211\277\317w$\014$\237\275\277\377\332\203\344\233n\220?\340R\213\023eY\200\277\206Mq\256\324L\243\277j\206\333\214\250\357\252?-\366N0\356s\233?V\256\277\351J\017\261?\266O\313\'\303\221\302?%\030\017\340\244\n\220?i\325Q~\177\250\221?u\210\361\206\373\331\263?\247J\2566H[\221\277\336ZOXR\275t\277\334\222\265\357~1\237?\331 8U\251(\265\277\246\233\']R\311\262?\235\341\342\273\"\010\231\277\357[\177\\\300\356\233?\037b\264F\177\336\221\277\204j\036\366P*\261\277\022\303\215\236\2768\227\277\203\266_5\332\210\262\277\002\305\256$\363\241\205?\212_h|\207\305\271\277\3613Q\360\017\214\302\277:\224\326Q\241\303\263?\222P\362%l;\257\277\354\346\306\\\036\330\272\2771e\203\235\324\'\256\277Q4Pl\220\264\227\277Spo\035Y\223\234\277:%\201\203S=\223\277\207\306\251\230[\343\242\277y?\252u\214|\220?\307!E\331\255\330\232\277\257l\031\320\347m\301\277\240\361\250L\002<\300\277\337\336X\346\320E`?t\2150\353\301\254!?\2159\202a\312\t\231?\227J\272\255\253:\227\277T\306E\010\035\352\256\277\233\301\322\201}\033\272?QY\256w\013\265\240\277\t\021)\"\\Y\257?\0035\027\343\221n\220\277\236\017\207\264\237U\302?p\356\372\2641?\235\277D\376\301\010\357\036`?\265\'\272\002\346A\265\277\314\273eWU\204\263\277O\351\332\356!\214\220\277z+\024ak\006\253\277\373\252\307\235\310R\253?\020\235-8\341>i?~;\245,\272`\247?5\322\037s\305\337\242\277\245^{%\376\330\242?\\\t\341\017\276Iu\277D\212\353%\212\216\222?\346}=\255\227\243\263\277L7\316Rw\261\215\277bx\243\371\201*\204?\265\370\017\2565\274\215?\372[\277\022\243P\254?V*\314\005\330\243\243?vH\001\337\304A\227\277\374\242\326\014?E\261\277\225\226Gl\312\007\234\277\266@\031V\021\\\205?\025\3426Uua\241\277\270\207\325\035\216>\210?B\322\261\265\331\225\257\277\323\006[<yq\251\277}~\360\363\224\204\230\277\243\220\226\346\236\'\254\277\256\231Q\271qt\233\277\256\244\007\221\343\263\241\277\261o\016\272&\340\205\277\247\346\257\037f\017\243\2776nFPK\215\264\277\313Z$\271%k\241?\0310\t\002fmb?\253\277\377\331\266\315\245?)\007\033\206Z\343\254\277\312\341\265\375\267\016\246?\342\2044\271\214\317\265?\306\313\344X\300\033\220\277\223G@1\314\304\241\277\021\005\207E\321\222q?\312?\303hL;\215\2778\035;\272vd\235?\034\034\367\334\221\016\237\2770\376{:\027\352\270\277\305P\272\345\331\311\245\277\003\010\224\231B2\303\277,nY\266\263J\247\277\277\035\277\300\2012\260\277\316\201\'\373\212\223\234?z\322\230\206Y\250\242?R\221\007\246\357&\263\277\362k\0254\222\217f?\325F4lgp\224\277,f\311\007\377\212\262\277\337\265\322\243\235W\262?\017\020\013P{O\\?n\241)\225\243\367Z\277\340\\\201W\367\312\223\277\301z\356\014\343\010\257\277H\257v\232N\301\215\277A\303\354 2\026\271\277\225=\243\236}\300\256?\014TGY\335\034\246?W\351<\201\376~\260\277\352\306\321\332\217t\237?\211\332\r\215I\347\272?\325\336xz\311\304m?:\021\\$s\3337?\235\244b\327\253H\201\277\253\314\303\233I\266\270\277;TX\272\221\224\243\277\267\341-\301\tS\242\277\035-\302\242\226\231\262?\207\034\304\030\177@\260?{\374D\030\272\010\237?\343\341\227q-\"\257\277\031/\006\224\347\027\277?i4X8\330\240\257?\312$\2461\211{b\277\225\024\207\207\237\323\260\277\324I\251#\270Y\264\277\035\031\353\341S\'\222\277Y7\251\214;\020\234?\330\250/8\330Z\232?\025\233\364T.\007\243?\200\316\240\375gF\203\277-.\374\373\363T\223\277\032\300\351L\217a\240?\315\274qQ\341\303\260\277\032\367\346\351B\366v\277\320}_\330\324\232p\2770!\357\315\222\245p\277-\300H\246\335z\220\277\264\335\243\203\243)\253\277\nlB\002\230N\247\277]\330\242\303\214h\260\277\3139\334vN\226\270?\215\3376\345~\247e?\224\366\366\246U\327_\277U\030\273\377i\256\246\277\202\233\003\262\201\265\026\277\251\004\244z`f\234?\265\273=\205Q\232\220?\204]\364\376m\254\255\277\202o\224\316\223!\223\277=\367a\211\360\310\223\277\304\350~\344\232D\210?\241\005\211\257\357\227\273?f\205s3\354\'\253\277$\310+\356h\202\206\2778\005\036_j\242\245\277\323\330.\260\t(\263\277\214Zk\362\216\220w\277}C?2\336\225\244?\002\273%\2352\375\227?7w\260\245\254\304\244?\"\240J\244\333\342\260\277\373\261\365\366\1772\257?!\266\234@\021A\240\277\024k3\034\340\033S\277\317\271\337-n\227\263\277\276\242~h\250\301\272\277\245\252C\341\255\261\222?\251g\2406\251\272\240?\357\247\277\277S]y??\236\023\234\300\335\025\277\320X\223PA\334\256?\207\330\201\262\207\202\241\2771x\020\246\210\273y?\r\353.\275\033\261\250\277\354\372\313\372j&\205\277Jq\363C\026M\250\277\236\211\226\000\235\032\235\2778\340\362\366n:\242\277X4{\322\017\206\237\277\354\014\366 \345\017\232?\276Q|\300\253\307\267\277\322\306\t\000\006\346\251\277\221\2131K\241\344\262?\220LGP\374\340\230?.\027\250\003\032\317\253\277r\315(\330\216;\254\277BA\345\312\024\377\263\277\035\202I1\212]\267?1\356\rA\352w\237?}\200\326,\021\216\241?\'G\302\217\276\217q\277\370\311L\210\343\204\264\277\006)\220R%\267\272\277?\373\014\204G\355\225\277\036\336\325\036\335\221\242?\377\350n\246b\023\237\277qtN\225)\022\270\277\0260\263\276\246\305\262?]\"\366(\035\027\256\277\177\3369\235\371w\261\277Xsiz\246\204\270\277\336\014qQ\327\023\247?\314\257\004\360\371a\225?\234\263\224\321\345\306\207?\374\254%\213\202\245\266\277\351\006\362\367\230b\276\277\343\317\213\374\311\252v\277\261\242\217\3109s\264?\216\324F\001#b\245?\325YBv\220l\250\277Ef\227\277pJ\234\277B\225\321\272;Ue?\254\n\331\344\220j\261\277[\001\322b\370:\244?\305\241\243LC\270\222\277ul\311H\336\027\234\277f\275\266;\245\342\212\277 \2634\315\220$\262\277\202\230\016\240\256\324\243\277s\017\273\352\237\363\270?\256[\343\235\205\342\211\277K\330fQ`Y\274?\242u\014H\371\306\241?\214\356`zq\013\254\277\377\355\226\241P\317\230?\236w8\3212\337\267?\024\360Q?\363\344\232?\253\006\256_\205\003\226?\014|V\266!\261\254?\233*\031O^\022\276\277\204\021\013\376\344\320d\277\350\376\0179F\222\240?*\230\340\244\037!\244?\335\010P\364D\230\214\277|\327\355A\\O\262\277>\021:\350\266\246\262?Hw\344\236\033L\272\277\362\300\206\263\242\257\254?\346\033\tH\2424\214?V\240\246Hqx\247?\0022\242\021/\340\262?\340\343\366\345a\366\243?p\377\220\001\3069\235\277\"\367\364@\230v\220\277n\220\036\254\\\206\232??\323C\020z6\262\277\027\254\202xr\377j\277-\013.2\343p\242?f\230\244d\024\347\206\277\231\343\333\326\212\006\266\277R\250\204\335\"\026\266\277M\0379T\360cf\277\331\317\020\257|b\234?\3138K3mK\270?F\371\237\344\000\355\260\277{\220\212;\371\026\221?N\025\230Y\370\013\245?0\205}\334\312\270\262?\357\302\276)|*\232\277\343\004\332}\354\320\275?\301\231>\026w\275\264?\021\000H;!\027\251?m3\332%\337\343t?J]\211.\227\276\234\277;[\235G\241&\241\277\014a\243Ai/R\277\017\007\013\351kt\207?\357\355I\261\202\351\261?\233N\264\216\334\200\254?8\030\246\211h\356\205\277\323\036\213a\036<\240\277(\353{\262>\231\211?m\007\313\036\205b\251\277`\251\007\257H\205\273?(\004^\301\001m\247\277\t\334\223j\242\201\211?\223\347\3233uh\240?\210C\343\260\335\006\254?xd\272\247\324\341\231?\372\207\336 o\265\207\277C\217L\367tR\227?\021X/H\314\300\203\277Jt\356\2733\367\235?\245B\267^GE\256\277-\2474\"O\217)?\003{f\3437\027\240?\312B\322\013@\257\261?\307\0248\377\236\213\267\277\270>\364\030\351\325\301?]\267\264kS\313\260\277&\356\013\236x&\231\277\375\277\034N\217\007\236?\303\377\2479\022\016\250\277*\200\365M\311\337\233?d\333\375u\365v\244?\251\340-\322\213!h?s7-\36350\223?Bf{\034.\024R?\342\375\213\"\274\244\261?W\230c\216z\021\273\277\024\005\206\317\375<\200\277\202\223J\016l\234\262?6\347Z_S\375\267\277*J~\324\034\026\264?k\244\276h\211P\273?\354\227\225Tq6\204\277\207\366\313\310j\352\253?\007\354\367\003s\342\261?\307\025\261\303\321\002\272\277\244{m\224\nO\226?\344\305/\333\233\356\226\277\347Yv\014\302\033\244\277\352\277\200\'^\210\224\277FK\004,\312P\221?*OH\334X\345\243?\0208\025Ar\320\242\277!\230G\005\334\334\225?C\014\204\316D\t\236?\003\303\250\317*\263\247\277\334\027\226\345A\030\262\277\242\257.\024\213 \242?m\335\352xtk\257\277+Q\363\036\201Lu\277)\266O\004\220E\216\277\202\365\341\361j\375\251?\222\256r\256%7\243?\312\307i\277\026E\246\277\306}\212\340\324\001X?\264\370\337\036\200\373\247?(2\024\301\3044\272?E\025\373\307@\244\272\277:\214\217\226\270m\261?\270\207\213\304\274\227\247?\362\t\255E\326\213m?h\270\023.\270\266\247?\327=R_?`@\277z\n\t\256\373\226\266?\207}\n0\000\027\262?b8\371\327\332\027\300\277\236j\372N\003J\260\277\347>Q}\266]\257?k\265\037[-\266\240\277\026i\3415_;\247\277jp\251\225\215\335\236\277\271\372\027\3045\273\227\277\210\224^\365\332\267s?\301\003\0134\215\302\224\277\014\005\235\313py\253\277\233HD$\355 \212\277\337@Z\031\325|v\277\024\306\244\0354\254\231?\355Z\013\312[.\203?B\2123\'\265\005\233\277\314 \230\245\177G\264\277f\235d>\275\327\242\277y\217\220\022%,\177\277\022g\006e\031\212\223\277j\371\236\001\323\353\255\277 \021e\334}\215\241\277\370\3215\310\205\256\226\277t38X\373xn\277\315\240Y\220\212\264\241?\240\370\360\201\2775\252\277\tZA\323\002t\230\277\273Uq59\302\216?\200V\033\314\202L|\277\327\037\315\216\233\367\211\277?:b\020LZ\226\277\332?x\007ei\242\277Z\367\016Um\202f\277N\263\354\332\326\336\247?$\004\004\326\307\250\251\277\ti\027\330\212\363\250\277\233j\213\n*\314\263?\232\223\304\266+K\305?\314\006S\003\234:\203?\204\t#<\262\305\264? \310\215G\256\315\232?\333;o\005\027\327\252?\222yg\336\201xd?\036\333\344\263G\331\265?\303\'\301\306\3073\222?\310Mr\307\347\217l\277]\230Fo\253\344\260?\017\317\035X\217\312\213\2772\247onJ\206\243\277q^\207\347H\204\277?\315tS\372\266l\222?\333\337\353\367\222\330\261\277\277!\365\232(X\240?\242\322\224\237\006\365\244\277G\331\370*-G\240?u\313\210\005\256\215\227?\365d\"\205%\230\267?\216h\023\204\237E\260\277\214 S\375uD\264\277\377\300\216~r\203\235\277\321.\213\253\034\356\255\277\242\223\0053\343\342|?o\241\262\014\300K\226?\003\201/X\'\200\300?\220\272\355LmL\201\277,ur\207\257=\216?\351\224\304\240d\311\224\277\003\266\245\'y\t\210?\004_3`S\251\262\277\223@\0145r\"\262\277\007\370\334\226\007`\246?30}7\005\\\233\277\306\234\272}\327R\264?FOdF\310\n\262\277\235\275LfT\233\221?\227\211gi\342:\212\277\342\333D\354<\374\263\277A\330\271\214\314\336\200\277\216;k>B\036\265\277\346\220\000Ca\201p\277Y.A\246\014\223\246?\215\030\330\003o\013g\2777\255N4\372\230\201?\001X3\247\037\237f\277\275NO\010\311m\252?\374/\307\330?9\241?\215U\367v\370\220\257\277)0\347\250?\326m\277eE\356HD\211\254\277\034\271\tUc~\263?\215\334c\243\205\030\246\2773\265y\307\215@\245\277L\242O\t\035v\250\277\224*\207M\212\311\253?:\364\260\031t`\211?\035\323\034\315N=\250\277LR\344p\014\341\306\277\234Y\251\332`\231\266?)\007\251\014\360\272\240?\266_\260\3205x\300\277\253/\3705l\256\201\277ESXO\375\220\230?N\246526\007\262\277K\201\365\372^\353\263?\254z\030j`\312\244\277F\025N\237,\270\253?\\\3003\210)D\225\277@l5\317\021\035~?\355\242\333\206\256w\256\277\025g\232{\200\326\247\277\016\347A\2257\037\206\277\250\312\207.\377f\236\2770\273k\3336\342{?\355\224.\335kt\205\277\3272\337>\373\212\203\277\220\267\305\r\030P\255\2776\352c\271\252u\255?95\354\264\"\013\262\277=\354\300\213\251z\240\277\212\250\220\273\333i\301\277\245\0205,\331\026\250?\362}\227\366\274\360\214\277G\347Pd\2749\250?\330.\313\006Q\374\240?\332\321&z\272m\244\277f\332\352k0\330\240?Y\272B\026\\y\206?\274\032y\310\342\222\261\277Z%wg\353s\252\277\221cK\232\204\366\253?\352x_\302\213\003\204?\333\316\363\304\274\002\225?\273t\262\252\202\314\272\277\251\302\362\377\021k\265?\303:\344\363\325\332\277\277\035V\027\206\365\344\242?\363V)\264V\362\256\277\256\376\350\304\311\035\247?\323\345\355\364<4d?\373r\337\377\316:\241?\227\243\344\335\224\275\240\277\276\320\356\222\030S\246?\330\356\010\263\372\213\262?\302\317\232\0359\342\266\2776\221\361\301\370\\\214\277\376\225\340\272W\307\214\277e\037\261\207\300\246\204?\201\340*\371Vh\270\277\252\324;%\304\034\246\277\271\\\373bU\353\222?v\203\374\036\303\201~?\253\250\001\347\315\"\244\277\254F\225\240\325e\240?w\211\307A7\215s\277\236\261\020\004\276E\266\277\013\366i\322\332\245\236?\377\257\025^\373\376`?\260\301*\276U\004\256?\203\033\277\243I+\226\277\306s$?\242\217\232\277-#|}\332\237\244\277{F\327\230;\210\242?\234/\253\221\304\032\235?\371{\234\350\2700v?\375<\2715-X\251\277a\230\247DUd\273?\232s\325\205mV\226?\020\034k:O\203\230?\233(\354\273|X\240\277\375nX\224\341\317\203\2774\250R\000\013\233\263\277\004\rO\353>\214\230?|R\332g6:\213?\334\213\340$\035P\262\277$\350\320\317Fah?\227>\020\262\337\370\240\277\rV\206\273\307>\277?2\245}PG \270\277\360\233\037\025\2209\246?\010}\016\2009\031v?w\304\305o>T\237\277N\335FsMkb?\364>\364,\221\262\266?\337\002\255\0252\224\201?\246\363I-\263\257\264?a\203\233\246\000W\220?\003\265\231\304\210\313\271\277\304\325J\330nP{?d\000\265\367!\221\245??\354<q\241\347\203\277\247\000o-\022\207\264\277\275^\374J\"\205v\277I\371,\322\3541\250\277\2419+7\\\324\242?\217\304:\337\317\017\206?\353h\320!\261i\235?$\221N+\310\242M\277\027wtG\321+\271?w\366\244\210\206\026\256\277\016\230\221\360ti\263?\327\272\371\236*9\247\2772\212*\t\006[\262\277\375\321\220\250\022\357\217\277\002=<\3337F\240?\254&\304\340c\032\264\277\316\213\364\367\344\321\251\277\016k\216t\253\343\226\277\270;\211\032{k\226\277,\376U\251yc\273\277)\036\260\363\000#\222?\364\312\2425W\177\233?\t\266\343\312\307\377\200\277\010\213Fc_9\215\277\200\'~\267M\"\202\277\326oE)\2763\220?`\246\257m\352\347\255\277\364a\325\r\340\245\266\277v\017sq\0351\247\277Bs\r\024\036\332\235\277}\352\"\024\r^\224?{7\210\236\271\300\206?.gW\361\004\371\245\277f\211c\342\333Z\233\277\244\245H\020bt\241\277\342 \014\327\nM\232\277\311d\277\305]\214\271?\362(\265\025\217\006\251?1\377\006\250\232\312\277?OT\3679\376\005c\277\250\201\030@&\366\260?\370yY\317\373\006\222?\240gCX\320}u?B\333\211\222\350\277\251?e>7:\'j\253?\000\240\217\247\243\256\213\277\352\350f\354hA\206\277\223\021\351\213>\007\216?\301\261\261a\357W\206\277o\345\305_\247\230\205?X\312\346\351q\234\227?\306\030\254l\200\255\207?\335\tv{d\001h\277\2344\242E\315MC?\203\2758\317L\022z\277\307\220\r\245\274\366\221\277\277\225\004F%\242\263\277?z\337w\007\250\261?|p\240}\301\252b?}q\344Y2\237\252\277\350WB\334w\323n?.4\210\343oR\252\277\006\354m\036]pt?d\254\251;\'\316T\277Qm\250\253h\213\260\277\213\376\'\rav\247?DMc}\257\327\245\277\364\305\301e\320\024\215?\301\335(C\3646\247?\'\210j\240.\351\254\277\224\365\007N\373\310\215\277a\'(~\274\030\267?\324\321 u\320\365\201?\317\006e\0356`\253\277\370\246\3469\362c\263\2776\361\033!fQ\177?v\207\313%eT\233??r\226\341\001\030\210?+Mi-N^\240\277\237Fa-Vg\226\277p\217w\273\257\354\261\277\020dk@\213\330\213?mfw\304B_\244?U\260\036Pj\004\251?\231\244%\314\327\252\232\277e\245xh\301\357t\277\301\373,\334;X\236\277\241\001\241\365\315r\256?\264b\000\230\272\250|?\013t\265U,@\277\277\013\263\204\222\000\200\221?\256\003\224\225b\340\250?\0240]\335W\370\250?:\203j\206\013N\265\277\226\362\271@\251\253\252?\276\301\t\277\222\314\231?\343<Lx\0026\227\277\020\275\006\353j\372\217?\374\247\013\347EA\234\277alE\031\263\274\270?\203\230\237Ab\233~\277\014\305J\306\224\214_?\037;5BJ[\266?w\307Q\340\t\003\247\277\263 \272\240\371\316\257?\231\360\311]ln\275\277\026p\007Z\030\223\205?\341\377\324\214:\265\261?\376\347?{\314\213\227\277\347}k\305@\201n\277\331\037\203\217p\307\206?\376\361q\231A\006\226?P\374\342\266\246\311\245?\031\223F\265x)\265\2772\023\032\246\361\360\202?\n\263\3055\360]\241?\344\007.\222\374c{\277\227\302_Z\302\363\261\2773}TD\001w\237\277\254\373\223\034\341\271\200\277_\303\257F\020ex\277\3752\330\221e\234\222\277\212r=\240\224*\265?\213\251\365\202\222\317\241?\221\366\t}Z\031\224\277\310.\017\205\367T\233\277\204\r\016Vr\373\250?2\242\226E\306\233\237?\036\n8\244\305\023\245?\343\300s<\334\333\244?J\003\n\027\214\231\275\277>\327\275]<\372\220\277\330\211\001\276\335\202\223\277\'t\215\342\366\302Q\277\000\216\272\240\214\352H\277\206\206S\2736\264\300\277-\334;\310o(\271\2770\"=\332[2\233\277 9\377\257e\304\221\277\361/\'Z\320ag?\014]\325\024b\033\242?\301\252\306\214P\021\221?r\340\242\335`\365\252?\220\223)\371\204\370\217?\365h\355\240\222&\244\277\335\204ud\321\023\222?\206\307Dd\222\374\242?\327n\022\257\341\354h?\321G\r\356Q\277\253\277\331\251)\330\353e\270?\001k\007\035)\300\253\277\270\'\227#\225_\233\277\034_/\267\264\356\t?\221\306\003\350@\016\303?\305\301\317\272\347\261\262?\301\0266\346\262/\250\277\273\221\211\3610\275\253\277\004R\213\235\345\377\262?\340F\313\231\246b\242?jL\205\375>\371\264\277\261rP\3511\324\261?\245\255\214#\n\230\270\277\261\326Y\262\243\252l?\270\014\0058\335y\220\277vbgS\221z\262?|\277\nO\313\013\256\277h\360\245b\203\034\223?\020X\373\210H\231\206?\350\0351\257\201\263\241\277\374\217\333q:\302<?k\023\355\373\275\267\250?&a\177\274\324\000\256\277n\221\207\350\360\370\253?\331\225\t\227\233\324\267\277\267\267(\207\354\014\244\277i\325)\236E\362\223?\200\263\2376\027\354\177?\271\037\013x~\251\270\277\326\221\211@\301\224\242?\304\013\365\006\244\313\202\277\312\364\244\022\327\340\243?j^\031p\217\025\241\277\361\243\340u\275\013\235?\225\342\303\345\263C\250\277\307m$\257\351\0359?\361\352\207O\251\271\214?\333\032\365)JB\256?\260\252\037%<\332\245\27711 \362\360D\246\2770\271\257\335rc\267\277\226\tm;K\330\247?\303\3512\243x\007\223?\377j{\324\317\240\257\277\230Rm\320&\230\243\277\213\206W\206\025B\203\277\233\376\200\2462\212\234?\356\rhG<\225\262?B\237gD\350\351\272\277\353\r\363\235\320\001\257\277\346h\321\252%O\267\277\337\333\250\350eG\252?\217Dl\177\365\206\260\277\035ax\016qm\301\277+d),\020\244\300?\306\237l\366\007R\220\277fD\364\275R&\247?\221\032.\254\335*\254?\271G\214\010\367\243\267\277s\033\216\316l\000\233\277\017\r\235\237oa\225\277\321ih\374k\260\233\277z\031S\220\036\211\205\277\265\266\365y\300)\244?\244\265\323\242\312%\240\2778\233$\'\310\361\261?\223\323\200\324\307\001\260?\373\010\212\\\326=\244?\215\356\302\275:\242\205\277\372O\037R\273\356w?\261s\372\256+ \225?\313\375\231\245\316\363\261?]\276\204\336A!\254\277\255\370\271\364s\016\206?\311\347s\003\272\335\177?\227\006F19\"\220?\356\035\372\333\256S\235\277\022Ej\230\2359\264\277\225\013\203\"5i\265?9\222@\200\307\361\230?\300lt/\331\375\225?o\025\310p`\250\267\277V\315=\013\237!\266?\0236v9\240\224\232?\344\r\237\013=\345\231?;\255\313\263\345\"\233\277%\323\335\377\244\237\242\277\371*\177\332\035~\242\277K_\247\t\200\004\201?V\221\312[\232\226\271?;>\002\374t\306\240?\200\373\351(\217\034\262\2777\355\305\371r\016\300\277d\340\336\244c\356\221\277\211v\007Vs\211\261?7\340~g\274@\275\277\254CcQ0 \262\277\302n\t\006-L\251\277\037\272B\036\230\235\227\277i\3067@\0344\253?>G\337\242\245*x\277\377U\364\021\343\245a?xlr\226\257\366\262?E2W]\016:\252\277\314\266\237\326F\312\242?%bt\310Q\341\230\277\"\327B\360\244\256\244\277\360\336\212\211&\003\233?\275\335\354\375\231\351\230?\010\340f\315L\034\305\277\342T\216m\277[\217?\242\014(<\267\310\226?\377sv8\341\235\257\277\263\305U\352D\207\257\277\357\305\250\006\351Z\234\277DX\346\\\322F\250\277b-P\033\205\266\261\277\363\370\254\3154e\213?\020\202u\332s\265\237\277v\374\312t\372-\254\277_%\3645N\037\251?\212\306Z{pV\245?Ay\313\231\000\373\261?f\023\215\036+Cp\277\310\354\003\261\354\271x?B\013\0318Xh\271\277\375r\310i\251\372X\277\237t\330\324\363\001\240\277-\302\'2\021\270\205\277\226\003L\232\216\246\225\277 \017u\221k\007\244?j\002\314\307\273\356\255\277\346a\207@\314b\252\277\022\227U\221e\032\255?\264\033\353\253Q\234\222\277\200|\333\353R\302\201\277\201i\306\204\0178\264\277@&\264\231\026\323\220\277$M\035\342\274\003\226?\324\026\352\255}\234\221?\375\335H\260>\346\247\277\321\025\003\257\263\t\221?\351c\246\244<y\205\2773\271r\313:\233\271\277-ct\367\231G\244?Zjewe\235\221\277\276P-\311\307%\240?{\207\235pt\347\272\277\017\237\3209\356{\216?|\241n\357k\033\254?\260\323lqj\372\222?\205\263\231\317F{\302\277\034[\037,\222O\261\277\0266\260w\231\264\260?]g\250\256\177\014\202?@\023!\004@p\262\277EF\031?l\245\260?\357\225\275\247BV\253\277<\006\224\227w\205\225\277AX\244\252po\245?\234\014\260\353\334\302\252\277 x0\334\026\032\223\277\2313\215\361\223\253\212\277\266y{\202\014f\261?\247\020\017\221\3723z\277x\233\257\225\342?\261\277\324s\217^|\320y\277\270\002\372D\344\001\252?\313\031U\264;\327J\277\377`\240\207\244W\211?\316$\276\013\032\307e?\201\032\363\230\023\250\235?\250Q\032\243\374\027j\277\240\230m\010YY\233?\014\230\203\257E\212\220?\004\343Z\325\325CS?\r\203\3255e\026\235?fM\343\274)\n\235?\261L\002\033%F\266?\307I\0263F\376\252?W\007\374\037\345M\261?\032*\264\261[;\242?\245b\006=b,\230?5\'\027\226\233\364\240?\005\276cG\273|\204?\007\r\246p=ny?TC\373\235\013\023b?\215\026\204\253\250\033\205?P6C\362\215n\272?IF\325\033\'\352\240?F\326F\337EZ\212?\251^N\266\021x\243?\246p\212</\027\201?\250\337K_o5\265\277u\265A\340\311?\227\277\016C\322\251&\272\262\277\000\344\314Xr\273\253?\033\240\350\315Q6\207?\250\302\342\215x\365\222?\375\002\264\203\276^\257\277\336\311\232\216\t\322\232\277\n\375\353\205m\264\240\277\331E]h\305\250\221?\351\340\355\256N<\261\277\306\274q\256\2440\265?\033\225\002F\336\362\245\277 \216\304^\271\r\271?_\373U\006Z\367\257\277\014\332L\203\371\031\226\277R\002\261\222\277\030f\277\255\365\207\207h\226\242?\177\3309v\242\016\200\277\364\254\260\370+\017\240\2770`\001|yTj?s\212\017\353\357\261\223?\002\027\303.)\253\243\277\271\235\022G\014\301\251?(\304\034\201\"e\225?R\004\204\344G]\261?\221\240\033\345\220\367\233\2777\005v\226\\\310\234\2774\325\237\2353\376\201?=s\"W\320E\275?g\306\224\267\335\262\242?o\'\213\260\202\275\214?0\314[ \022\333\263?)/\244Z\315]\262?\007Q\347\001\266\262\246\277\2150\025\272\025\333s\277\254\335\3365\231$\253\277_\337\224\020\027\025\236?\313O\002\260\322{\255\277\025\020~?\367T\271\277\334?\230\255\006\211\246\277\267\323\217\340\333\353\256\277!Qr\022\315-k?*!\302\327x\261\256?\230qv\335\257\243\220?`\333#\324\021\301\243?\006\021?&\"e\221?\r\330i\0332\337\261\277\303\212\356e\203*\230\277\254\307H\035\303\367\222?\360.\'\204\357\035\221?\221p\327F\256J\242\277\212?\037*\210\215s\277fc\0054\"\005~\277\003=\366\257}\316\236\277b^\335\311X\006\226\277\030\027\013\371\242\000\242?@0\022\013 \222g?\004?.\322\333\005\240\277\227zx\211O\331\230?\365\213\215\355\270-\302\277d\022\275\326\241\037\274?T\007\033\250U\227\261?\333\0272jQ;\251?Fh\200\'\201x\262?\351\354\nQ\300\226\264?\365-EQ?!\241\277\235j\317Q!T\236\277\237\307\333e\037\357\252\277\007\364%\002\241/\205?E\252\335\274\306\350\230?,\265\227\333\037\337\245\277\314M\372\317\225\'\250\277u)\360\324\240g\261\277\317\336{*er\235?T\236\221\340\307\303\223?\325\351\232\315\360@\260\277\024\210\234\007\020\245\220?]0]\034\276\024\266\277\343\037\206\373Ol\241?\262\325\210\031\n\205\261\277\315\3129\225\265B\241?D\365\322\361\340\014\274?\223\344S\267\320v\246?\025y\234\361N&\270\277\265w\031]\317O\207\277\"\371\367|\322\316\222?\310\'\242\363W\364\245\277\241~l\335\020U\232\277\033n\210&\224\244d\277\247\242:\373\317E\261?\307%A2\277_\266?\244\255\310\250u\310\265?\314\223CW\354\303\233?@\262\177\177\\\355\205\277,\224\304\275\247}\234?{\347G\016\037\216\233?$\227\023>\354#\252\277R%\213\003C\024\263?\221`\365~\205]\244?H!\177\007\254G\255\277\272\314,:&q\252\277\374Fy_\000bz\277\r3k.\202+\263?y\225\254\235\234\243\220\277.\033\230V\371\020\231?\333{7o/l\233?\3645<\354\242Ov?\030\t:\212\274w\223\277\226t\177X\303\371\216\277\333P\274\340\366\345\271?\030<\320k\001\020\250\277\022@-\2608?\262?L\366\202i\017g\222\277\360uq5i\245\241?2\302\244\232\375y\222?j\210\261\354\024L\220\277\247\264\230\'\241\233\262\277=\342\234.\367:\213?H\332\373}S\242\261\277 *\n\272O\247\257?\367A<C\2272\230\277T\350\304n\331b\211\277\001\024\276\274:\320\277?]\315yc[\367\245\277@\331hr\267\361\214\277\300G\362\306{p\273\277\346\322\263\'\342\207\244\277\301\202e\243F\312\254?\300\356\261#->\230?[\016\3065m^c?\177Q\365\273M\234\226\277\327\244\177V7Y\270\277\222\264=\310\004K\242?\244\233Z\3331\210\302\277\343\223\216\005\361\215\236?\000\307\007\362{O\207\277\217\221\241\353\305r\245\277\032\377\"\272r\373\203\277\3242\244\306\336\300\241?\036F\032\230\343\204\252\277R\267\257\352t\243\236\277M\306(\350\")\235\277O(\014a\313o\235?\014E\022Y\320}\270\277\321\311XM\227d\235\277\302\342\033\211\355\244`\277\035 \320$\242\377\247\277X\211\004&a|\213?\376\r\227\375\232\370\276?Z\333za\2156\275?(st\004\376R\177\277\215e\te \261\225\277\204/\016\333s\370\240\277_\3006\227{\240\254\277I\251\312\007\216\342\200\277:\347\020d\326\346\240\277I\032\331\352\006\374\241\277\372nA\306\234\306\214?u\266c\235\373\316\272\277\000]ls\376\242\252\277S`\'\337\001\371W\277;\244p\274~\267\267\277\375\217k\365*\340\274?\037<\344\343\331\300\234\277e\305\361I\'\001\256?\213\301\004\235yr\200?\035\276{\004;\231\243?x\335k\246\322\305\267\277\326]\227X\322\022\265?\271\177\\\205\205\020\234?b\311\324$p\207\251?Nk\026\371\262\203\233\277W\233\342:\224\247\256?)\252\021{\006\023\300\277\003\360G\263\261\002\232\277\014b\364C_\267{?\017?\036L\305<\265\2775\352\203T\247\377\271\2776\306\016\240X\344\243\277|\312\2652(T\222\277)I\365\001\244N\262\277=\2229\227\237$\255?\353\347\2577h\343\212?\334\266\233\232\335\353\263\277HFH\327\367P\253?vm\231\034\017O\251\277d\021\266\"\314\331z?f\226`c\364\303\261\277f\"!\336\314\357\212?\315W\306hJ;\224?\256n\002j\247\374S\277\266IL/x\026\177?g\313\272\347\225gw\277\264\374\rk\352\304x?\264x\335}\342NF\2772\242M\276\223\013\252?a\22513\204\342y\277\240i\216\274\3762\241\277z\036\345O\263T\266\277\347\301S\336%\251\233?\254\352\220\016<\302\206?T\363%\237:r\254\277\022uc$\031\340\270\277f\202!qZ\211\220\277\001\333w\021\262\325\301\277\003?\312\030\371\230\241\277\204\215\341.4,\205?Au\273+n}\226\277\227\3019\222\251?\256?4\305\374eP1\250\277\266\004\010\313\312\006\240?\311\245\341cy.\224?3\227\247\177yJ\254\277\277\223a\314\022\271y?}X\324\344\250K\262\277\354\341Y\313\261A\261?fd\354\360\237t\253?}%P\205\316\233\273\277\247\343\3623\002\035\237\277\314B\253\235%\351\265?I\"N\006\271\262\221\277_\266\036\004\210t\271\277\215v\220J\245\314\244\277g5\275\210\250p`\277Um\2111--\240?h7\267\222T\275v?\317b_v\312\364\241?\311\321\327\000\307\303\207?\305\374hG9\232\271\277w\376\"\213n\205\214?\330H=\365u\275n\277\370\013\364U\025\224\275\277\222|\226\234\356\257\240?\223\352\177\212\006\316\266?\263\253\246M\327(m?\001-#\273B\363\212\277\220\344P\026Ip\244\277\365?\214e9\032\271\277rC\004\360\243h\274\277\006\342]\363;\241\245?\355\210\235\242*\215z\277\252\340B\236sm\247?\366 \274R\325\243\272?\013{/ZG\351\222?\006+\033N\357\002\262?\213\376\245\313\312^[\277!\204g.k\031k\277\353\021\316\207\326\246\204?\016\214\301A\020P\264?\333\361\272\223\000\374\276\277h\276\2450\336\336\261?\347\025K:F\215\216\277\337\353oL\354\354\247?l\320\222h8\275h\277\311\3307%\024\312\203\277\276\253\024\235\306wR?\256\303\234\024g\353\246\277\205\270m\005\274\327\245\277\337\025\246p\217Y\256?A3>\237\223\027\260?\321\005\273\274N\240\230?\362\302\261ly\242\253\277\353\014fOvu\261\277\'\350\357\212\342\342\221\277u\273h\024\370\245\226?0\375i\307(p\223\277<\366\327\321fJ\261\277\177\225\n\230rP\257?\025\256\\9,\321\233?\235\017\262\001\267\034\207\277t\334\346\367\303@\222?\303\016WJKg\271?\301\366M\367\206\374\266?\245\252\260\024;\222\270?\322\340(mh\345\222\277\360\257\324\340?\251\247?\226\007\366\265\033\334\254?\032J\313\213F\366\234\277HR\035H\316\010\245?\217\204\311_\231q\225\277\233^/\240\002\324\247?\363\024\222K\370\254\221?\277\211\037WC\r\246\277\352\316\310m\025\220\253\277\274\367M\242Y7n\277U\247\225\350\303\010\271?4g\236}W\002\260?\332\300\366C\245\210\261?(\242\211\222Q\215\231\277\'\262\274xZ\013\261\277(\010\244r\231\216\214?\021\221\326\021\275\034\234\277\317\355C\001\000\030\245?\241.\202\027\260p\244\277\331O\227\032\006\026\303?;n\225\311tx\237\277EJfl\312\013\232?\004q\326\247\253\376\265?H^V\356l\032h?\255`\002\031\231\227\257\277\374\\\004\325V\376\257\277[6\222xzg\306?\330*iQ\247\270b\277^\221Gc?\211\230?/\021R\347-\254\247?\005\"C\250\241S\242\277Z\221V\2472\351\234?\022V\035W\007\010\257\277\343n\000m\000I\255\277\026\211^\306}W\251?&5\000d\315\236\245?B\327\257_\2544\210?\221\250S2a\"k\277\240\360\035\321.\204\207\277\337p<5=n\222?\331iw\000\\\216\237\277\265\016\336\367\001\375\234?X\206\204\347E4\273?d\'\211\202(v\257?t\300H\2733\253\224\277um\371\017\223\021\263\277)C\023n\204yF\277\212\270=\027\250gT\277\265\260e\020u\265\230\277\"H\374G\262n\256\277\361?\214\231r\332\260\277DSP\014jsi\277J\231\351\211\202U\234?\357Q\312\270H^\220\277\353Q\207:\224M\253?\034\255\002\242\366\016\266?\345\330\313\267\000\242\243?\035\373\003\213S\205\222\277[\264~E5\031\233?\017\365\317\244\347,\253?\275\\\301\320\243Z\222?\026\342\246\327\373\361\233\277\204zn#pQ\235\277\314\340\004\215-\377\235?\312\205<\272\300\240\254\277\355\365\026\014\223.\263\277\316i\316p\177\202\231?3\314\201\032Xl\263\277<(\212\034\214{\275?Je}1~A{\277\374S\362\354\366\311\260?V\320\305VF\233\267\277O\3477X\317\236\\?\331\037\246\364\365\3156\277\330^3\312\004U\234\277\3467\200\223n\200\270?\266M\026\'Ln\260?\373\035\276y\322+\203?\336Ws\035A\016\254\277*X\264B-X\275\277Z\"P\032\204\010\236?Z\231\255\346H\236`\277\022&\2424y\030\207?$\351\355=c\"\245?\215\335+D\213\310\261\277\377%IL)*\203?\002/eD\214}\264\277\030\246\323\361\207i|\277y\277\327\243 \363\245\277\304\247&^\213\021\226?\365\025\241\306\014\226\245?$ix9n{\240?\315\217F\343\241m\263?w\003|{\317A\225?\353\356\347\250*p\276?\271\000g\245\002\364\255\277\204\275z\351\233X\276?p\317~$\361k\207\277\234U\246\2070\241\257\277C\006\244L&\302\244\277\314b.\237\233\310\257\277k\307\304n\006\362\251?\000- \227\352m\243\277\234m>\032r\213\270?\266\355\326\247\217\005\241?\014t\247C\331\313\264?\013\"$\361\275A\220?`\364\002\227+\230\221\277\332%&u(\000\250?\030\256q>\261E\262?\336&i\006M\356x\277\253K&\201\347\020\221?\365\026\254vr-\245\2777b\205\rH\253\270?vB`a\233/\244?\333\001\320\316\352\006\266\277\302\303uI\014\026^\277A\354q\325_\331\261?,\263T\353K\314d\277\253\365\244#\231\375\256?\217\362-\\\273[\251\277\237{2\271\006\261\267\277\266\260\215W\230\356\205\277V_\315\320\032\014\265\2773)\234c$\211\225\277\024\204\032\367]\330\254?3\267F-\257\001\232\277MG\315\000B\245\243?8\361q\251|{\247?\236\263\305\307\236J\252\277\367L\211M\367\266\206?\275\377\036\360\025)\247?\332\227\024\006\362\"\302?p\3573\315G\022\252\277\373\254`\321uY\240\277\030\222R\026D\330\210?e\261[KJ\302\242\277\3772\222\266d\215\256\277\326j0\275\240\232\247?d\260G\343R{\256?\244\221{\253\237\022\244\277\002=\036V|\332z?\265\347\322\322\244\255\273?\236\211\025\350sR\231?uYf\027YO\255?\315k\216\334K)\272?\263\200\014\334\224\262\247?\035E\332\023a\313\232?\276\274`\210/Q\201?$\233I\n\324\275\275\277r\231<\264\355\026\237\277\355c\343Y\274x\261\277j\366\014\030\035\037\271?\2129\310\273\245\217\246\277\305\301\233s\n\036\220?\304\003\351P\363\376v?\'M\353kp\024\224\277E\215\240\257\240\355\262?\264\302\256\300\250q\264\277\224\004\252@\030\277\263?.^d\244\256\312\264\277\232\256\226x\231\364\206\277\365\333\022\025\023&\223?\237^\300.\313x\243\2774Wa[L\303\206\277\245\317\020\327E\265\261?\362\221\374\273\n\260\204\277\021\2546\265\224\227\245\277xV?\371@G\231\277\002\203BN\215\376\213?R+\010M\031\225\214?[V\337\231i\237\300\277\251\342h\355\311\035\240?\262\205\363\023\261)\277\277\260\236cQ\343k\245\277Y\262\243gxRx\277&\271v\204r\035\265?c\314G\263\310b\270?{\373\214\216\2229h?kx\033K\013\354k?eDH\025nc\221\277\262&\276\216\250\213\236?z\322\344}\334\237\230\277\363\303V\241\334\371\201\277FU\303\013\252\315\274?\224C\354\333k}\201?\327O\233 \252`\304\277\203\333\226\342\313\265\240\277\365\224\211&\264d\211?l%\333\240\211\353\237\2771\321\014\000\307\260\251\277\315~v\024\017\376\226\277k\341\005q.\010z\277\246i\303\316\222\265\262\277\304(\307{{\017\220?\217\312\207%!\026C?\200\234S\277\333+\253?&7\370\267\352m \277\017\310\222:o\003\223?~\202\250/\3611\232\277\253\271?\341X\357\227\277\345\207\245\n$*\272?\276\3060\361y\017\242?\354&\246z\232G\266?\311\333\320\226\206C\242\277\224?\330\377~\311\266?\340\341\331\231`2\251?\372:j\373\270n\222\277\363\276\273\212\370W\260\277\201!\202\206p.\264?FoDE\351\215\267\277\013f\026\255XE\213\277\020mI\204\270\276\240?S\274ET\026\361\241?\232\337%\314b\200\257\277\221\216\230\025U\277\271\277\357D\363>y\rw\277\257\"+\003\324\002\262\277\014\250\354\2477\017\272?\034m\025|\264*\227?\322\323\360\027\220\342\223?\347\230Th\204\004\276\277i?@\327t\326\202?7\337R\305w\271f\277\364\336 \347o\307t\277\374\035\247\355!P\177?\307A\332\323M4\226?\345\312bM),\261?\367\'S\323\231\\\264\277R\302\336y\2611\252?\027\017\255\327n\323f\277\320e\001\027y\027\214\277o\355\004\336\220Nu\277\322\242\277:\224\333\221\2773\207\343D\224\232\220?\003%\316.\235\201\266\277@\317ZT\335\227\225\277\301\265\210\341D\363\273?\343C{\r\037\000i?>\207\256\374\252h\206?\264\t\024B\027\213\261\277\030U\304\022\337\354\251\277\014\364s&\0038\245?#\256\260\321\2642\230?\246\222\207\231\021\032\240?[\035d\037\302\010^?r1\n\t\326\353\253\277\347m\377\304\374\264\303\277+\017^\311@\357\243\277]\252\006\207\316\224\230\277\374\262]E\255w\222?\346\227w\034\213c\267\277rm=\216\003f\223\277>\356]5a\267\246\277\t\256J\362\252\034\243\277\nr\377\210\320\333\177?OmG\347K!\264?{\323\267\303v\010\250\277\222\005\367\365|#\260\277Z\235\'\330\222\207\223?\310\026k\020\303M\250\277c\003*\321\016\370\247?y\2531\201${\261\277\361\001g\373*\334\231\277\364\305\215;Yl\265?\211t\314\237\312\354\212\277\220\305\367\214\214\304\257?\275\231\003\234\202\027\224\277Q\027y\341\243P}\277\034>\003\253t\036\241\277\204R`\314\355\034\237?H\003\r\t\016\310\272?j\312\311\362M3\234\277R\363\214<\345\337\232\277\370\210\256\367\340\317\255\277rX\274j\345\327\250\277o\351?<43\252\277\324\243\032\254\3732\221?\273J_<\304a\256?Q\353:\246\027B\252\277\327\0335B\253\325\254?\243R\314\000g\216\251\277\031+\373\322\r\357\263\277\036*!\3476]\246?\021\267!U\210^\221\277\313\212\346\324\327\025\242\277\213\363\255N5v\250\2771\235\336=\316K\253\277\017\267\346\330%\216n?r\361^\217$\r\262\277\r\266\003!a\327\267?\013Z4yyb\263?Wm\270\313\256\247\223?D^\r\027\212c\245\277\272\'k\034\351\237\235\277PO\3028\371/\241\277=\224\322\234n\340\220\277%\2014\363y\205X?\034\262=\323\003\r\236\277\264M\377\241hMT\277\312\302\317hCh\240\277\014z\352\331y\341\267?\322\347\323\364\300\216y?,/SM\311\007\243?\341\200\314\256\030Io\277g\324wS\177\300~?S\362/\315\216\024\251?\306\177>\232\240\336\243?N~N!\340cj\277\266y7\240&k\247?\"\363X\022I\177\237\277x\337\317x\220\013\242\277\3721`\035\0008\204?&a\374\240\3307\210\277$g\326\026\270\366\240\277#9Q\324Dac\277\236\334;j)\333\200\277\277\207$\340y\350\272\277\273<\256\261\240\214\264\277\330\027X\346\020\030\222?(MR\317\375\250\246\2777R\330\014@\021\203\277\2069\213\256\226\361j\277\202@\244Gb%\244?S\314D(\020b\262?\343\312?\217\343\r\252\277\\S\366%J\033\255\277\201\351\271\357m\367\270?\027\307\332D\313\024\264?\0060)\254\255\256\264?\374r\001\243\211\344\271\277G\243\232u\222\372U?\325\234o\366\002\367\222?\037O=\361\276\344\220\277!\352\026\232\261|\302\277q\225\231(E)\233\277\263\367\327\215\342\337\243?\250\374F\251\017ms?\232nhLM6\264?_\207\234\013\260+\222\277\n\373C:\237\016`\277z\272.lkv\255\277\362z\205\260\313N\260?\004\334\311\004\337\266\242?\352\374\371\000\241\347[?\351_a\252~\365\232?\373\247u}>\006\265\277\374\0333.:\026\262?\177\237\002\270\331\316\213\277B\343\240Y\252\325\210\277&A\037|\225]\232\277\207\347\013\300x\273\246?S^1\353\240\023t\277\372\335\253Sa\370\231\277\221E\212\267\370\353G\277|Y<k:\354\250\277\350h\224\365\257q\243\2777\351\362\220\016\025\241\277~\337\230.p\037\254?\353\274\024\321\324\210\205\277\336\355\270\257+\240Q\277\032@\326\3278\370\230?}\235\025\\\276\230\200?\203R\216a\223\345\227\277p\222\301y\261\371\262\277\036r1D\276\007\233\2771\243#\373\234{\260\277\244L\276\335\377\r\247?\235z\227C\371?\240\277\rwS\\\\\251\240?\007\252\302\230\322\025w\277\177c\244\014\033\344\231?\224;)rT\375\256\277\362\007\204\'L\347\264\277\315 N\014;V\270?\275]\006\311Pj\231\277T\242\225\253\241\235\235?\371H\342\301[\310}?\311\305g\275\362\372\226?\266\230{}\360\276`?\242L\271\310w\327\274\277\2520@\322\301c\210?M\3476\361\201(\241\277*\221\325z\243\216\250?\373\001\200\266\234\352\260?\201\254\262n\371{\260?\371*\240\303\031\204\245?\365Z7[o\007\262?gH\246\017\t\370X\277\256\025y\'x\235\241?\364\223\2567\022\303\255\277\364\203\007\344\362>\222?wmA\274\0027\241\277\354m\342/\3145\246\277\365{\217\372\004\372\247\277\314\026\221a\354\253\260?_\"\005\331\340+\236\277\311r\205\024\366\267\262?\270\245q\0377\333\252\27791\344\373\253G\250?\337\377\311\222\n[\252?/\214\217\377\360\020\274?= Sx\264Mp?\177\030U\303\3635\243\277-4\303qwB\204\277\334m\2746~P\233\277\tAw\373\021\240\232?O)\343\265\223\250\245\277\325\333VcB7\262?\303\3116D\022\245\220?\2652os\252\343p\277\377\364\357\362\246\006\217?\014\243\336\362\337\264\214\277\330aY\306a\263\262\277\341\022-\017O\262\242?0\241Rr\373\267\274\277\343\303\222G\274W\242\277\207]\315\305\313\201}?cu\341\205\237\330\246?\037x\342\341\202\312R\277]\374!\010\322\232\257?Ra\277\336O\225\223?\205\266\341\036D_\267?T\333\036]\003X\244\277\310\212x\301F\364\247?\r\022\357s\373Ka\277\306\220\272\002\2062j\277N\305fF\232\332\223\277\262\221\237\227\337@\241\277(\323\024zk\206\233\277\314`\353\302\265\023\206?\n~`N\254(\204?\210\375\021\277kS\203??\217\322G\373\376\206?\274\353\t\252\200\327\271\277P\214B{\275]\231?\033\246\363\310\310C\261\277\354\347\224Wy\203\237?\373y`\001i\344\240?\377\273\336R2\275\251?+\256\016O\202\014\224\277\276Jm\3156yz?]\334#\257R%\233\277\260a\245H\301\\\255?\272\240\320\320\365\350\262\277\003\377StG\024\222?\222x\236$\231\236\242\277\"%\251W\255\337t?\350\372\020\373v@\252?6\2653gbK\235\277\001\204\">4p\254\277\211\343:7G<\262\277+7\256\212\251\331\275?\311c\327G\242\204\253?\261\307nL\267m\263\2773\231\316\355\307\262\207\277\001\302Gn-\010\244?\337>R\021\234\215\263?Y\270\036v\374\356\256\277\350\351\223\256\355\273\260?\211\022\034\271\213\310\261\277\376q\313\342\035\r\261?;\245\302\367\310q\276\277\200x\223\206m\271\300?\313K\023\roR\271?\241\316\245l\375\325\217\277\n\222\314\212\201:\201?qQ\210\004\221\321\204\277\217\346\341\334\371m\210?\223\331\rU\021-\230?\3409j\322\314\316\261?\014>\236\234\260\314\217\277\341%\3422$\265\265?\2728\342}:\355\247\277qw\267\010\"u\232\277\347\260\341\202\301\007\253\277\250\242\3119\227\363\262?C$\310\356\010[\223\277\031\213\3702k\220c\277\3322\034\313\334\340\221\277PE\035\252o*\211?\366\\W1^\026\246\277)\314,\004\302L\222?\372n\031\254\262U\242\277\007\276*\217\235\336\225?P\223\033\021\2637\235?m\t\240Uv\020\206?E\310\277L\'c\242\2775X\200\307\'\206\220?\240\327\247ImO\213\277i\217\303\004\266Z\227?\177\346%iB\324\245?$\244a\\6\361r?z\216\031)\2252\262?\325:\260\240wze\277[\005.\033\352\272\243\277\310\3216\377\212\001\230\277\376\030\232V:f\\?=\025\321\305X*\273\277 \025\313\314\336\226x?_R\317\271\313%\262?U\033\201\373u\253e\277\225\257\025\316O:\245?\253\205b\376\rfl\277\364\353\331\217\234i\237?\004zVm!\337\242?A\305\327\301\\a}?\364\331\262X\314\031\203\277\372\273[/\253C\263\277-\213\213\217\373W\260\277GC\026f\220\363\215?%\243\317\373\025\003\241?w\366\322}\313\245\277\277\001\260k\365{m\274\277\253pH\177\344\334\242\277\333\275\022\315\204\230\262\277\355\203\233\342\334D\222\277\375\301;\332\220\276\225\277\363\232@\345>Xd?\221\302\266ic4\254\277\265S\254\341@b\250?&\025\306\202\323\346\247\277\030TU\232\037\264\235?\035r\253\336h\305\242\277\376\006N\336\260\333\261?\233`.\024\323\024L?\304\324\342\323I\204d?\355\202\214\260\234\017\270\277V\250\207\r\364\345\253?s\265\341j\370\226\243?e\021\037x\273\266\227?t\343\232\255\224:\273\277]\362\264\220+\025\252\277`\216x\241\242\242\244\277\205W^w\227\254\267?\037qN\325\332\340\300\277\276\327\327r\357Y\260\277{\272Zn\032\t\253\277\233\254\253\302;>\260?o\202.\327E\357\265\277[v\215(\365\213\246?\275\272\233\007\321\312\227?@\203\014$\204?\242?\343\321^\"\035\235q\277\365\033\227_&\036\215\277za\320\320\210\242\264?U\220\337\254\2352\277\2774b\367\254s\222x?\362\273\205u\251/\250\277(M\363\2555\025w\2776\250\277\206\272b\271?\342\241\330\324r\035\211\277;\265\373\243H\213\227?.\000I\352\244\034\241?A\206\251k9N\216\277x\'\220\314ed\223?\306\035\035:k!t\277\211\220\227\353\227\273\250?\345?\nks\305\262\277\264\240.\024\205\371\212\277Bb\330\r9\334\215?\240\365c\007\205 \252?\230\230\326\265\306v\272\277\311rA\226\'\330\303\277\261\342u\373\343\311\203?]\014\357\306yYu?3{n\007\251\205\244?\016Nl\325\235B\260\277R\331\013`^4\276\277\241\315C!Gx\203?\273\244MD\300N\254?e\302bp3\331\254\277\277\023\330is\207\274\277\254\002\027\262y/\250\277\326$\327F\203\274\214\277\037\355\360\326\017\000\276?x)\244;l\225\253\277\252\212\312\230\347\355\241?\245\341\215>t*\307\277\3531\374\034\374\342\301?N\320{?\274H\214\277\2638\266o\007k\264\277(\276\014\324\300+\301?\313\250\250\254\024\026\251?z\005\376\017\237y\213\277\035\245\351M\303\317\257?u6R\031\n\025\207?s\213\202pEv\270\277Z\205\r36\311\220?\034\032\364\227\007\334\242\277\'#2\220?\325N?\344S\213v\247\310\255?\207\211:\"\322\221\227?L\316]\365\356L\266\277\237\017\036\007x\\\213\277\323 rd\2266g?\335\240\201\370&\265\222\277\255\371b\270W\276\246?\232\322\tO\314\352p?\360\0011\227j\324\250?\205g\312\331B\360\221?\226\206\367B\010Y\224\277!\005c\240\273\224\234?\267{P\3130Xj\2776\014\271\334\037\372\261\277\302\357n_\251C\216?kr\'\237\343\001\272\277\037\303\3253\360\224\223?\332\234\325\035\264\026\265\277ld\373\275\256.\244\277h\026\3645?i\263\277\314(\342\257^t\264?\261\214S\317\350}\260\277\323\311W5\001\030\244?%\213)\364\254\341Z\277\273\r\253\344\316h\253?J\363\021_\240f\252\277\257aN\315\243\317\210\277O\370\363\350\245R\241?|0\231{\202Z\260??\357loHm\265?\031mJ\204\020!\252\277@\344\227n\227\312\252\277\372^\373]\316\240\207?\016jB\256W,\233?\"\350\277\023\337\202\205\277\3443\214\237o\004\261\277Mou\212\230\233\263\277\211\205*\326\265\202\266?\311\266\367#g`\234?>Q>F\221\226\263?-o\226i9\037\240?\324h\021\\2\021\241?\336\224o%8\233}?\021m\244w\014y\240\277p\345\223\300%\364\235?\207\332e\266\337\205\234\277>\244\273~5\013\220?_lO\177\354\364\200?\363\013\217\027\320\215\242?\004\021\024\236\355\036\266\277\232o\312\3511\307\252\277\204y8\352\257J\243?\037\373\010Y\230j\244?\003\004\021(X\021\232\277\001\257H\367\331:\270?R\022\203\264KQ\217\277#\033t\030\351P\277?\215/\315\273\304\003\205\277T\366$<\312D\226\277\035\2105{[\320\227?\317\333\177bN\337\251?\277\275\254\275),\213?\021\246e\376*\346\261?a\007\224\220\005\372\253\2777\325\253\270\001K\230?z\257\2277\006\2739\277\246\032\3674\372\212\231?\027|\216g\333s\243\277./\236\223\2310\261\277\230\363\033\275A\016\262\277MQ\261%Bf\233\277\006\373\350 \234L\204\277\211\026^\016b`\274?a9|\257\212A\223?)x\371u\237\340\245\277g\274\\\005r>\242\2770\300\0179\316\201\252?\205\310<\037R\036\227?\226\377\2422\027\210\243?S\224\344h\035\240\301?\350\343\204\206<\256\263?\346J\242\333E$\241?\254\242\\\311\274\337\236\277\024?\024\022|\311\252?(\220sB\023\t\270\277\220\354\026\022\313h\260?\360\355p\025\014a\300\277\356\327\303\375\241P\224?\034y\341\313\371l\232\277\374\254\017\330\2037\231?1\255\230\272\363\321\252\277\311\"\360\313\341\342\213?\216A\362L\275=\211\277<\225U\244\032\002\242?\364\263\025e8ob\277h\237w\224\237n\241\277\246\3554X\313\243\250?\354\323-\215&\022\254\277h1\207S\377i\234?So\224\262\226\033\223?\313\035\021\"F\234\277?\3660\356\312\3020\204\277|:61MN\202\2770\003\214F,\370\265\277\321\315km\364\024\260?\207\304\300\250\271\333\225\277\301 \363\2017\"\246?d2\2374\360Z\251\277\370\204\301\373\n\231W\277\354\346\371\3057j\260?\013\364H%\246\222\274\277t\rI\361\3231t\277\232va@\204\325\262\277\234kF\366\245!\223?]\306\302T\364\214\305?0V\210Gs\243\214\277\362;\2503\265U\260?GvC\326v_\226?\230g\312>\354A\273\277\313\0231n5R\263?\030\216\212\250\340\237\302\277\031\031{\255\315\275\260\277\265\304\202\307\276D\245?t+W\347\340}\203?D\000v\253/+\256?\277\227\342\205+\246~\277\236\216cN\020\032\247\277\304\024\257hZ\034\246\277\341-\340i\361\251\222\277\037\001\361\013\233\014\265?Pa\020\335KI\234\277\237\370#\226E\206\266\277\237\216-{\303h\241\277%\310\221\205\375\361\265?\266\210\363j\364 \244?R\362K\351\277\342\201\277\267\323\322\300\307(\246\277rh\340/g7\245?\266\221\355\034\231\001\211\277\013\241\254V\3246\251?\305\240=\341\031\025\242?\2274\374{0Y\250\277\313\031C={\314\242?w35? F\263?\210\006\001>\347F\264\277\246\010\201\314(\004\260?\023\354\300\222\366\204\262?Jl\020\330~4\271?\213\236\234\024\010\210\216?@0dRu\014\270\277\026\337.\273\220\026\224?\301\000\363\330\021\205\201\277\333,9\032\324\004\235\277\303\314\221\201\357\337\251?D\364,9A\001\264?-o0\236i\206\242\277#G\224\313\350\202\220?\274WG^v\372\255\277Q\272U\366\003\305~?%rh\n\276$\250\277\310h\355$\356&\260?\345\032R\003\252w\263\277_\027\253\031\257\310\224?\346\353nP\324\035\203?\247/\336\r\324\214\225?\370\236\232\217\n\330q?\206\262t\240\347:\220?h\343\262\322\340g\270?\332\246\372W\340]_?\2245\303\224\307p\215?\305\301b\225[\301\241\277\207\272>\227\0218~\277\305\022\272!\355\335\266?P\260\255~q\323\272?#\336B\243\031L\243\277`\3673\216T\343\200?\210<\266\377]\260\256?\204\227\002\021X\244\204?\2559\230T\006G\223?#\230\311\362@\222\262\277\241r\240\317m4\246?\276\314$\375\201\026\254?\311\257\010D\302P\276?\321\034~*\210T\241\277F\2313}\364\262\225?cz:\263U\227\230\277M`\220K\272\321\301?\036\0018\360\357-\235?[jf\360\316\257w?\323\334\220\033f \241?\326\315\0317=\023\252?\307\341\321v\023d\275\277\003X\321\344ZU\265\277\250\240K\244\200<\266?\354\212v\321\332\n\223\277\373\213\217C\236\302\263?\207\031\001+\316\215\246\277N\351\244^\232\342\236\277?K\243t\306\215\246?\352\330(\363I\002h?\240\000:V\202\213\220\277\301\241\342\013#b\245?1\276(\307@\031\266\277gl`\200R\324\264?\'\362\353A\230\233\253?W\2363\246\335\r\252\277Qg\234\246c\244\247?/mt@\243\rw\277Z\n_S4\032\246?>N,O\231s\254?\340\251\002A\2531\242?\034\213\223\255\201Zk?V\343\\\344$-\272\277w\302\'\224\277\203p\277\022\217\262z\257\232\260?\370\032\036\277@k\246?1J\367@\314\340\233??a\353~\262\246\236?\337[I\030\214B\254\277\t\301C\245O7\240\277\322e<5OL\254\277W\236Y\325\315\236\257\277\273i\314\245\345\315\256?\t\001=\003\222J\266\27720r\\\022E\254?-\017p\346uo\276\277\014\'\223\216)\357\263\277\177\215)_2\356\257?\025\341C\206\014&e?\"u}v\024\016\253\277\031+\216R\345\004v\277\214\351\247\330\031\310\211?\007;\177\354\360\264\264\277\270\367\n\312\241\232\224\277\345\243\024`y\303\251\277\217\204\305\366\307p\243\277\005\214\235\027\331\327\272\277\202]Y!\241\334\265\277d\364\377:-\304\230\277SM\217bC\230\243\277\016\273\216\345\266\'\304\277P%\301xy\003\215\277\'\230\220\023\361\330M\277\263\3413K\352\335\263?!i\375\300\231\360\251?\211F\363-L~y?f=\000d\377i\252\277\363Mg/\311\351\256\277\037\n\302\317 c\267\277\rDrNm\306\235\277\334\304\203W1\316\243?\020\323\333j\220\347`?968^!4\032\277*\250\351\364p\374\200?\033\205\346\233\003\016\210\277|g\370\365x`h?P(%t\260\023\212\277\316\372\361\307\323ft?/\262\004\016;\344\264\277%R\001\213t\310\220?\271X\356p-[\255?\244\317^F\371\\\243\277\336\3327\370\324\374\211\277Rh\006fK\330\264\277\351M_\325SY\242\277\356pBw\377\263\270\277\300M\372\264\375n\262?}\363a\337P\r\246?W\241r\3652\024\303?\326\006\352w\276\026\240?\215\000\357b\3447\207?o\241wi\211\207\211\277\024\330\365\276x\233\240?\225\212\305\266@\324\246?d\306j\030\3436\206?.f\205QR\266\234?\270\262\241\240\235m\242?\273\027R7\207\306\211\277L\303\271\312\227\335\212\277\242\353r\257\267\312\246?;UI)\375\255\270\277o\311\271\241\232\366\201?\243>\347\255\220\230\251\277\005\021\324,\261\016\232\277\037\340&\023Dw\202?\357pQ\233\261\337\200\277\027o\312p\3178\242\277\306\036\265\230\r\207\257\277\257\34284\020\324\241?Q\244\222)\362Y\232\277n\227\230\362vb\261\277\202b\302\254\212\035z\277\037R$U\021\233\202?\343\227\203C\332q\250\277\233\267\235\022\240\234\222\277\345i\330\233\345(\234\277*\324$\333\\b\232?\332\304\315\360x\206\235\277*p\022\177%\220\241?|\356\034+\020+\210\277+@q\365}6\225\277\002\301\234\006`\275U\277\204\321\3770t\036\271\277\022\344,\245\337,v?\343F\212=\037D\266\277D\223\035\365\324e\226?9OlS7T\241\277?+f\253\302\356v?cv\332\024\222\315\260?7\270\230\222\274\356\246?\342\276}\342\245p\256\277:\240R\316\361\375\300?q\310\207\335\241Q\260?\324\343\006\3765r\232\277&g\030\033\255\336\211\277SPb\211\254r\241?D\347\237\210\336q\205\277\013\356\017\334\367\021\262\277i\035\025\300\332\235\257\277[H\365\006\314\371\266?YXD\313\326i\265\2775\307E\230Z\210\241?k\032\004\324\216P\257\277\021W\033g\350\337\246\277h\332\t^\"\000a?XF\306\224\237\254\301?o\341\272\342\031\335w\277\301$\035\233HG\243\277\273\321\332\246\222\000\233\277\020\023\2476\265\240\226?\316\374uD\252I\261\2774\001\334r\251\200\240\277\340\264(\341(\020\242?\005d\220(\032\027\257?\313,}\254\364\372\262?\023\272\025\310\024\271\264\2779\000b\025Uh\274\277U\232\252\224\000\377\261?\3507\206Z\217_\253?\217\260\007\211\272\350\246?\250\247\335\002%\215\220?0`\'A\230\374\250\277\243\014nDR\274\271\277\202q\377\336\357d\300?tt\376\233A\376\246?3\365\2632\\\\\261\277\215=\010{\033N\231?\352\036V\346\275\377\226?\261:\237\027\235\353\260?R\301\374\360\330i\224?}:\320A\241l\242?\215\223\'.Q\360\246\2778\216\367\021\364@\223\277\177\377\234,m\017\254?4X\216\206e\336j? \"\334\036\r\017\237\277@aVY\251\004\262\277\321ByI\354\265{\277V\000\201\216\240l\242?\257\023\251\327\237f\234?\\\331\240\2176[\213?\031\350\222\\\314\354\254\277\275\346;\265\036\347\247?x\312\233\354\332R\232?O77\227\302\262\246?\346O\233f\206\331\211\277\305\333\355\307\317u\275?dw\211o\213\032\265?\332\304\265\000\003\351\204? \305\004\274\3617\231\277+eK\001\244\313\252\277\020O%t\310\315\226\277%\327n\345\017\020\267\277\370\350\371OR\352\222?\310aJ\261k(\261\277\247\222\336\'~F\221\277N{f\304\037]w?\336Zd\377\340\235\251\277\361\032\313Y\362~ ?\257\350t\016\315X\225\277\037\347\356/\336\243\244?9U5\\glx?\371\252Vp\231\027\234?\303Vk86/\213\277;K\222\263W\221\246\277\016\005\004\010/E\250?Qz\226x\\\023\242?\326SX\'\013\307\232?$\007\004J\267(\225\277\000\265\327#\367\342\222?\211\275\036f\337\276\247\277P\r<N\013\321\244\277\007\304\000\002\357\023\245?iK\375j\255^\216?\353\205\002Z\035\320\254?\n\036\261\376\034\225\210\277\220\372@\233\240\314\240\277\365M\313<;\020\207?\272o#\327\332\022\225?\342\340\007\205\215AY?\272\332\016\236\360\277\252?\252b`\034\001\020\245\277\243\224@\244`@\222\277&Oo\371\325\207\205\277\222V\213F\314\335\242?\310+\277\361\254\276\235\277\007\214\250\037W\332\216?\374\3577~\370c\246\277sU\016\206\335\026\264?\274v\371\366`\262\224\277\211\261\212\334\377\"\215?\321\0067LF\357\241\277Th\031\341\n\"\260??\3772\022\326\320\245?\227PM\215B\225\232\277\252\216\225D\300[\262?\313+\255\2274\367\262\277\326\325\3459\177\017|\277\245\002c\370\364\224\210\277\001\016n\325\351L\252\277\365\324\341W^\245\232\277\223\300\226N\265#\234?\271)d\345\300\222\251\277\331)9&[\003\267\277`\356\023\336\346.\254?\237t\372\2600\226\237\277\000\216\250\2242[\301\277c&\266\352$M\205?,\3445\376\377\377\242\277\321\000\354yn\357\254?\030\235\343\025\346\330\202?;SjH,^\263?_\006\206\351\321\227\226\277\313Mk\256~\276\220\277\353\007\\\340e;\224?\304m\334(\2763q\277|\354m\354\007\315\274?p\277\207?\371%\246?\370\031C\375`\273\252\277\001\324y?\010\230\245\277\2223O9\017a\275?p\2179f\223\266\204?\n\304\001R\261\341\231\277\211\337L/\204\027\261?\343\014\313\023\027\336\231\277}j^#\276e\260?\2545\331\307}\270\260?\213g\204\207\302\226\227\277\356\336\350\247\240A\241?\0141\255[\241\024\232?O\327;\325\273r\224\277\032\020\307\331\010\217{\277\000.`\317\311\370\302\277\312\266G8\321|\253\277\321 \265\3410\001\233\277o\020\022u\207B\250\277\213\226#\364\3567\223?|;\373s\003\225\231\277\315z\323\020\023\277\261\277\003\206tth\253\270\277\007\244\3555\366\222\236\277\227\270S=\017\314\266?\333\320\235\260\016$\263\277z\344 \211\365`\241?Q0i\225J4\237\277\301\231\010}\021\227\241\277\001\264\'t\362T\203?|\213\354\3359\342\263?\232\023\224\203s\354\255?\033\370\357Y[Q\240?\363F6\315\265\327\216\277\227\035\364\001\212\347u\277\374\324\371\024w\017\253\277\373\276\274*H\350\221\277\300\2454\261\223\263\273\277\302q\210\270\223\360\240?\336\206\201\tH\235\250?\034q\254\227E\366\275\277d\025\000)~\022\225?<3\236PHS\271\277Lj\327\247>J\224\277\227\327P\177\267j\202?\361\344ih[\204\254\277\372\r2\323\230\005\220\277\347TW~\006\342\241?\322UK\335-\375\260\277!z\213}\021?\214?\2715\265bk\353\263?Sg\227\001P5w?\267z\356:\230\216\302?\001\257\307\252\353\246\277?\024E\020\215\021K\270\277\347Q\363W/\r\233\277\324\252G9\005\371\267? L\243A:\266_?\214\366\277\\/\361\220?\231\"k\360-\215\244\277y\255\354\356D\207\253\277\331\247\251\316\254k\245?\214u\351\245W\267\203\277\2317AL\000\013\263\277Y\304\321V\227\375o?\211\230J5Y\275\213?:@\\\223+\244\276\277\237\313]\246QV\221\277\344f\352\266\\\371\216?}\272\214\0149\227\231?h\030k\317F\373\204?8\034T\234\201\241\265\277\211\372\254-\035\321\227?\247\t\373\231j\267\273\277m\265=M-\243\271?\324\255\273\336\320]\261\277\223\345\213~\210c\210\277\325\315AD\351\226\240?\3472\217\216y\353\262\277i\177\235\202l\330\300?\010\3302\000+\232\264?4k\020\341\364\277\214?\277\303\337=\027\003\236\277\223\317d+D\207\215\277\203\016(\010\307\216\255?m\000\n\203\244\277\245?\365\\k\254\232\315\202?\326\274k\360\267\243\243?\027YR\255\246\354\223\277ajW3\231\005\244?\014\302\220\231\325\006\225?\275\252\240(\016mM\277\216{\206\336\030\334\235\277\"\313\3101\210&\241?\030\377] s\260\261?\004z\217p\253\217\224\277\306\322\'\032i\276\255\277\035\225\004\335X\023\260\277F\310[Wa.\246\277\000\330\0235F\020\246?\207\214\352\000\220\371\244\277\213*\310\013h\003m\277\316\014\274Q\237\362\217\277S/\245$`\324\242\277\225\257O\266K\211\245?\322\371\207@)\317\235\277\376\025\230Ui.\223?\202\360\265(:\207\276\277|H\002\260\332(\255?$\311\305\020\246\213\253?B\310\036\232\265\366\243\277\374E\3112\362\356\235?\037\277\333\375Q8~?aX27\332\233\212?J)\307}\314`\250\277\265}q\351z \252\277p\302\034\331]\010\222?\"3<\205C\205\252?o6\032\304W+\260?\030p\212\370D\353\221\277,z*\227\233\204\242?\326!4\271\233\370\231\277\036\202&\332)[\225\2773\031G\372vL\225?(\024\331\n\345\236_\2772a\200\204\271 \226\277\245\333l\326\037\224\273\277*\325\246\333\331:\253\277\225\370F\255&\345\204?K\210d\205\353J\266\277&\0061\033\226g\261?\017\216Zn\017\230c?G\036\211Z:m\241??\004\014\244H\302\234?B\tM\035\205n\267\277\234~\274\346;\362\264\277_\216\215\350\324\333o? 2\265\323\204R\243?\014\"\322\005[]\233\277\346\352\372\341u\264\262\277Oz\204ZTZ\215?hkvq\017&\220\277\242>E::\237\223?vwC\023\3430\260\277(\003\223\206\222@}?+y=\0257\377\240\277\036\345\245\213\214\274\247?\221\355\005\342\223Z\246?\005\035\314\200\031\013\245\277\222\377\350\202\234x\276\277\210mF\375\337\227\260?\035R\344V[\271\240?\201\201HK\264P\303?y#TY$\377}\277f\000\363\376\371+\265\277\020\205\326\305<\247i\277H\rm\326l0\201\277\033\262`\036\364\205c\277\376\001\364^\342@\247\277Y\262k?\262al?\320\356\210\326\330,\221\277\375\320p\371G\033\300?uRm\303\006y\206\277i\204\3355G\357Y\277\377\335\372\301\277\253\253\277\247\301.yy\036\254\277\365\335g\355d\267\231?$\273\217\317Q\325\270\277\311\274\020\246\353X\252?\351\247X\374\357u\257?\376\346\260\265\234\357\231\277 \275\201\263h[\210\277\034db;2\332\203?\2609\333D\177*\264?\255IH\206(9\252\277\234D\314(\337z\252?\3163\216\323%q\177?]\360=2\002\255\203\277\003}X\304R\362\201\27798\300\270\277\275\263?P\327n\202A\302\260?d\020\205\346~\311\244?\241\035i\363\333\243\242?\020\304\214\"\367D\253\277\325\245\367\251\232\005\235\277*\231e\232H\214\241?: XUD\235\202?\310\361\332V\204F\243?lr\205+\030\304\247?$\317&WT\370\271\277\352\274!\330\302]\274?ui\215\217p\326\260\277\202\200(\t\365\"\242?\366\315\260\023(\177V\277{<$ZJ=\200?|\311\364\273t\267\213?\301n\217O\037\316\227?O\300\211w/\300\263?\234\216\023\0356\260\244\277\003\232\346\034\337\205\251\277\226E\020k\371<\240?\016\017\021\302\2006\274\277\236\350\270\223\222Ar\2776\277\273n\266\304\251\277\266\245\037\3463|y\277\235.rD\313\365\223\277\241\351>\247X\322\273\277\3610\320\246\001\032\227\277\315U\264\215Lb\275\277\233\2045\277h\277\263?\237\231.\216\360r\242?\314\310!D\272k\275?\005\201\177\007\270>\262\277\233+.\351\316\266\212?\357K\211\013\264A\204?*\364o\206\357\266\245\277\237a\337!\254\353\235\277\340\274\334ybb\264\277\2271\r\267j\207\225?\334%\222[\370\033\242?\r\352ST.\243\224\277\262<\273B]\334\241\277\313\346\023\037\355\360z?\037\305\231C\244\332\242\277\230\200\035q\216!\225?\333\355\233;l?\250\277\266Lq\014dz\260\277\277\362\243O&\375\247?H<cRJ\324\210?\222A\275C#R\242?be\216t\315@\274?\022\357\257\371\360m\262\277\220 \251\374\\a\227?\353\312w\025\337\221\267\277\r(S\2714k\222?\000\017\025G\325c\240?\251\237m\230,I\240\277W5`\306h\346\\\277+z\031)=\232\303\277\355\350\203N\340\221a\277\254\032\253\327e\301\230\277\316\322pD\004y\226?\244\214\000\221\234\031\210\277Dy\252\326\264}\272\277\n\215|$\312\334\272?\266\356\236\274H\024\261\277\034\021\033W.\336\246\277\352\261\207\230\037\320\211?\201\345\272\262\030t\247\277\366\220\323\235+\035\251\277g\301vq\200K\253?\303\005\216.\232\004t?\212\270\000\354w\334\225?\025\013\271\035\357\322\217\2779\366\204\243\337w\266?\330\374PH\177\242\202?\221\025\347\344\244j\257\277q\366\350MH\025\253?\3031;D\234\301\260?\0321\\\301\241\336\262\277\326D\\\204@\014\265?\2408\227j7O\273?\260\1777\331\317!\243\277%\277\312r\000/\223\277\364Q\330C\333\'\257\277\274\270{\266\002\323m\277\n\361\206\003{\020\241\277\324E8\037I\257\266?q\0028\276pv\227\277\"\2058\250%\017\216?[\nq\004\225\317\245?<\205Z`E\204\233\277RL\214\234\332\213\261\277\003{\341\205\350\'\220\277A\370\036\267\372\r\261\277\350\204\307\256\267\000\261\277kK\355\227\233\305\243?\210\223\330\366f\207\263?\313\235\320\3316J{\277\245\240\335B8\373\260?=\003\303(t\206\260?\275\035\334\343n\232\240?\350w\324\034\013\245\236\277k\214^\257\022hw\2776\355\370\340\317\002\234?\314\035\"\314`\240\202\277:\013\354\331w\236\262?}\241I=\307b\207\277\226\310K\207p\330\177?\341\024\034\230\263\024\260?%\033\031\010\376\354\277?0j\362\254\221@\235\277J\022cQn\340\236?san\031\277\013\253?\035J\237\352\023J\201\277o\261\360\214l#\272\277\003BV\211\027\372\223\277m\241\265n\310\030\242?\023rVq!i\215\277\251\305~\350L(\245?\360\001\203_\037Z\234?!qc\177\352u\241\277\326\023o\246\'\361\246?\263\r\000\230V\203\303\277\026\315\375y\201er\277\035\024_\265F\236\243\277\272;\206\222}\216\275\277\312\213Rn^\257\255?|\036\366\2632:\251\277q \253m?n\222\277#\016\276i\230\210\253\277\t\251\250Z\n\247\245?b\334%\243\232\246R\277\361E\300j\321m\264\277 \307\232\331\227w\201\277O\350a7\260\\\236\277\217\311 \367\262\266\252\277\352\261\027\002D\321\251\277\302c\017\226@\354\242\277\">y\300\347\343\230\277\267\305\275\343_\375\223\277\030*\211\261\357\n\230?.\n;cNJ\231?C\3745\361\362v\266?\263\352)\317\005X\301\277\224\326\311xB\014\256\2772[\337\363T\t\227?e\365X[qR\253\277\354\251\356\360\003(\231?\214L\256\360\3771G?\016\320L\236\363[\247\277\030MP\300\240\333\235?\265\374^\307\247\340\200?\2068\004\371\271I\260\277%l\247\336\210\035\217?\262:\230}-\t\223?\241\361\326\321\247s\251\2770R\202\206b\217\216?\305\373%n\316h\221?\306j\350(7\245\240\277}o\277<\214\010\300?\321\020\300]\266\344\271\277\226\341\355\204\261\226y?\0342z\000{y\260\277z\233\361\300\362{\257?\344\221\366\373\334$\271\277\210TN\376\212\323\255\277\375\344?\353\275I\257?\277\266k\005\237\241\254?\214\016\235\242\260i\217\277\010\304Y\255a<e?(\234\026\005e\002\244?\273\255+\233?\025\242\277\031\206\\[}\360\300\277|\264\235\375P\0231\2778\023dE\335\024\267?\255W\231\006\322\220\274\277\367o\327\246\256n\277\277!\031\177\027.\273\246\277\366|(_ay~\277\317\267\030\014\267\363\272\277+#\257\367\376\355\273?\023\240\305\203\245-\232\277\305\220\337\227a\325l\277\256\234\232\226O\023\220\277\347\334\032\\c<\236\277\244`\372\3373Dv?\007`\372\300\271\241\232\277`bQ\036\321*\250?\300I\364<F\200\204?\210\311\271\031\340y\244?\223+\336\035e\244\244?P\035\177\351\3554\244?\252\361\307d\225\'\205?\306\315\375\214\326]\233?\224\316\2401\0317\247?\237\234x\325\255S\223\277\364c\320[\261-\215?I\002\332v\203\201\261\277\243 \255#\350\005\264?4\320Z\336\247E\230?\305b\253\207\344\000\264?\233\240\177*\352\014\244\277Z;\271\341\365A\230\277\336\335/\341\332\370\231\277\240\214\375\263\217\276\244\277\207\3543\327p\365\221\277\220\206\022\275}F\273?\373U1\223b<\241\277\t&\027\323/q\240\277o0\351C\355\213\261?\223`8\363\253\265\263\2777\307\366P\244\307\237\277\177)\200\303\325\000\277?\223\247K\311\244\201\254\277\235\3254\266j\002\232\277\225S\240Px\372\231?Pem\357N\351\264\277\230\026\355\367m\200\260?t\301\375\330\263\367\236\277\332d\253\366\214\362W\277\031\355\001\230;\213\251?\025\273\3071%\177\245?\255\013c_\365~\243\277\216(\361p\276\003\222\277\352\306,\307\311\224\203?\254R\355\223\320\237\245?\r\230\341\312\270\333\270\277\376\312\323\267\207\253\222\277}\212\307\t\224\333w\277\366\216\350\"O\233\260\277w\203\310\236\313j\242\277\003Vn\357E\177\202\277\352\301\363\320\024\030\262?sc2<\003\264\224?6M\235O\262D\266\277\222(\237>A\361\301?\275pO\316&5\247\277\016\350\232\355\334\036\240?\302\324`\347\361\346\266?\246\031\200\201\255k\203\277\266M\224\336a\341\300?\340\004&\311[.f?\366\034\251\206\016<\267\277\207\333\250\376\rIb\277~\270>\202\341!\226?\201 *S*,\257\277r+\237\221\274F\242?\257\304\306\316dx\226\277\313\307El\251?\242\277\"l\301\336u0\253\277ba\244<\305\237p\277\327e\023\332\337\351e?\006b\343\361\340\274\254?\253\252]\223\232\226\256\277\026$\211{l\221\230?K\310U\315\243\243Z\277\177\002\013\304]}\200?\364\005\200\307f\215\266?d\357>\017a\005\233\277\000\366Fs%]\221?\376\226\310\256\246\017\205\277SO\271\2360\026\240?\225\323\241\005\236\350\241\277y\251\353\024\255\335\262? \215\272\212\r\245\244\277\221]}X\035\010\301?\373\361\007b#\266\275\277\325\325#\2671\312\223\277\322\266\3418\307$\251?v\304\016Z\333\243\210\277\2670\"_T,\255?\332\225O\007?8\254?O\n\272\\\250\307\241\277\325\000\275\017!\363\200?\005\"\036\242h\206\262?#\315\243QZ&\252\277\356q\240uh\327\220\277\251r\327x\211\010\251?H\320dW\316&\261\277\374,X\301E\032\267?\214]$\365\327\356\200?\206\027\352\312>)k?\3014\270YW=\242\277\215[\np,\017\242\277\016\345\200\352\313\220\243\277\007\231\362\240\014+\256?\t0\305H\244\344\263\277\2337\363\250\366.\227?\263\231\320\325\335L\265?\017\254\236\363\361\204\264\277\300\031\024\256\321\323\243\277\275`#\266\371\347\242?\214\254\214\365\017\357O\277^6\201\217\227+\241\277\366\002A\350\323\034\232?rG\243\0255\335\250\277\327\352\017\360\r\256\217?\017\235\342\n\345\347\257?\326(\330\205/\025\256?w\327\375+\331\211`\277\256\226*\"\224\247\275?\257\313\030IE\036\250\277-\266u\210\217\022\260\277o\270\255\260\362\334\211\277:h\317\317\367O\256\277.\220&\373\306\004\223?\\\\\345M\347\252\263?\244PX\0328\001v\277*\255\205`~\240\245\277\376\216:m\317\004\260\277\247Kc\353\315\n\224?\241\373\005n\216U\222?>eT\242\3737\257\277\033\261\221\3631\336\214?\352\021\020\273\024:\246\277#J\027\267\272\234\246\277>?\233\360P\027\263\277\350\203+\372`\320\266\277\233ob\001\303m\265\277\312\271O\230f\253\241?\252\2415yz\377\271\277\303\236\177\021\232\025\232\277\001\337\216\354\031B\240?4\002\340\372\177|p\277A\313\244=:\201\264\277\240\031\\@\312\010\201?\006\327s\262@\224\261\277\274\314\017\244-\360\260?\236\347\240\356\266\224\244\277\260\314\203\306\360M\245\277\306\210K\221\345\364z\277\253\311/\322\033^\245\277\267<\202c,4\250\277H\343+\316+Wm?\320\324\324\2636\206\236\277\374\220y\033AC\205\277/\345:\000\r\037\260?\267Z~\371\026-\250\277\271::\313\256Y\275\277\247\342q\231\'l\272?\240\022*\250\237a\246\277\350ZD\343d=\267?\365?|>\3272\252\277\307\\\336?Xl\223?\032\310\2559\235\275\273?\332\2667v\374\021\261?\222\"\206\276_\021\242\277g\242A\227\333\234\242?\035\340\354V8\016\264?@:\333r\243s\261\2775\030\311\"?M\277\277\361iw\222<\355m\277\r?\343@\311\370\230?\355\335\363\032\337\204\210?\255i\223sCU\241?\007\201=\305\014\021\242?\023\301\335qx\303x\277\254=.\n\3252\226?\377\261>\224Z*\222?/\324\215\022o\354\217?=\022t\246\344\333\271\277\261\206\2601!N\272\277\'QG\372\307[\241\277\371\254\312%\205\371\234\277\203gq0\322\r\244?\274\021\226\037\022\374\203\277;m\257r\246`\216\277{\014\020H\326\251\261?\206\267\262u\t\244x\277\225\220l\030\227\r\240\277\273\2116\374u6\225?\004\275B\030\242\302\226\277>B\300\245\222\326\227\277\266\0105\245\2740\242\277S\325T\222\317T\216?\221\226\343j\367#\241\277P\230e>\371\236\261?\031\212W\237Nh\200?\201\0175\005G\253\231\277,LZ\203\006R\237?\310\212\335&\017\366\247\277\305\247\314\217\222\366\220\277h\335D\273\000\256\271?o\354\313\370\233]i?R\000q\256\223\364\241\277\3509\303\002~o\245\277B\360L\201\234\215\271?X\345\303\326&\364b?\300\316\027\225\252\350\214?\3229z\241\270i\242\2777\264 \377\235`\214\277\237\317\326:\230\371\266\277Yp\0275Y)\261\277\345\276\365/\320\352\234\277C\267c?~y\217?c\247t\312\377\034k\277\360v\002\277~.\020?0\2364@c\350\266?u\326#\033r\371\256\277@\207O\235v\223\226?H\031\335w\312%g?\010$L\204\364\007\212?&\221\222\007\030/\267\277XD\032\2666\217\267\277\323\206\234\343\345\211\242\277\365qu\312\272l\241?\244\230H\270s\004\213\277#\212\222\233\263t\245\277!\216w\020/\327\234\277^\014\006:\207\\\266\277l!\353\266O\272r?\275\210$\004\002M\254?M?2\254\367,\210\277N\377T\247S+\260?baB\216q\036a?\234\263\025\007_D\246?\206\337\355EI\023\257\277M5\322;c\206~?\020\2251\002\220ek?\236t\333\227\334\254\220?\233\216\341\036\311\000\254?\213\302\206@L\352h?\032\021\305\230\253\004\226?\026P\352>2k\242?\336\330\217\251\003}\240?\352.\271\224#K\235?\342&\361\007\333\211\227\277\237\303y/L\002\227?\255\241KCh^\257\277\220\313\360s4LY?-\332\336\262w\271\214\277\347;\351qEG\242?\323y\230\315\252\244\246\277\001l\313\026\361\027\265\277\235\365\302m\304\r\211?\007+\261\311F\250\237?\213C\002\277\305\300\245\277\266@(\331\026\026\265?U\204\223\027\376\007\232\277x\220,\371\217Q\221\277k\033\205\325V\230\265?\354\253P\367\245?\301\277\217*\003.|\002\221\277\014f1\2547V\300\277\326K\2039p=\223\2779^\372\311y\372\210?\3552%\377h\201\234?X\r\352\351\210\322\200?\3179\033m\010\332\221\277\263\367\022\336\351\217\202\277\355U\333w\3318\250\277\247ss\231Dlt?:\232\203@\363\362\200?\tl(\246ta\256?;%\317\320\216\375\177\277\014\0361(\224?\213\277\3019!\315\261\276\250\277\023\265\324\031\034\035j?\277\227\3212w\033\270?\303\325&\006\3278\240\277\303\304\244\322\002Cy\277K\r#\277\326\256\230?\177!\371wi}\266?\'\211\215\224\354U\262?h\364-\373\014?\252\277O1\212r\314\265\302?\342\034\363\351Z7t?\325\317\016\362\243]\216\277\036\265?\302\252P\253\277\275W\333@Y\307\247?S\245\214\375J\357\213\277\010HoR8;\261\277\304\316\272\237{6\257\277\372d\360\227\360h\251\277\351\201\340\224\034d\246?\032z[L\2713t?\242\3709Z\361\300\265\277\020\326c%\246\262\265?4\207a]i\025\234?h\325\020\250O\264\270?\035q\231\017\226\r\202?\020\3534\t=\207\254\277,<\346\336\323\035\272?\326p\241dm\022\273?\3321\336\314\200D~?8yjY\305\032\253\277\000\323j\357\271\206w\277\315[\354\336\003_\256?\302MZ\037\205\302\244\277\271\306p!\364\212\204\277\340=\005r\300!b?\007[_2\205!\263?\032Q\277v\034.\226\277\354\277\350\026\020@\233\277W9N\326\265\266\221\277\302\213\211\265\333\261l\277\2418\267\236t\336\213?x(8\356T\034\230?h>\222\350\271 \245\277f\002\333z\017\252\264?c_\256\3329\332\262?\024\323\004\227\r\373\231\277But\251(\346\247\277u\034.\361\266\204\250\277\222{{\372\216\242\216\277\253d\")\"\375\237?l\021\347\234\232\224\224?\0249z\201_3\216\277\363\327\002\232\031\272\212?\347v\001\237rh\230\277\026u.:\311\373\262\277\266\272N\352\323!\242\277\027\315\r\021q\372\220?|n\353\246\342Yt\277\343?\200\341\304\267\262?N\217?e\005\334\243\277\232;\315\240\230\\\264?\264\226\201\026\256\363\260?\013\253\227\034\036Sf?(x;\231\0051\212\277\363\256\260\364\354\214c?\344X\222\270\316f\260?\023\312\266T}5\260\277\276\215&\313\206\317x?dc\000\001~\232\227\277\264L\036R\'\213q?\356\2006\355\255C\263?sXW{\0219\255\277\240yQ:\246a\300\277\372\024\2526\203\233\213?\325\343+Hl\263\262\277\002h\264\320TY\256\277\217\347\244\n\373%\206\277\236\030\225%V\262\246\277\375\2159\006\036\005\241?\\\030\365\352P:\240\277\031W\356$\013\310\261?6\356\3428\262\311\206\277\222w\'\027\370\313\251\277\310\030&\0253\037\266\277\000h\3303u\242\230?\027\306\274w\212\377\222?\212Z}2\357\235\233?\212?\310\274a\223\262?4\017\3750!5\232?@\367sE{\211\256\277\244\231 \277;\310\257\277Z\036\000\006\243\313\207?0B\001+\\R\225\277[\265\241\312\263\361\226?\244ct\2358\025\262?Br\313f\240\313\263\277\302\004Z\003\336\003\235\2776\212^\224\266\216\261?\255\215\2252\034\r\247?o\017C\354Vu\230\277Y\025a\265\244)7\277\017a{[\371\254\260\277\330f&\277\2468\233\277\014UI\351X\210\220?x\336\376Jp\250\263\2772 \254\324\240\214\227?\364\020\225\243\370k\263?\334\254\216n\272*\261?\301\241\010\333\215\014\240\277\225\3578\320\374\207\261\277rJ\305\014\3711\272\277\016xY\246;\315\210\277\230\273\336\355*\005\247\277\301\226\372\352\355\315x\277\360H\355c\305\324\250\277\215D5\250R2\257\277\341J\335\353\325B\241?\377$\276\340P\325\221\277\206\337s\330z\034\230\277\353\212;$\255\335\261\277\260\276?\344R\275\264\277b\034\335\200\350r\240\277\345\\\373\331\016\373\244?\237Nl\352:\016\241?\330\342C_U\270\214?\346\230\227\234\354\266\206?\n\216\363\213=\234F\277\023X\233\342\364\317\244\277\337\225+fQ\371\232?\003^\245q\246\210\211\277\277wt(\367\023\263\277]\366\367F\000M\226\277\265Wi\000\013q\270?\255\276q\215\214\022\300\277@\254\315\372]Z\256\277\205e\354o\215\267|\277\215\033\030=R\212\202\277\236\233\242\230)\266l?`.\341j\253\335x\277\3234v\363\327\323\276?\020\013*yn^\231?\2426\t\016c\334\300\2777\031o\010$H\253\277YWId\215\037\255?\205H\033$!Q\221\277\r#\350\321\215\312\262?\344)\014R\034\265|?\0171\3139\204\n\223\277\332\247\302;\363I\212?q\032|*\006\037\272\277\212\355E\375\342\037\251?\377\"\022\264\3677\264?\222\036\221Y]3\277\277i\262\324\330\251q\235?%\021\305\211j\026\240\277\367f\206\301l.\242?\357V\257\"=F\227\277\306\261\313\317\024\263\267\277U\205R\345\235Z\262\277\232Pn\204\275\335\241?fb\365!s\027\257?\275c\021vci\207\2775$\226\023\244\243\264\277F\025\264I\210J\274?\"o\231\327\217\033=\277{$\000$\261p\263\277\357z\274\352\364\231\250\277\353#y\265L\204\266\277N\215\353-Y\n\252?!\020\332\256\036d\230\277~\251j>~H\277\2772\262=z\202\353\244?\032R\205\341fS\254\277\024e\023\177\232\235\251?\276\372\374\035\265Cs?\327Zj\026\267k\254\277a\323\210\265\252\266\250?\203M\316\313\033k\263\277{B\224\270]\020p\277\335\366\224\\\361@\253\277-\004\206t\315\034\243\277P\214L\'\302\316\241\277\363\006\244\001U\023`?y\313\340O1\324\247?\234-[\301(\356\223\277w\370\306.\205u\265\277\320XT\221!\"\253\27725\350\235%\217\240?C3U\261\032>\244\277q\333m]rh\267?Em\262T\374Z\177\277\264(\014\205M\013w\277\254\023{\347\nw\252\277\274\370>\353\264\367\243\277\374z\304\000\262\024\221\2778\320EI\001\353\253?\350\252R\035\263t\227?\367\237\324\025\032}\242\277W\206hT\355\276\241\277\3771\316c\275\003f\277\361\364\027\203\274\277\246?\002\255\225\025\317\014\230\277\027\0252r\316J\272?{]\\\302F\255\236\277\337\330_\027K\304\233\277\201\216\370\007\002&\250\277`\234\003M\017\251\256\277\3272\307:.\277\253?\347\243\326\325\340\243\257\277\034\200\344\204\220\324\264?`p\273\315K\247\246\277\276\014Q\336\323]\237\277\262\341\016r\033\312\260?2\242H@\265Y\227\277\335\267\221m\205\241v\277`W\273nG\230\272\277t\264\345+\037\035\271\277t\340\200+H\301\234?Z\001\330\2159\372\202\277V\003g%.f\253\277\373\232\353\317E\200\255\277s\357U\354\270\254\221?zl\211\304bA\251\277\343(\024\353\221T\270?\346\265\262\315M\314\237\2773p.\332Y&\264?\357\203\330\r\262\'\226?_N\217\032\024V\200\277\370\233\302a\030\316\237\277\260*\207\356\270\245\226?\323{\007\364\2153\246?\2618\240s!r\232?\177\253\246\034\n\261\257\277kt\342&C\346]?\t\021f\266\375\017\254\277![\344$s@\257?\021\206\252\255\2717\035\277\226\362\3020\235\231\242?\202R+\004\202U\241?\321\002.\304K\221\263?\353\211\255q\"\364\242?\266\243\177\331\033N\252?}\266\372\005Z\245\227?\324\212l\\\261\234\270?[\017)\005\244H\277?z\203!\332\315\373\266?.\2358\321\017\273\252?\002\256`\036\366\312\233?\361\234S\301\001\037\206\277\rR2\351\305x\260\277\035X>F\032\260\255\277\253\205o\247\263\224\237\277\351\252\275ca\177\255\277W\"\261-\205\000\261?\3610/<\304\346\247?\250\\\007\000\024\253\212\277\343\201JR\255X\243?\020jU\230~\334\244\277\240\250{L\3014\207\277\204\3420\020g\272\205?\320TLj\244\270\240?/\246\030\312\363@\230?\313U]\350\3176\243?S\370\003\235\223\'\237?\351h\020\035\313\251v\277m%\224\201\256\214\263?\314\206HY\266k\253\277\345S\360%}\222\212?\216p\213\325\207\231|?\017`\346\225^]\253\277\300\211\2319[\217\272?\205v\365i\3406\265\277\014\304\212UJ\352\262\277-E\030\206\341\031\240\277\223\276j{\022\330\265\277\3459>k\366\032\261?\232\2372\333\301\021\260?\316\377\273\372R\217\230\277]\255tqh\266\237\277\360\025\177\267\216\303\255?-RkfZ\211\223?\342\021\310\366K\206\263\277\255\'\341\356\313\271\242\277\273\334aP\202!d\277\245\335\350\017\240\360\215?/d\352\311s\r\231\277\260\344$\017\207\035\262?[\377\334f\'\340\246?aa\200Oq\315\246\277\212\022}\260M(t?\2075q-\217\260\254?\332h\242\241\230\361\264?\314z\357\256~R\201?\177\222\341M\317\247z?4\272N\030\020N\235?si\002F8\326\210?\336\276\267\230\223\240\215\277.\241Tv\324\242\230\277\306/Y\022O\371\254\277%kk\036\356\371p\277\t\232k\213\222\246\271\277\022\371\303Z\345\323\240?\317\223\255\177\'E\250?\274\334 \364_\351\244\277\n\265l\344\006W\256\277 \343X\030`\276\216\277\326\251W\035\212\000\222?\026@\327\275j\310\227?hU\205\213\324x\270\277)\352\324Z\306g\231\277\373\243%j\026\365y?m\3625\010\353 \222\277V<p\361\0237\203?\213\223\r~M\352\243?/\nz\240xc\264\277\377\003 z\256\002\222?<\253\254\212P\226p\277H;\350E\266[\225?\347\302\370h-\377y?\326\236u-\307\005\242?\331\264<\301=>\210?\320s\276\352O\272\272\277\340/_\360\014w\260\277\022\376\264\302T\347\264?\361\251\356YQ\273\266?(\316\336\342\367\202\266?\352\223\365\377\214\017\237\277\372\013\272\024\304\314\236?\376\307\002\206\2663\236?`\256<\256\332\341\243?\024\274\034oIV\245\277\365\200\334)\336\317\275?mmY\205\003\273\231\277\265\334\2440\017k\245?FC\345\t\256j\241\277\026\2210\265\320\022\255?L\013\237\342\370i\254?\353\204\027={\260\265\277:\357`\270\227\274|\277|\302\361\207\317\026\251\277\033\377\255[\023\363\220\277\252\240\312\312\257\311\252?\376\315\350\332+q\266?\032j\247&\254\007\267?\267\234\303\340\236\277\263\277\325\005[\204h`\253\277\324O\006\217z\341\260?h\214\002\247&p\224\277H\026\007R\013xj?\357\010\251\273\016\034\260?\224o\016\233\346\215\223?\272\356\202o\354c\260\277\216\335\362\003\302|\240\277\233]\230A\323\t\253\277\320\227U!t\362\250\277\3171\246\335\024\335\216\277\260\3462\366{\203V\277\345\'\"\233L\314\276?\353Ku(\340\273}\277\231iG\301I\256\241\277\2448\247Na\276\224?K\200\261\263(4\256?\307\013a\033\031X\202\277c\235\204\313z:\233?\001\r\276v\236y\271?\275\350\221\316\234\366\207?\206\253\223{\214X\261?\316n\310\373\'\247\211?%\025\032\346e\322\243?\'\333\377q\3617\224?X\360\372\371\342\327\257?\342\307\3357\0178\252?[\361\352$ZI\264?\225Bj\367\201\220\300\277pHN\233&kl\277\254\252\241\250\306\\\254\277\203\322\234-\3241\230\277o\262\256\253\237V\260?\304\317z\304\213}\276?D\177\"\243\323\244\246?\206Z\000K\204\301\264\277\"\024\237\tb\236\231?)\2172\251\210Z\230?0f\341UnCA\277\207\367-G\235A\273?\365\225\353\0356c\203\277,Y\234V]E\256?wek\245\351\251\270?w\310\364\302q]\242\277\030\342ha|$\252?\227\346\327\334\277;\227?\004s\351\262-\224\262?^\361S\206\371V^\277W\020[2\261\r\205\277\255\n\300q\363\205\267\277#\246\n4\363\340\241?\224!\340\333\326\250\246\2777\355w\244\246G\270\277\356(\212\022Uw\261\277\342\306\013\320>\014\303\277\261\337\023\023\206\256\234\277\231\256\276t\200\377\232?/\334)m9\037\244\277\310\356\374l\277F\250?\350\320\300\372\315\004\224\277\0316\230\n\022\207\216?b\217@\233\242\016\275?\200\235\r3\207\221\264\277\222\340\346\356Z3}?c\341\332\277\330S\242?\254\247D\223p\321\250?\220e\"\016\234R\205?y\304s]\017\275\224\277+\250\306k\242\'q\277\000\360-G\237\315\264\277\004\261|\255\33661\277\265\332\002\336K\t\236\277%\237\262\314\031\032\253?\227\263@\250\004[\260?3P\265u2\027\234\277S\240+\312\360\300\225?S\320\261D\036\322\264?Rw\214[\370DP\277M\314o:\314\342\235\277@d\r\261\366P\246?\343\360\262\235?\342\260?\213\235\3432cd\261\2775\314\'\236\274h\233\277\275\325\254\001\013\211\217\277W\3261\324\365\367\261?\223Z*B\007\266\213\277\314\262\376*\270S\235\277;9|y\261\336S?\252@\177st.\241?69N\030\332\265\271?\227\276j\367\273\243\246\277\2778\033\000\270fb?\367\313O\231D\361\246\277\342\225Gy\004D\236\277-\307\020\014\2724j\277\205r\370\362\334\325\202?4S@\364\247\"\231?OQ\206X\273I\221?\252/2\253\346\235\267\277\362\224\201;\357\245\237\277\244\303\262\241\243\376\247?\303\355\275f,\034\207?\347\310\262Y\352\266\262?\355\303FL\301\307\217\277\220_\021Rp|\261\277h\214)\333\0040\247?W\216\023\036\3564\231?\240R[\223\301H\240?\\\031\355\025\224p\216?$}\264\342Xn\265?W\2230k\032\376\256\277\360w\347r!\2416\277\233\223\342\376zo\230\277\241A\227\021D\341\205?\001\310\251\267\215X\267\277\264\326P\351\307F\230?\241\353\327\237\322\036\267\277\300\006\366\257_z\255?\270\032\272\024\234\320\245\277\366\336q\214\346\212\233?`\235-\314@\025\250\277qmB\237mD\210?\323\375\342\246\202\241\220?MS\n\237f\340\260?\326\300\244M\370r\217\277\177\314\200\002\020\221\251\277dULh6\036\306?\312k\266\312\246\325\251\277\363\333\\\202\026\250\262\277\371\336\224\327G\236\177\277\031de\366\2125\226\2774\311OH;\023\244?\036q\215\334?F\246\2775\244[\266\322\370\227\277>/\267\333\314\271\204\277\352$_\212YM\227\277\020\236\325\243~)\247?\302{\3709hS\232\277\2214X\322\311\240\220?\271\211\222q\332Z\262?\247t\200\213\366$\244\277\364\315&\237J\255\266\277\304\314\314\200\237C\263?\005\306#5R^\246?\203@\336\376\341\345\277?"
      }
    }
  }
}
node {
  name: "layer_0_type_1/matrix/read"
  op: "Identity"
  input: "layer_0_type_1/matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@layer_0_type_1/matrix"
      }
    }
  }
}
node {
  name: "layer_0_type_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\204\343\014O\003\210\366\277P\341\006\021?-\354\277\327\363/\266\360A\317?\213hJV\017\013\317\277\315\210_\007[\334\362\277\037\344U\246\361\260\332?\005\007g\315\200\310\324?_\032\357}z\034\360?\326U3\271\330\275\375?\300!\032\275U\037\353\277N\273A45\014\345?]T\230\213$\237\354\277k\312M\237\032\373\303\277\204p\231\205Ko\312\277k\241y\346<\321\326\277\271\305n\230t\3252?<\337\365EH\014\371?\033\024\342\000<Q\323?\275\315Z\266\215\337\356?\264\277\256x\267(\316?"
      }
    }
  }
}
node {
  name: "layer_0_type_1/bias/read"
  op: "Identity"
  input: "layer_0_type_1/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@layer_0_type_1/bias"
      }
    }
  }
}
node {
  name: "layer_0_type_1/MatMul"
  op: "MatMul"
  input: "Reshape_20"
  input: "layer_0_type_1/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "layer_0_type_1/BiasAdd"
  op: "BiasAdd"
  input: "layer_0_type_1/MatMul"
  input: "layer_0_type_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "layer_0_type_1/Tanh"
  op: "Tanh"
  input: "layer_0_type_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "layer_0_type_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "layer_0_type_1/Reshape"
  op: "Reshape"
  input: "layer_0_type_1/Tanh"
  input: "layer_0_type_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "final_layer_type_1/matrix"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\372\000V\203\243l\326?\303\303i\200kI\257\277\000\305C\002\372\276\300?%\271d\201e\221\333?#M$1K\345\256?](KQ[\332\305?O\010\247P77\334?\315\306\305\036\336\264\310\277\213\316\373\241\272\337\304\277Y \365\357W\374\315\277\247\024k@\220\037\321?R\3450\335T]\310?t\205<b`\252\266\277fL\305y\332\356\335\277\035\005\273\nN\233\312?\3664\244\376\002*\251\277\335|x\363\215J\334?L\364~\221\360Z\264\277\225x%\321\245\252\320?\217\216\331\n\357\020\254?"
      }
    }
  }
}
node {
  name: "final_layer_type_1/matrix/read"
  op: "Identity"
  input: "final_layer_type_1/matrix"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@final_layer_type_1/matrix"
      }
    }
  }
}
node {
  name: "final_layer_type_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1
          }
        }
        double_val: 0.18943690481686676
      }
    }
  }
}
node {
  name: "final_layer_type_1/bias/read"
  op: "Identity"
  input: "final_layer_type_1/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@final_layer_type_1/bias"
      }
    }
  }
}
node {
  name: "final_layer_type_1/MatMul"
  op: "MatMul"
  input: "layer_0_type_1/Reshape"
  input: "final_layer_type_1/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: false
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "final_layer_type_1/BiasAdd"
  op: "BiasAdd"
  input: "final_layer_type_1/MatMul"
  input: "final_layer_type_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Shape_5"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_22/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_22/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_22/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_22"
  op: "StridedSlice"
  input: "Shape_5"
  input: "strided_slice_22/stack"
  input: "strided_slice_22/stack_1"
  input: "strided_slice_22/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_23/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_23/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_23/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_23"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_23/stack"
  input: "strided_slice_23/stack_1"
  input: "strided_slice_23/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_21/shape"
  op: "Pack"
  input: "strided_slice_22"
  input: "strided_slice_23"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_21"
  op: "Reshape"
  input: "final_layer_type_1/BiasAdd"
  input: "Reshape_21/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat_3"
  op: "ConcatV2"
  input: "Reshape_19"
  input: "Reshape_21"
  input: "concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "embedding_lookup_1/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fitting_attr/t_bias_atom_e"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embedding_lookup_1"
  op: "GatherV2"
  input: "fitting_attr/t_bias_atom_e/read"
  input: "Reshape_17"
  input: "embedding_lookup_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fitting_attr/t_bias_atom_e"
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "embedding_lookup_1/Identity"
  op: "Identity"
  input: "embedding_lookup_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Shape_6"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_25/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_25/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_25/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_25"
  op: "StridedSlice"
  input: "Shape_6"
  input: "strided_slice_25/stack"
  input: "strided_slice_25/stack_1"
  input: "strided_slice_25/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_26/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_26/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_26/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_26"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_26/stack"
  input: "strided_slice_26/stack_1"
  input: "strided_slice_26/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "strided_slice_26"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Reshape_22/shape"
  op: "Pack"
  input: "strided_slice_25"
  input: "Sum_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_22"
  op: "Reshape"
  input: "embedding_lookup_1/Identity"
  input: "Reshape_22/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "add_3"
  op: "AddV2"
  input: "concat_3"
  input: "Reshape_22"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "mul_3"
  op: "Mul"
  input: "add_3"
  input: "Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Reshape_23/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_23"
  op: "Reshape"
  input: "mul_3"
  input: "Reshape_23/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_27/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_27/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_27/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_27"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_27/stack"
  input: "strided_slice_27/stack_1"
  input: "strided_slice_27/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_2"
  op: "Sum"
  input: "strided_slice_27"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "o_atom_energy/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "o_atom_energy/shape"
  op: "Pack"
  input: "o_atom_energy/shape/0"
  input: "Sum_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "o_atom_energy"
  op: "Reshape"
  input: "Reshape_23"
  input: "o_atom_energy/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_energy/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "o_energy"
  op: "Sum"
  input: "o_atom_energy"
  input: "o_energy/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "Reshape_23"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_23_grad/Shape"
  op: "Shape"
  input: "mul_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_23_grad/Reshape"
  op: "Reshape"
  input: "gradients/grad_ys_0"
  input: "gradients/Reshape_23_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_3_grad/Mul"
  op: "Mul"
  input: "gradients/Reshape_23_grad/Reshape"
  input: "Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/mul_3_grad/Shape"
  op: "Shape"
  input: "add_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/Shape_1"
  op: "Shape"
  input: "Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_3_grad/Shape"
  input: "gradients/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_3_grad/Sum"
  op: "Sum"
  input: "gradients/mul_3_grad/Mul"
  input: "gradients/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/mul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_3_grad/Sum"
  input: "gradients/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_3_grad/Shape"
  op: "Shape"
  input: "concat_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/Shape_1"
  op: "Shape"
  input: "Reshape_22"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_3_grad/Shape"
  input: "gradients/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/mul_3_grad/Reshape"
  input: "gradients/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_3_grad/Sum"
  input: "gradients/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_3_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/concat_3_grad/mod"
  op: "FloorMod"
  input: "concat_3/axis"
  input: "gradients/concat_3_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_3_grad/ShapeN"
  op: "ShapeN"
  input: "Reshape_19"
  input: "Reshape_21"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_3_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/concat_3_grad/mod"
  input: "gradients/concat_3_grad/ShapeN"
  input: "gradients/concat_3_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "shape_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_3_grad/Slice"
  op: "Slice"
  input: "gradients/add_3_grad/Reshape"
  input: "gradients/concat_3_grad/ConcatOffset"
  input: "gradients/concat_3_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/concat_3_grad/Slice_1"
  op: "Slice"
  input: "gradients/add_3_grad/Reshape"
  input: "gradients/concat_3_grad/ConcatOffset:1"
  input: "gradients/concat_3_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/Reshape_19_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_19_grad/Reshape"
  op: "Reshape"
  input: "gradients/concat_3_grad/Slice"
  input: "gradients/Reshape_19_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_21_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_21_grad/Reshape"
  op: "Reshape"
  input: "gradients/concat_3_grad/Slice_1"
  input: "gradients/Reshape_21_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/final_layer_type_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/Reshape_19_grad/Reshape"
  input: "final_layer_type_0/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/final_layer_type_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/Reshape_21_grad/Reshape"
  input: "final_layer_type_1/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/layer_0_type_0/Reshape_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/layer_0_type_0/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/final_layer_type_0/MatMul_grad/MatMul"
  input: "gradients/layer_0_type_0/Reshape_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/layer_0_type_1/Reshape_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/layer_0_type_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/final_layer_type_1/MatMul_grad/MatMul"
  input: "gradients/layer_0_type_1/Reshape_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/layer_0_type_0/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "layer_0_type_0/Tanh"
  input: "gradients/layer_0_type_0/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/layer_0_type_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "layer_0_type_1/Tanh"
  input: "gradients/layer_0_type_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/layer_0_type_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/layer_0_type_0/Tanh_grad/TanhGrad"
  input: "layer_0_type_0/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/layer_0_type_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/layer_0_type_1/Tanh_grad/TanhGrad"
  input: "layer_0_type_1/matrix/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Reshape_18_grad/Shape"
  op: "Shape"
  input: "Slice_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_18_grad/Reshape"
  op: "Reshape"
  input: "gradients/layer_0_type_0/MatMul_grad/MatMul"
  input: "gradients/Reshape_18_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_20_grad/Shape"
  op: "Shape"
  input: "Slice_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_20_grad/Reshape"
  op: "Reshape"
  input: "gradients/layer_0_type_1/MatMul_grad/MatMul"
  input: "gradients/Reshape_20_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Shape"
  op: "Shape"
  input: "Slice_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/stack"
  op: "Pack"
  input: "gradients/Slice_3_grad/Rank"
  input: "gradients/Slice_3_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Reshape"
  op: "Reshape"
  input: "Slice_3/begin"
  input: "gradients/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Shape_1"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/sub"
  op: "Sub"
  input: "gradients/Slice_3_grad/Shape_1"
  input: "gradients/Slice_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/sub_1"
  op: "Sub"
  input: "gradients/Slice_3_grad/sub"
  input: "Slice_3/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Slice_3_grad/sub_1"
  input: "gradients/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_3_grad/concat"
  op: "ConcatV2"
  input: "gradients/Slice_3_grad/Reshape"
  input: "gradients/Slice_3_grad/Reshape_1"
  input: "gradients/Slice_3_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_3_grad/Pad"
  op: "Pad"
  input: "gradients/Reshape_18_grad/Reshape"
  input: "gradients/Slice_3_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Shape"
  op: "Shape"
  input: "Slice_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/stack"
  op: "Pack"
  input: "gradients/Slice_4_grad/Rank"
  input: "gradients/Slice_4_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Reshape"
  op: "Reshape"
  input: "Slice_4/begin"
  input: "gradients/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Shape_1"
  op: "Shape"
  input: "Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/sub"
  op: "Sub"
  input: "gradients/Slice_4_grad/Shape_1"
  input: "gradients/Slice_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/sub_1"
  op: "Sub"
  input: "gradients/Slice_4_grad/sub"
  input: "Slice_4/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Slice_4_grad/sub_1"
  input: "gradients/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Slice_4_grad/concat"
  op: "ConcatV2"
  input: "gradients/Slice_4_grad/Reshape"
  input: "gradients/Slice_4_grad/Reshape_1"
  input: "gradients/Slice_4_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Slice_4_grad/Pad"
  op: "Pad"
  input: "gradients/Reshape_20_grad/Reshape"
  input: "gradients/Slice_4_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/Slice_3_grad/Pad"
  input: "gradients/Slice_4_grad/Pad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Slice_3_grad/Pad"
      }
    }
  }
}
node {
  name: "gradients/Reshape_14_grad/Shape"
  op: "Shape"
  input: "o_descriptor"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_14_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN"
  input: "gradients/Reshape_14_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_12_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_12_grad/Reshape"
  op: "Reshape"
  input: "gradients/Reshape_14_grad/Reshape"
  input: "gradients/Reshape_12_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_15_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_15_grad/Reshape"
  op: "Reshape"
  input: "gradients/Reshape_12_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_15_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/MatMul"
  op: "BatchMatMulV2"
  input: "filter_type_all/Slice_6"
  input: "gradients/filter_type_all/Reshape_15_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
  attr {
    key: "grad_x"
    value {
      b: true
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/truediv"
  input: "gradients/filter_type_all/Reshape_15_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Shape"
  op: "Shape"
  input: "filter_type_all/truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Slice_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_6_grad/Shape"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack_1"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_6_grad/Shape_1"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack_1"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice"
  input: "gradients/filter_type_all/MatMul_6_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Sum"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_6_grad/MatMul"
  input: "gradients/filter_type_all/MatMul_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_6_grad/Sum"
  input: "gradients/filter_type_all/MatMul_6_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Sum_1"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_6_grad/MatMul_1"
  input: "gradients/filter_type_all/MatMul_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_6_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_6_grad/Sum_1"
  input: "gradients/filter_type_all/MatMul_6_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_6_grad/Rank"
  input: "gradients/filter_type_all/Slice_6_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_6/begin"
  input: "gradients/filter_type_all/Slice_6_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_6_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_6_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_6_grad/sub"
  input: "filter_type_all/Slice_6/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_6_grad/sub_1"
  input: "gradients/filter_type_all/Slice_6_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_6_grad/Reshape"
  input: "gradients/filter_type_all/Slice_6_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_6_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_6_grad/Pad"
  op: "Pad"
  input: "gradients/filter_type_all/MatMul_6_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_6_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/filter_type_all/MatMul_6_grad/Reshape"
  input: "gradients/filter_type_all/Slice_6_grad/Pad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/MatMul_6_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/AddN_1"
  input: "filter_type_all/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/MatMul"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_3"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
  attr {
    key: "grad_x"
    value {
      b: true
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_4"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_1_grad/Shape"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack_1"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_1_grad/Shape_1"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack_1"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice"
  input: "gradients/filter_type_all/MatMul_1_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Sum"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_1_grad/MatMul"
  input: "gradients/filter_type_all/MatMul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_1_grad/Sum"
  input: "gradients/filter_type_all/MatMul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_1_grad/MatMul_1"
  input: "gradients/filter_type_all/MatMul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_1_grad/Sum_1"
  input: "gradients/filter_type_all/MatMul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/MatMul"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_8"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
  attr {
    key: "grad_x"
    value {
      b: true
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_9"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_3_grad/Shape"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack_1"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_3_grad/Shape_1"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack_1"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice"
  input: "gradients/filter_type_all/MatMul_3_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Sum"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_3_grad/MatMul"
  input: "gradients/filter_type_all/MatMul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_3_grad/Sum"
  input: "gradients/filter_type_all/MatMul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_3_grad/MatMul_1"
  input: "gradients/filter_type_all/MatMul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_3_grad/Sum_1"
  input: "gradients/filter_type_all/MatMul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/MatMul"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_13"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
  attr {
    key: "grad_x"
    value {
      b: true
    }
  }
  attr {
    key: "grad_y"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/MatMul_1"
  op: "BatchMatMulV2"
  input: "filter_type_all/Reshape_14"
  input: "gradients/filter_type_all/truediv_grad/RealDiv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
  attr {
    key: "grad_x"
    value {
      b: false
    }
  }
  attr {
    key: "grad_y"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Reshape_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_13"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_5_grad/Shape"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack_1"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/filter_type_all/MatMul_5_grad/Shape_1"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack_1"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice"
  input: "gradients/filter_type_all/MatMul_5_grad/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Sum"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_5_grad/MatMul"
  input: "gradients/filter_type_all/MatMul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_5_grad/Sum"
  input: "gradients/filter_type_all/MatMul_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/filter_type_all/MatMul_5_grad/MatMul_1"
  input: "gradients/filter_type_all/MatMul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_5_grad/Sum_1"
  input: "gradients/filter_type_all/MatMul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_4_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_1_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_4_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_1_grad/Reshape_1"
  input: "gradients/filter_type_all/Reshape_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_9_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_9_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_3_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_9_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_8_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_8_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_3_grad/Reshape_1"
  input: "gradients/filter_type_all/Reshape_8_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_14_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_14_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_5_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_14_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_13_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_13_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_5_grad/Reshape_1"
  input: "gradients/filter_type_all/Reshape_13_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Reshape_3_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_7_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_7_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Reshape_8_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_7_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_12_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_12_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Reshape_13_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_12_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "filter_type_all/Tanh"
  input: "gradients/filter_type_all/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/filter_type_all/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "filter_type_all/Tanh_1"
  input: "gradients/filter_type_all/Reshape_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/filter_type_all/Tanh_2_grad/TanhGrad"
  op: "TanhGrad"
  input: "filter_type_all/Tanh_2"
  input: "gradients/filter_type_all/Reshape_12_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/filter_type_all/Tanh_grad/TanhGrad"
  input: "filter_type_all/matrix_1_0/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients/filter_type_all/Tanh_1_grad/TanhGrad"
  input: "filter_type_all/matrix_1_1/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "gradients/filter_type_all/Tanh_2_grad/TanhGrad"
  input: "filter_type_all/matrix_1_2/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "grad_a"
    value {
      b: true
    }
  }
  attr {
    key: "grad_b"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_grad/MatMul"
  input: "gradients/filter_type_all/Reshape_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_6_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_2_grad/MatMul"
  input: "gradients/filter_type_all/Reshape_6_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_11_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_11_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/MatMul_4_grad/MatMul"
  input: "gradients/filter_type_all/Reshape_11_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_1_grad/Rank"
  input: "gradients/filter_type_all/Slice_1_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_1/begin"
  input: "gradients/filter_type_all/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_1_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_1_grad/sub"
  input: "filter_type_all/Slice_1/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_1_grad/sub_1"
  input: "gradients/filter_type_all/Slice_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_1_grad/Reshape"
  input: "gradients/filter_type_all/Slice_1_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_1_grad/Pad"
  op: "Pad"
  input: "gradients/filter_type_all/Reshape_1_grad/Reshape"
  input: "gradients/filter_type_all/Slice_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_3_grad/Rank"
  input: "gradients/filter_type_all/Slice_3_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_3/begin"
  input: "gradients/filter_type_all/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_3_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_3_grad/sub"
  input: "filter_type_all/Slice_3/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_3_grad/sub_1"
  input: "gradients/filter_type_all/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_3_grad/Reshape"
  input: "gradients/filter_type_all/Slice_3_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_3_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_3_grad/Pad"
  op: "Pad"
  input: "gradients/filter_type_all/Reshape_6_grad/Reshape"
  input: "gradients/filter_type_all/Slice_3_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_5_grad/Rank"
  input: "gradients/filter_type_all/Slice_5_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_5/begin"
  input: "gradients/filter_type_all/Slice_5_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Shape_1"
  op: "Shape"
  input: "filter_type_all/Reshape_10"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_5_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_5_grad/sub"
  input: "filter_type_all/Slice_5/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_5_grad/sub_1"
  input: "gradients/filter_type_all/Slice_5_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_5_grad/Reshape"
  input: "gradients/filter_type_all/Slice_5_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_5_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_5_grad/Pad"
  op: "Pad"
  input: "gradients/filter_type_all/Reshape_11_grad/Reshape"
  input: "gradients/filter_type_all/Slice_5_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_1_grad/Pad"
  input: "gradients/filter_type_all/Reshape_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_5_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_3_grad/Pad"
  input: "gradients/filter_type_all/Reshape_5_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_10_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\360\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Reshape_10_grad/Reshape"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_5_grad/Pad"
  input: "gradients/filter_type_all/Reshape_10_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/filter_type_all/Reshape_4_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/Reshape_4_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_grad/Rank"
  input: "gradients/filter_type_all/Slice_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice/begin"
  input: "gradients/filter_type_all/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Shape_1"
  op: "Shape"
  input: "Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_grad/sub"
  input: "filter_type_all/Slice/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_grad/sub_1"
  input: "gradients/filter_type_all/Slice_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_grad/Reshape"
  input: "gradients/filter_type_all/Slice_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_grad/Pad"
  op: "Pad"
  input: "gradients/AddN_2"
  input: "gradients/filter_type_all/Slice_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/filter_type_all/Reshape_9_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_5_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/Reshape_9_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_2_grad/Rank"
  input: "gradients/filter_type_all/Slice_2_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_2/begin"
  input: "gradients/filter_type_all/Slice_2_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Shape_1"
  op: "Shape"
  input: "Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_2_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_2_grad/sub"
  input: "filter_type_all/Slice_2/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_2_grad/sub_1"
  input: "gradients/filter_type_all/Slice_2_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_2_grad/Reshape"
  input: "gradients/filter_type_all/Slice_2_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_2_grad/Pad"
  op: "Pad"
  input: "gradients/AddN_3"
  input: "gradients/filter_type_all/Slice_2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/filter_type_all/Reshape_14_grad/Reshape"
  input: "gradients/filter_type_all/Reshape_10_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/Reshape_14_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Shape"
  op: "Shape"
  input: "filter_type_all/Slice_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/stack"
  op: "Pack"
  input: "gradients/filter_type_all/Slice_4_grad/Rank"
  input: "gradients/filter_type_all/Slice_4_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Reshape"
  op: "Reshape"
  input: "filter_type_all/Slice_4/begin"
  input: "gradients/filter_type_all/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Shape_1"
  op: "Shape"
  input: "Reshape_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/sub"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_4_grad/Shape_1"
  input: "gradients/filter_type_all/Slice_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/sub_1"
  op: "Sub"
  input: "gradients/filter_type_all/Slice_4_grad/sub"
  input: "filter_type_all/Slice_4/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/filter_type_all/Slice_4_grad/sub_1"
  input: "gradients/filter_type_all/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/concat"
  op: "ConcatV2"
  input: "gradients/filter_type_all/Slice_4_grad/Reshape"
  input: "gradients/filter_type_all/Slice_4_grad/Reshape_1"
  input: "gradients/filter_type_all/Slice_4_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/filter_type_all/Slice_4_grad/Pad"
  op: "Pad"
  input: "gradients/AddN_4"
  input: "gradients/filter_type_all/Slice_4_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/filter_type_all/Slice_grad/Pad"
  input: "gradients/filter_type_all/Slice_2_grad/Pad"
  input: "gradients/filter_type_all/Slice_4_grad/Pad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/filter_type_all/Slice_grad/Pad"
      }
    }
  }
}
node {
  name: "gradients/Reshape_9_grad/Shape"
  op: "Shape"
  input: "Reshape_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "gradients/Reshape_9_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_5"
  input: "gradients/Reshape_9_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_8_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\320\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/Reshape_8_grad/Reshape"
  op: "Reshape"
  input: "gradients/Reshape_9_grad/Reshape"
  input: "gradients/Reshape_8_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_7"
  op: "Shape"
  input: "o_nlist"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_SHAPE_TENSOR
      args {
        type_id: TFT_INT32
      }
    }
  }
}
node {
  name: "strided_slice_28/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_28/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_28/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_28"
  op: "StridedSlice"
  input: "Shape_7"
  input: "strided_slice_28/stack"
  input: "strided_slice_28/stack_1"
  input: "strided_slice_28/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_29/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_29/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_29/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_29"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_29/stack"
  input: "strided_slice_29/stack_1"
  input: "strided_slice_29/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 720
      }
    }
  }
}
node {
  name: "mul_5"
  op: "Mul"
  input: "strided_slice_29"
  input: "mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_24/shape"
  op: "Pack"
  input: "strided_slice_28"
  input: "mul_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_24"
  op: "Reshape"
  input: "gradients/Reshape_8_grad/Reshape"
  input: "Reshape_24/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ProdForceSeA"
  op: "ProdForceSeA"
  input: "Reshape_24"
  input: "o_rmat_deriv"
  input: "o_nlist"
  input: "t_natoms"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "n_a_sel"
    value {
      i: 180
    }
  }
  attr {
    key: "n_r_sel"
    value {
      i: 0
    }
  }
}
node {
  name: "ProdVirialSeA"
  op: "ProdVirialSeA"
  input: "Reshape_24"
  input: "o_rmat_deriv"
  input: "o_rij"
  input: "o_nlist"
  input: "t_natoms"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "n_a_sel"
    value {
      i: 180
    }
  }
  attr {
    key: "n_r_sel"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_30/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_30/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_30/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_30"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_30/stack"
  input: "strided_slice_30/stack_1"
  input: "strided_slice_30/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "mul_6"
  op: "Mul"
  input: "mul_6/x"
  input: "strided_slice_30"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_25/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_25/shape"
  op: "Pack"
  input: "Reshape_25/shape/0"
  input: "mul_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_25"
  op: "Reshape"
  input: "ProdForceSeA"
  input: "Reshape_25/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_31/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_31/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_31/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_31"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_31/stack"
  input: "strided_slice_31/stack_1"
  input: "strided_slice_31/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_32/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_32/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_32/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_32"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_32/stack"
  input: "strided_slice_32/stack_1"
  input: "strided_slice_32/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "strided_slice_31"
  input: "strided_slice_32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/strided_slice/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice/Switch"
  op: "Switch"
  input: "t_natoms"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@t_natoms"
      }
    }
  }
}
node {
  name: "cond/strided_slice"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice/stack"
  input: "cond/strided_slice/stack_1"
  input: "cond/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Cumsum/axis"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Cumsum"
  op: "Cumsum"
  input: "cond/strided_slice"
  input: "cond/Cumsum/axis"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "exclusive"
    value {
      b: false
    }
  }
  attr {
    key: "reverse"
    value {
      b: false
    }
  }
}
node {
  name: "cond/concat/values_0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat/axis"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat"
  op: "ConcatV2"
  input: "cond/concat/values_0"
  input: "cond/Cumsum"
  input: "cond/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_1/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_1/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_1/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_1"
  op: "StridedSlice"
  input: "cond/concat"
  input: "cond/strided_slice_1/stack"
  input: "cond/strided_slice_1/stack_1"
  input: "cond/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul"
  op: "Mul"
  input: "cond/strided_slice_1"
  input: "cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_2/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_2/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_2/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_2"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice_2/stack"
  input: "cond/strided_slice_2/stack_1"
  input: "cond/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_1/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_1"
  op: "Mul"
  input: "cond/strided_slice_2"
  input: "cond/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice/begin/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice/begin"
  op: "Pack"
  input: "cond/Slice/begin/0"
  input: "cond/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice/size/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice/size"
  op: "Pack"
  input: "cond/Slice/size/0"
  input: "cond/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice/Switch"
  op: "Switch"
  input: "Reshape_25"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_25"
      }
    }
  }
}
node {
  name: "cond/Slice"
  op: "Slice"
  input: "cond/Slice/Switch:1"
  input: "cond/Slice/begin"
  input: "cond/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_3/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_3/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_3/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_3"
  op: "StridedSlice"
  input: "cond/concat"
  input: "cond/strided_slice_3/stack"
  input: "cond/strided_slice_3/stack_1"
  input: "cond/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_2/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_2"
  op: "Mul"
  input: "cond/strided_slice_3"
  input: "cond/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_4/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_4/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "cond/strided_slice_4/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_4"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice_4/stack"
  input: "cond/strided_slice_4/stack_1"
  input: "cond/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_3/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_3"
  op: "Mul"
  input: "cond/strided_slice_4"
  input: "cond/mul_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_1/begin/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_1/begin"
  op: "Pack"
  input: "cond/Slice_1/begin/0"
  input: "cond/mul_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_1/size/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_1/size"
  op: "Pack"
  input: "cond/Slice_1/size/0"
  input: "cond/mul_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_1"
  op: "Slice"
  input: "cond/Slice/Switch:1"
  input: "cond/Slice_1/begin"
  input: "cond/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/add"
  op: "AddV2"
  input: "cond/Slice"
  input: "cond/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_5/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_5/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_5/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_5"
  op: "StridedSlice"
  input: "cond/concat"
  input: "cond/strided_slice_5/stack"
  input: "cond/strided_slice_5/stack_1"
  input: "cond/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_4/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_4"
  op: "Mul"
  input: "cond/strided_slice_5"
  input: "cond/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_6/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_6/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_6/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_6"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice_6/stack"
  input: "cond/strided_slice_6/stack_1"
  input: "cond/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_5/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_5"
  op: "Mul"
  input: "cond/strided_slice_6"
  input: "cond/mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_2/begin/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_2/begin"
  op: "Pack"
  input: "cond/Slice_2/begin/0"
  input: "cond/mul_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_2/size/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_2/size"
  op: "Pack"
  input: "cond/Slice_2/size/0"
  input: "cond/mul_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_2"
  op: "Slice"
  input: "cond/Slice/Switch:1"
  input: "cond/Slice_2/begin"
  input: "cond/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_7/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_7/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_7/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_7"
  op: "StridedSlice"
  input: "cond/concat"
  input: "cond/strided_slice_7/stack"
  input: "cond/strided_slice_7/stack_1"
  input: "cond/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_6/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_6"
  op: "Mul"
  input: "cond/strided_slice_7"
  input: "cond/mul_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_8/stack"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_8/stack_1"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "cond/strided_slice_8/stack_2"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_8"
  op: "StridedSlice"
  input: "cond/strided_slice/Switch:1"
  input: "cond/strided_slice_8/stack"
  input: "cond/strided_slice_8/stack_1"
  input: "cond/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_7/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_7"
  op: "Mul"
  input: "cond/strided_slice_8"
  input: "cond/mul_7/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_3/begin/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_3/begin"
  op: "Pack"
  input: "cond/Slice_3/begin/0"
  input: "cond/mul_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_3/size/0"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_3/size"
  op: "Pack"
  input: "cond/Slice_3/size/0"
  input: "cond/mul_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_3"
  op: "Slice"
  input: "cond/Slice/Switch:1"
  input: "cond/Slice_3/begin"
  input: "cond/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/mul_8/y"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3140456936484258
      }
    }
  }
}
node {
  name: "cond/mul_8"
  op: "Mul"
  input: "cond/Slice_3"
  input: "cond/mul_8/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_1/axis"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_1"
  op: "ConcatV2"
  input: "cond/add"
  input: "cond/Slice_2"
  input: "cond/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/concat_2/concat"
  op: "Identity"
  input: "cond/mul_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_3/axis"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_3"
  op: "ConcatV2"
  input: "cond/concat_1"
  input: "cond/concat_2/concat"
  input: "cond/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_9/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_9/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_9/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_9/Switch"
  op: "Switch"
  input: "t_natoms"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@t_natoms"
      }
    }
  }
}
node {
  name: "cond/strided_slice_9"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_9/stack"
  input: "cond/strided_slice_9/stack_1"
  input: "cond/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Cumsum_1/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Cumsum_1"
  op: "Cumsum"
  input: "cond/strided_slice_9"
  input: "cond/Cumsum_1/axis"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "exclusive"
    value {
      b: false
    }
  }
  attr {
    key: "reverse"
    value {
      b: false
    }
  }
}
node {
  name: "cond/concat_4/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat_4/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat_4"
  op: "ConcatV2"
  input: "cond/concat_4/values_0"
  input: "cond/Cumsum_1"
  input: "cond/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_10/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_10/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_10/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_10"
  op: "StridedSlice"
  input: "cond/concat_4"
  input: "cond/strided_slice_10/stack"
  input: "cond/strided_slice_10/stack_1"
  input: "cond/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_9/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_9"
  op: "Mul"
  input: "cond/strided_slice_10"
  input: "cond/mul_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_11/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_11/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_11/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_11"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_11/stack"
  input: "cond/strided_slice_11/stack_1"
  input: "cond/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_10/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_10"
  op: "Mul"
  input: "cond/strided_slice_11"
  input: "cond/mul_10/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_4/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_4/begin"
  op: "Pack"
  input: "cond/Slice_4/begin/0"
  input: "cond/mul_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_4/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_4/size"
  op: "Pack"
  input: "cond/Slice_4/size/0"
  input: "cond/mul_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_4/Switch"
  op: "Switch"
  input: "Reshape_25"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_25"
      }
    }
  }
}
node {
  name: "cond/Slice_4"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_4/begin"
  input: "cond/Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_12/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_12/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_12/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_12"
  op: "StridedSlice"
  input: "cond/concat_4"
  input: "cond/strided_slice_12/stack"
  input: "cond/strided_slice_12/stack_1"
  input: "cond/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_11/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_11"
  op: "Mul"
  input: "cond/strided_slice_12"
  input: "cond/mul_11/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_13/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_13/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "cond/strided_slice_13/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_13"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_13/stack"
  input: "cond/strided_slice_13/stack_1"
  input: "cond/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_12/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_12"
  op: "Mul"
  input: "cond/strided_slice_13"
  input: "cond/mul_12/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_5/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_5/begin"
  op: "Pack"
  input: "cond/Slice_5/begin/0"
  input: "cond/mul_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_5/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_5/size"
  op: "Pack"
  input: "cond/Slice_5/size/0"
  input: "cond/mul_12"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_5"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_5/begin"
  input: "cond/Slice_5/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/add_1"
  op: "AddV2"
  input: "cond/Slice_4"
  input: "cond/Slice_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_14/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_14/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_14/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_14"
  op: "StridedSlice"
  input: "cond/concat_4"
  input: "cond/strided_slice_14/stack"
  input: "cond/strided_slice_14/stack_1"
  input: "cond/strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_13/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_13"
  op: "Mul"
  input: "cond/strided_slice_14"
  input: "cond/mul_13/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_15/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_15/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_15/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_15"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_15/stack"
  input: "cond/strided_slice_15/stack_1"
  input: "cond/strided_slice_15/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_14/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_14"
  op: "Mul"
  input: "cond/strided_slice_15"
  input: "cond/mul_14/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_6/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_6/begin"
  op: "Pack"
  input: "cond/Slice_6/begin/0"
  input: "cond/mul_13"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_6/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_6/size"
  op: "Pack"
  input: "cond/Slice_6/size/0"
  input: "cond/mul_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_6"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_6/begin"
  input: "cond/Slice_6/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_16/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_16/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_16/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_16"
  op: "StridedSlice"
  input: "cond/concat_4"
  input: "cond/strided_slice_16/stack"
  input: "cond/strided_slice_16/stack_1"
  input: "cond/strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_15/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_15"
  op: "Mul"
  input: "cond/strided_slice_16"
  input: "cond/mul_15/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_17/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "cond/strided_slice_17/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "cond/strided_slice_17/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_17"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_17/stack"
  input: "cond/strided_slice_17/stack_1"
  input: "cond/strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_16/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_16"
  op: "Mul"
  input: "cond/strided_slice_17"
  input: "cond/mul_16/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_7/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_7/begin"
  op: "Pack"
  input: "cond/Slice_7/begin/0"
  input: "cond/mul_15"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_7/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_7/size"
  op: "Pack"
  input: "cond/Slice_7/size/0"
  input: "cond/mul_16"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_7"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_7/begin"
  input: "cond/Slice_7/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/mul_17/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3140456936484258
      }
    }
  }
}
node {
  name: "cond/mul_17"
  op: "Mul"
  input: "cond/Slice_7"
  input: "cond/mul_17/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_5/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_5"
  op: "ConcatV2"
  input: "cond/add_1"
  input: "cond/Slice_6"
  input: "cond/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/concat_6/concat"
  op: "Identity"
  input: "cond/mul_17"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_7/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_7"
  op: "ConcatV2"
  input: "cond/concat_5"
  input: "cond/concat_6/concat"
  input: "cond/concat_7/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_18/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/strided_slice_18/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "cond/strided_slice_18/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cond/strided_slice_18/Switch"
  op: "Switch"
  input: "Reshape_1"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_1"
      }
    }
  }
}
node {
  name: "cond/strided_slice_18"
  op: "StridedSlice"
  input: "cond/strided_slice_18/Switch"
  input: "cond/strided_slice_18/stack"
  input: "cond/strided_slice_18/stack_1"
  input: "cond/strided_slice_18/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/strided_slice_19/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_19/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_19/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_19"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_19/stack"
  input: "cond/strided_slice_19/stack_1"
  input: "cond/strided_slice_19/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_20/stack"
  op: "Pack"
  input: "cond/strided_slice_19"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/strided_slice_20/stack_1"
  op: "Pack"
  input: "cond/Const"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/strided_slice_20/stack_2"
  op: "Pack"
  input: "cond/Const_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/strided_slice_20"
  op: "StridedSlice"
  input: "cond/strided_slice_18"
  input: "cond/strided_slice_20/stack"
  input: "cond/strided_slice_20/stack_1"
  input: "cond/strided_slice_20/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/UniqueWithCounts"
  op: "UniqueWithCounts"
  input: "cond/strided_slice_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Cumsum_2/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Cumsum_2"
  op: "Cumsum"
  input: "cond/UniqueWithCounts:2"
  input: "cond/Cumsum_2/axis"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "exclusive"
    value {
      b: false
    }
  }
  attr {
    key: "reverse"
    value {
      b: false
    }
  }
}
node {
  name: "cond/concat_8/values_0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat_8/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/concat_8"
  op: "ConcatV2"
  input: "cond/concat_8/values_0"
  input: "cond/Cumsum_2"
  input: "cond/concat_8/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_21/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_21/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_21/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_21"
  op: "StridedSlice"
  input: "cond/strided_slice_9/Switch"
  input: "cond/strided_slice_21/stack"
  input: "cond/strided_slice_21/stack_1"
  input: "cond/strided_slice_21/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/add_2"
  op: "AddV2"
  input: "cond/concat_8"
  input: "cond/strided_slice_21"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_22/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_22/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_22/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_22"
  op: "StridedSlice"
  input: "cond/add_2"
  input: "cond/strided_slice_22/stack"
  input: "cond/strided_slice_22/stack_1"
  input: "cond/strided_slice_22/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_18/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_18"
  op: "Mul"
  input: "cond/strided_slice_22"
  input: "cond/mul_18/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_23/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/strided_slice_23/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_23/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_23"
  op: "StridedSlice"
  input: "cond/UniqueWithCounts:2"
  input: "cond/strided_slice_23/stack"
  input: "cond/strided_slice_23/stack_1"
  input: "cond/strided_slice_23/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_19/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_19"
  op: "Mul"
  input: "cond/strided_slice_23"
  input: "cond/mul_19/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_8/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_8/begin"
  op: "Pack"
  input: "cond/Slice_8/begin/0"
  input: "cond/mul_18"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_8/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_8/size"
  op: "Pack"
  input: "cond/Slice_8/size/0"
  input: "cond/mul_19"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_8"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_8/begin"
  input: "cond/Slice_8/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_24/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_24/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_24/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_24"
  op: "StridedSlice"
  input: "cond/add_2"
  input: "cond/strided_slice_24/stack"
  input: "cond/strided_slice_24/stack_1"
  input: "cond/strided_slice_24/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_20/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_20"
  op: "Mul"
  input: "cond/strided_slice_24"
  input: "cond/mul_20/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_25/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_25/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_25/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_25"
  op: "StridedSlice"
  input: "cond/UniqueWithCounts:2"
  input: "cond/strided_slice_25/stack"
  input: "cond/strided_slice_25/stack_1"
  input: "cond/strided_slice_25/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_21/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_21"
  op: "Mul"
  input: "cond/strided_slice_25"
  input: "cond/mul_21/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_9/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_9/begin"
  op: "Pack"
  input: "cond/Slice_9/begin/0"
  input: "cond/mul_20"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_9/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_9/size"
  op: "Pack"
  input: "cond/Slice_9/size/0"
  input: "cond/mul_21"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_9"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_9/begin"
  input: "cond/Slice_9/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/add_3"
  op: "AddV2"
  input: "cond/Slice_8"
  input: "cond/Slice_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_26/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_26/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_26/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_26"
  op: "StridedSlice"
  input: "cond/add_2"
  input: "cond/strided_slice_26/stack"
  input: "cond/strided_slice_26/stack_1"
  input: "cond/strided_slice_26/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_22/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_22"
  op: "Mul"
  input: "cond/strided_slice_26"
  input: "cond/mul_22/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_27/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_27/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_27/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_27"
  op: "StridedSlice"
  input: "cond/UniqueWithCounts:2"
  input: "cond/strided_slice_27/stack"
  input: "cond/strided_slice_27/stack_1"
  input: "cond/strided_slice_27/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_23/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_23"
  op: "Mul"
  input: "cond/strided_slice_27"
  input: "cond/mul_23/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_10/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_10/begin"
  op: "Pack"
  input: "cond/Slice_10/begin/0"
  input: "cond/mul_22"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_10/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_10/size"
  op: "Pack"
  input: "cond/Slice_10/size/0"
  input: "cond/mul_23"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_10"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_10/begin"
  input: "cond/Slice_10/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/strided_slice_28/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_28/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_28/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_28"
  op: "StridedSlice"
  input: "cond/add_2"
  input: "cond/strided_slice_28/stack"
  input: "cond/strided_slice_28/stack_1"
  input: "cond/strided_slice_28/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_24/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_24"
  op: "Mul"
  input: "cond/strided_slice_28"
  input: "cond/mul_24/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/strided_slice_29/stack"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cond/strided_slice_29/stack_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/strided_slice_29/stack_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/strided_slice_29"
  op: "StridedSlice"
  input: "cond/UniqueWithCounts:2"
  input: "cond/strided_slice_29/stack"
  input: "cond/strided_slice_29/stack_1"
  input: "cond/strided_slice_29/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "cond/mul_25/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "cond/mul_25"
  op: "Mul"
  input: "cond/strided_slice_29"
  input: "cond/mul_25/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Slice_11/begin/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/Slice_11/begin"
  op: "Pack"
  input: "cond/Slice_11/begin/0"
  input: "cond/mul_24"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_11/size/0"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/Slice_11/size"
  op: "Pack"
  input: "cond/Slice_11/size/0"
  input: "cond/mul_25"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cond/Slice_11"
  op: "Slice"
  input: "cond/Slice_4/Switch"
  input: "cond/Slice_11/begin"
  input: "cond/Slice_11/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/mul_26/y"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3140456936484258
      }
    }
  }
}
node {
  name: "cond/mul_26"
  op: "Mul"
  input: "cond/Slice_11"
  input: "cond/mul_26/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_9/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_9"
  op: "ConcatV2"
  input: "cond/add_3"
  input: "cond/Slice_10"
  input: "cond/concat_9/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/concat_10/concat"
  op: "Identity"
  input: "cond/mul_26"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "cond/concat_11/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_11"
  op: "ConcatV2"
  input: "cond/concat_9"
  input: "cond/concat_10/concat"
  input: "cond/concat_11/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/concat_12/axis"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/concat_12"
  op: "ConcatV2"
  input: "cond/concat_7"
  input: "cond/concat_11"
  input: "cond/concat_12/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/concat_12"
  input: "cond/concat_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "strided_slice_33/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_33/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_33/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_33"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_33/stack"
  input: "strided_slice_33/stack_1"
  input: "strided_slice_33/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "mul_7"
  op: "Mul"
  input: "mul_7/x"
  input: "strided_slice_33"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_force/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "o_force/shape"
  op: "Pack"
  input: "o_force/shape/0"
  input: "mul_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "o_force"
  op: "Reshape"
  input: "cond/Merge"
  input: "o_force/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_virial/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\t\000\000\000"
      }
    }
  }
}
node {
  name: "o_virial"
  op: "Reshape"
  input: "ProdVirialSeA"
  input: "o_virial/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_34/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_34/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_34/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_34"
  op: "StridedSlice"
  input: "t_natoms"
  input: "strided_slice_34/stack"
  input: "strided_slice_34/stack_1"
  input: "strided_slice_34/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "mul_8"
  op: "Mul"
  input: "mul_8/x"
  input: "strided_slice_34"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "o_atom_virial/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "o_atom_virial/shape"
  op: "Pack"
  input: "o_atom_virial/shape/0"
  input: "mul_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "o_atom_virial"
  op: "Reshape"
  input: "ProdVirialSeA:1"
  input: "o_atom_virial/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
library {
}
versions {
  producer: 1882
}
