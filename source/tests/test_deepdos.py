import os
import unittest

import numpy as np
from common import (
    finite_difference,
    strerch_box,
    tests_path,
    tf,
)
from packaging.version import parse as parse_version

from deepmd.env import (
    GLOBAL_NP_FLOAT_PRECISION,
)
from deepmd.infer import (
    DeepDOS,
)
from deepmd.utils.convert import (
    convert_pbtxt_to_pb,
)

if GLOBAL_NP_FLOAT_PRECISION == np.float32:
    default_places = 4
else:
    default_places = 10


class TestDeepDOS(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        convert_pbtxt_to_pb(
            str(tests_path / os.path.join("infer", "deepdos.pbtxt")), "deepdos.pb"
        )
        cls.dp = DeepDOS( os.path.join("infer","deepdos.pb") )

    def setUp(self):
        self.coords = np.array(
           [2.288635, 1.458305, 3.706535, 3.475085, 3.504745, 0.09779 ,
            1.573935, 1.549525, 1.131545, 3.006885, 4.479635, 2.619155,
            5.152595, 4.795225, 2.359665, 4.564595, 2.294005, 1.920635,
            0.271162, 2.918505, 3.850855, 0.407016, 4.924935, 5.053735]
        )
        self.atype = [0, 0, 0, 0, 0, 0, 0, 0]
        self.box = np.array([5.184978, 0.      , 0.      , 
                             0.      , 5.184978, 0.      ,
                             0.      , 0.      , 5.184978])
        self.expected_d = np.array(
           [-1.39605350e-03, -1.92391490e-03, -2.93336402e-03, -6.89005495e-03,
            -7.84341598e-03, -6.37881470e-03, -1.10690050e-02, -1.57944583e-02,
            -1.41017849e-02, -4.15139513e-03,  7.71794033e-03,  1.99412772e-02,
            5.10549502e-02,  1.01076847e-01,  1.56040012e-01,  2.15395181e-01,
            3.02663371e-01,  3.80253003e-01,  4.75254287e-01,  5.58468723e-01,
            6.54641224e-01,  7.57292319e-01,  8.32860328e-01,  9.14471753e-01,
            9.88996895e-01,  1.04753677e+00,  1.10007431e+00,  1.11869448e+00,
            1.13010934e+00,  1.14578542e+00,  1.12353519e+00,  1.13633468e+00,
            1.14922221e+00,  1.17046884e+00,  1.23263790e+00,  1.30740559e+00,
            1.39474862e+00,  1.47572995e+00,  1.54402751e+00,  1.59417930e+00,
            1.63017153e+00,  1.64617477e+00,  1.64632686e+00,  1.64807478e+00,
            1.65193707e+00,  1.64721726e+00,  1.69176028e+00,  1.72309614e+00,
            1.78413448e+00,  1.80906684e+00,  1.85785009e+00,  1.89456024e+00,
            1.96632161e+00,  2.01793899e+00,  2.05232979e+00,  2.08346990e+00,
            2.09469621e+00,  2.09994427e+00,  2.09880788e+00,  2.08695950e+00,
            2.07824061e+00,  2.08276615e+00,  2.06380777e+00,  2.03929364e+00,
            2.02880902e+00,  2.02322435e+00,  1.99222809e+00,  1.93997341e+00,
            1.88114287e+00,  1.80893045e+00,  1.76219312e+00,  1.82217371e+00,
            1.89333341e+00,  2.02360649e+00,  2.18544346e+00,  2.31464601e+00,
            2.38889806e+00,  2.41743747e+00,  2.39244090e+00,  2.36446352e+00,
            2.35240420e+00,  2.37677624e+00,  2.40832943e+00,  2.42714913e+00,
            2.43265910e+00,  2.39769010e+00,  2.34234331e+00,  2.28782585e+00,
            2.26373183e+00,  2.28309215e+00,  2.30357719e+00,  2.31154715e+00,
            2.29570145e+00,  2.27557362e+00,  2.24059172e+00,  2.24075616e+00,
            2.29794667e+00,  2.37066084e+00,  2.44316186e+00,  2.50179002e+00,
            2.53515497e+00,  2.58569552e+00,  2.67054328e+00,  2.76630919e+00,
            2.87856373e+00,  2.95530070e+00,  3.03032080e+00,  3.10891363e+00,
            3.16266186e+00,  3.23966629e+00,  3.28899899e+00,  3.32381666e+00,
            3.36746576e+00,  3.40019374e+00,  3.42817129e+00,  3.43598200e+00,
            3.47668502e+00,  3.47685782e+00,  3.52705804e+00,  3.58318620e+00,
            3.61959993e+00,  3.66636845e+00,  3.68055753e+00,  3.71591338e+00,
            3.71871263e+00,  3.72753360e+00,  3.72466430e+00,  3.70633316e+00,
            3.67081873e+00,  3.61239051e+00,  3.55272612e+00,  3.55024871e+00,
            3.55061898e+00,  3.56265867e+00,  3.55682619e+00,  3.52874422e+00,
            3.50783890e+00,  3.49618599e+00,  3.49037121e+00,  3.42867476e+00,
            3.35788071e+00,  3.26222443e+00,  3.17601982e+00,  3.07729280e+00,
            3.02038647e+00,  2.98073273e+00,  2.91513496e+00,  2.88749904e+00,
            2.83922832e+00,  2.84838851e+00,  2.84492522e+00,  2.92385646e+00,
            2.92999382e+00,  2.98952459e+00,  3.05588136e+00,  3.10640150e+00,
            3.14875702e+00,  3.21675604e+00,  3.27913691e+00,  3.33546782e+00,
            3.38229417e+00,  3.43984402e+00,  3.47070910e+00,  3.50738763e+00,
            3.55720791e+00,  3.57609679e+00,  3.57008296e+00,  3.57885277e+00,
            3.59893027e+00,  3.61423429e+00,  3.61980540e+00,  3.60556153e+00,
            3.56494385e+00,  3.54140914e+00,  3.54576870e+00,  3.55583963e+00,
            3.55858712e+00,  3.58428511e+00,  3.61107676e+00,  3.60119193e+00,
            3.59449842e+00,  3.57238808e+00,  3.54789745e+00,  3.52535310e+00,
            3.53170025e+00,  3.50967866e+00,  3.48335339e+00,  3.46534433e+00,
            3.42071760e+00,  3.38548033e+00,  3.33026051e+00,  3.28560773e+00,
            3.24771844e+00,  3.23164143e+00,  3.19545767e+00,  3.15457717e+00,
            3.09675196e+00,  3.04579248e+00,  3.01345922e+00,  2.97670855e+00,
            2.95000713e+00,  2.92729969e+00,  2.89379625e+00,  2.85327975e+00,
            2.81009974e+00,  2.77506620e+00,  2.72497899e+00,  2.66778614e+00,
            2.59606370e+00,  2.49898795e+00,  2.40319088e+00,  2.26655588e+00,
            2.09713285e+00,  1.90081706e+00,  1.69550906e+00,  1.47054056e+00,
            1.25949404e+00,  1.05075616e+00,  8.83294556e-01,  7.30385509e-01,
            5.75582481e-01,  4.56838754e-01,  3.50334857e-01,  2.63205803e-01,
            1.90607592e-01,  1.40443311e-01,  9.16355496e-02,  7.32581420e-02,
            4.85474483e-02,  2.66933745e-02,  1.93280636e-02,  1.02097731e-02,
            -2.27193408e-03, -1.34813650e-03,  3.94898020e-03,  6.28422243e-03,
            -5.52495217e-03,  3.76089368e-03, -1.44063317e-03,  2.79928967e-03,
            -2.88969091e-03,  6.90725333e-03, -2.16453796e-03, -2.19638756e-03,
            2.63976595e-05, -4.49650579e-03,  4.30309381e-03, -3.19808879e-04,
            1.06598367e-03, -2.42577917e-04]
        )

    @classmethod
    def tearDownClass(cls):
        os.remove("deepdos.pb")
        cls.dp = None

    def test_attrs(self):
        self.assertEqual(self.dp.get_ntypes(), 1)
        self.assertAlmostEqual(self.dp.get_rcut(), 5.0, places=default_places)
        self.assertEqual(self.dp.get_type_map(), ['Si'])
        self.assertEqual(self.dp.get_numb_dos(), 250)

    def test_1frame(self):
        dd = self.dp.eval(self.coords, self.box, self.atype)
        # check shape of the returns
        nframes = 1
        natoms = len(self.atype)
        numb_dos = 250
        self.assertEqual(dd.shape, (nframes, numb_dos))
        # check values
        np.testing.assert_almost_equal(dd.ravel(), self.expected_dos, default_places)

    def test_2frame(self):
        coords2 = np.concatenate((self.coords, self.coords))
        box2 = np.concatenate((self.box, self.box))
        dd = self.dp.eval(coords2, box2, self.atype)
        # check shape of the returns
        nframes = 2
        natoms = len(self.atype)
        numb_dos = 250
        self.assertEqual(dd.shape, (nframes, numb_dos))
        # check values
        # expected_dos2 = np.concatenate((self.expected_dos, self.expected_dos))
        # np.testing.assert_almost_equal(dd.ravel(), expected_dos2, default_places)

