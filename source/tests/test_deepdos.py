import os
import unittest

import numpy as np
from common import (
    tests_path,
)

from deepmd.env import (
    GLOBAL_NP_FLOAT_PRECISION,
)
from deepmd.infer import (
    DeepDOS,
)
from deepmd.utils.convert import (
    convert_pbtxt_to_pb,
)

GLOBAL_NP_FLOAT_PRECISION = np.float32

if GLOBAL_NP_FLOAT_PRECISION == np.float32:
    default_places = 4
else:
    default_places = 10


class TestDeepDOS(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        convert_pbtxt_to_pb(
            str(tests_path / os.path.join("infer", "deepdos.pbtxt")), "deepdos.pb"
        )
        cls.dp = DeepDOS("deepdos.pb")

    def setUp(self):
        self.coords = np.array(
            [
                2.288635,
                1.458305,
                3.706535,
                3.475085,
                3.504745,
                0.09779,
                1.573935,
                1.549525,
                1.131545,
                3.006885,
                4.479635,
                2.619155,
                5.152595,
                4.795225,
                2.359665,
                4.564595,
                2.294005,
                1.920635,
                0.271162,
                2.918505,
                3.850855,
                0.407016,
                4.924935,
                5.053735,
            ]
        )
        self.atype = [0, 0, 0, 0, 0, 0, 0, 0]
        self.box = np.array(
            [5.184978, 0.0, 0.0, 0.0, 5.184978, 0.0, 0.0, 0.0, 5.184978]
        )
        self.expected_d = np.array(
            [
                -1.39605350e-03,
                -1.92391490e-03,
                -2.93336402e-03,
                -6.89005495e-03,
                -7.84341598e-03,
                -6.37881470e-03,
                -1.10690050e-02,
                -1.57944583e-02,
                -1.41017849e-02,
                -4.15139513e-03,
                7.71794033e-03,
                1.99412772e-02,
                5.10549502e-02,
                1.01076847e-01,
                1.56040012e-01,
                2.15395181e-01,
                3.02663371e-01,
                3.80253003e-01,
                4.75254287e-01,
                5.58468723e-01,
                6.54641224e-01,
                7.57292319e-01,
                8.32860328e-01,
                9.14471753e-01,
                9.88996895e-01,
                1.04753677e00,
                1.10007431e00,
                1.11869448e00,
                1.13010934e00,
                1.14578542e00,
                1.12353519e00,
                1.13633468e00,
                1.14922221e00,
                1.17046884e00,
                1.23263790e00,
                1.30740559e00,
                1.39474862e00,
                1.47572995e00,
                1.54402751e00,
                1.59417930e00,
                1.63017153e00,
                1.64617477e00,
                1.64632686e00,
                1.64807478e00,
                1.65193707e00,
                1.64721726e00,
                1.69176028e00,
                1.72309614e00,
                1.78413448e00,
                1.80906684e00,
                1.85785009e00,
                1.89456024e00,
                1.96632161e00,
                2.01793899e00,
                2.05232979e00,
                2.08346990e00,
                2.09469621e00,
                2.09994427e00,
                2.09880788e00,
                2.08695950e00,
                2.07824061e00,
                2.08276615e00,
                2.06380777e00,
                2.03929364e00,
                2.02880902e00,
                2.02322435e00,
                1.99222809e00,
                1.93997341e00,
                1.88114287e00,
                1.80893045e00,
                1.76219312e00,
                1.82217371e00,
                1.89333341e00,
                2.02360649e00,
                2.18544346e00,
                2.31464601e00,
                2.38889806e00,
                2.41743747e00,
                2.39244090e00,
                2.36446352e00,
                2.35240420e00,
                2.37677624e00,
                2.40832943e00,
                2.42714913e00,
                2.43265910e00,
                2.39769010e00,
                2.34234331e00,
                2.28782585e00,
                2.26373183e00,
                2.28309215e00,
                2.30357719e00,
                2.31154715e00,
                2.29570145e00,
                2.27557362e00,
                2.24059172e00,
                2.24075616e00,
                2.29794667e00,
                2.37066084e00,
                2.44316186e00,
                2.50179002e00,
                2.53515497e00,
                2.58569552e00,
                2.67054328e00,
                2.76630919e00,
                2.87856373e00,
                2.95530070e00,
                3.03032080e00,
                3.10891363e00,
                3.16266186e00,
                3.23966629e00,
                3.28899899e00,
                3.32381666e00,
                3.36746576e00,
                3.40019374e00,
                3.42817129e00,
                3.43598200e00,
                3.47668502e00,
                3.47685782e00,
                3.52705804e00,
                3.58318620e00,
                3.61959993e00,
                3.66636845e00,
                3.68055753e00,
                3.71591338e00,
                3.71871263e00,
                3.72753360e00,
                3.72466430e00,
                3.70633316e00,
                3.67081873e00,
                3.61239051e00,
                3.55272612e00,
                3.55024871e00,
                3.55061898e00,
                3.56265867e00,
                3.55682619e00,
                3.52874422e00,
                3.50783890e00,
                3.49618599e00,
                3.49037121e00,
                3.42867476e00,
                3.35788071e00,
                3.26222443e00,
                3.17601982e00,
                3.07729280e00,
                3.02038647e00,
                2.98073273e00,
                2.91513496e00,
                2.88749904e00,
                2.83922832e00,
                2.84838851e00,
                2.84492522e00,
                2.92385646e00,
                2.92999382e00,
                2.98952459e00,
                3.05588136e00,
                3.10640150e00,
                3.14875702e00,
                3.21675604e00,
                3.27913691e00,
                3.33546782e00,
                3.38229417e00,
                3.43984402e00,
                3.47070910e00,
                3.50738763e00,
                3.55720791e00,
                3.57609679e00,
                3.57008296e00,
                3.57885277e00,
                3.59893027e00,
                3.61423429e00,
                3.61980540e00,
                3.60556153e00,
                3.56494385e00,
                3.54140914e00,
                3.54576870e00,
                3.55583963e00,
                3.55858712e00,
                3.58428511e00,
                3.61107676e00,
                3.60119193e00,
                3.59449842e00,
                3.57238808e00,
                3.54789745e00,
                3.52535310e00,
                3.53170025e00,
                3.50967866e00,
                3.48335339e00,
                3.46534433e00,
                3.42071760e00,
                3.38548033e00,
                3.33026051e00,
                3.28560773e00,
                3.24771844e00,
                3.23164143e00,
                3.19545767e00,
                3.15457717e00,
                3.09675196e00,
                3.04579248e00,
                3.01345922e00,
                2.97670855e00,
                2.95000713e00,
                2.92729969e00,
                2.89379625e00,
                2.85327975e00,
                2.81009974e00,
                2.77506620e00,
                2.72497899e00,
                2.66778614e00,
                2.59606370e00,
                2.49898795e00,
                2.40319088e00,
                2.26655588e00,
                2.09713285e00,
                1.90081706e00,
                1.69550906e00,
                1.47054056e00,
                1.25949404e00,
                1.05075616e00,
                8.83294556e-01,
                7.30385509e-01,
                5.75582481e-01,
                4.56838754e-01,
                3.50334857e-01,
                2.63205803e-01,
                1.90607592e-01,
                1.40443311e-01,
                9.16355496e-02,
                7.32581420e-02,
                4.85474483e-02,
                2.66933745e-02,
                1.93280636e-02,
                1.02097731e-02,
                -2.27193408e-03,
                -1.34813650e-03,
                3.94898020e-03,
                6.28422243e-03,
                -5.52495217e-03,
                3.76089368e-03,
                -1.44063317e-03,
                2.79928967e-03,
                -2.88969091e-03,
                6.90725333e-03,
                -2.16453796e-03,
                -2.19638756e-03,
                2.63976595e-05,
                -4.49650579e-03,
                4.30309381e-03,
                -3.19808879e-04,
                1.06598367e-03,
                -2.42577917e-04,
            ]
        )

    @classmethod
    def tearDownClass(cls):
        os.remove("deepdos.pb")
        cls.dp = None

    def test_attrs(self):
        self.assertEqual(self.dp.get_ntypes(), 1)
        self.assertAlmostEqual(self.dp.get_rcut(), 5.0, places=default_places)
        self.assertEqual(self.dp.get_type_map(), ["Si"])
        self.assertEqual(self.dp.get_numb_dos(), 250)

    def test_1frame(self):
        dd = self.dp.eval(self.coords, self.box, self.atype)
        # check shape of the returns
        nframes = 1
        natoms = len(self.atype)
        numb_dos = 250
        self.assertEqual(dd.shape, (nframes, numb_dos))
        # check values
        np.testing.assert_almost_equal(dd.ravel(), self.expected_dos, default_places)

    def test_2frame(self):
        coords2 = np.concatenate((self.coords, self.coords))
        box2 = np.concatenate((self.box, self.box))
        dd = self.dp.eval(coords2, box2, self.atype)
        # check shape of the returns
        nframes = 2
        natoms = len(self.atype)
        numb_dos = 250
        self.assertEqual(dd.shape, (nframes, numb_dos))
        # check values
        # expected_dos2 = np.concatenate((self.expected_dos, self.expected_dos))
        # np.testing.assert_almost_equal(dd.ravel(), expected_dos2, default_places)
